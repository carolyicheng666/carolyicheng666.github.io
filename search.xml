<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>闭包经典面试题</title>
    <url>/2018/08/29/setTimeout/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>今天的风儿甚是喧嚣  </p>
<p><strong>男子高中生的日常</strong></p>
</blockquote>
<a id="more"></a>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Q: 下面的代码会输出什么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A: 先立即输出一个5，然后每隔1s输出一个5，一共输出5个5。</p>
<p>Q: 那么要正常（每隔1s）输出0，1，2，3，4，程序要如何修改？</p>
<h1 id="使用let"><a href="#使用let" class="headerlink" title="使用let"></a>使用let</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用IIFE"><a href="#使用IIFE" class="headerlink" title="使用IIFE"></a>使用IIFE</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, j*<span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;(i), i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用setTimeout的第三个参数"><a href="#使用setTimeout的第三个参数" class="headerlink" title="使用setTimeout的第三个参数"></a>使用setTimeout的第三个参数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j);</span><br><span class="line">  &#125;, i*<span class="number">1000</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>嗯，由于被问到的频率有点高，就总结一下，可能考点是闭包吧，面试时有说过可以用IIFE实现，然后的感觉像是互相在尬聊……<br>暂时只想到这几种方法……</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 数组方法</title>
    <url>/2018/08/03/array/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>越是美好的回忆，有时可能会令人越痛苦<br>幸福和美好的回忆并不一定是救赎</p>
<p><strong>可塑性记忆</strong></p>
</blockquote>
<a id="more"></a>
<h1 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h1><ul>
<li><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2>isArray() 方法用于检测是否是数组。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(nums)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">true</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><ul>
<li><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2>除了继承而来的 toLocaleString()、toString() 和 valueOf() 方法，数组还有自己的 join() 方法。join() 方法只接收一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串。如果不给 join() 方法传入任何参数，或者传入 undefined ，则使用逗号作为分隔符，与前面继承而来的三个方法返回结果一致。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colors.join()) <span class="comment">// red,green,blue</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">"|"</span>)) <span class="comment">// red|green|blue</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h1><ul>
<li><h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><p>push() 方法接收任意数量的参数，把它们逐个添加到数组的末尾，并返回修改后数组的长度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br><span class="line"><span class="keyword">var</span> count = colors.push(<span class="string">"black"</span>, <span class="string">"yellow"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [ 'red', 'green', 'blue', 'black', 'yellow' ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><p>pop() 方法从数组末尾移除最后一项，减少数组的长度，然后返回移除的项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br><span class="line"><span class="keyword">var</span> item = colors.pop()</span><br><span class="line"><span class="built_in">console</span>.log(item) <span class="comment">// 'blue'</span></span><br><span class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [ 'red', 'green' ]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h1><ul>
<li><h2 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h2><p>shift() 方法从数组头部移除第一项，减少数组的长度，然后返回移除的项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br><span class="line"><span class="keyword">var</span> item = colors.shift()</span><br><span class="line"><span class="built_in">console</span>.log(item) <span class="comment">// 'red'</span></span><br><span class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [ 'green', 'blue' ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><p>unshift() 方法接收任意数量的参数，并在数组的前端添加项，并返回修改后数组的长度。这里是以队列方式添加，注意与push()添加的区别。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br><span class="line"><span class="keyword">var</span> count = colors.unshift(<span class="string">"black"</span>, <span class="string">"yellow"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [ 'black', 'yellow', 'red', 'green', 'blue' ]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h1><ul>
<li><h2 id="reserve"><a href="#reserve" class="headerlink" title="reserve()"></a>reserve()</h2><p>reserve() 方法用于反转数组的顺序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nums.reverse()) <span class="comment">// [ 4, 5, 2, 3, 1 ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p>sort() 方法默认情况下会按升序排列数组项，但是 sort() 方法为了实现排序会调用每个数组项的 toString() 转型方法，然后比较得到的字符串，所以可能会产生意想不到的效果，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nums.sort()) <span class="comment">// [ 0, 1, 10, 15, 5 ]</span></span><br></pre></td></tr></table></figure>
<p>为了解决上面的问题，sort() 方法可以接收一个比较函数作为参数，使排序结果达到我们的预期。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">15</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nums.sort(compare)) <span class="comment">// [ 0, 1, 5, 10, 15 ]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compare() 方法如果返回正数，说明a要位于b之后；如果返回负数，说明a要位于b之前；如果返回0，说明a与b相等。</p>
</li>
</ul>
<h1 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h1><ul>
<li><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><p>concat() 方法可以基于当前数组中的所有项创建一个新数组。这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组，参数可以是一个或多个数组。如果传递的参数不是数组，这些值就会被简单地添加到结果数组的末尾。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colors.concat(<span class="string">"yellow"</span>, [<span class="string">"black"</span>, <span class="string">"brown"</span>])) <span class="comment">// [ 'red', 'green', 'blue', 'yellow', 'black', 'brown' ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p>slice() 方法接收一个或两个参数，即要返回项的起始位置和结束位置。如果只传一个参数，返回从该参数指定位置（包含该位置的项）开始到当前数组末尾的新数组；如果有两个参数，返回起始和结束位置之间（包含起始位置但不包含结束位置的项）的新数组。slice() 方法不会影响原始数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colors.slice(<span class="number">1</span>)) <span class="comment">// [ 'green', 'blue', 'yellow', 'black' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.slice(<span class="number">1</span>, <span class="number">4</span>)) <span class="comment">// [ 'green', 'blue', 'yellow' ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><p>splice() 方法有三个用法：删除、插入和替换。这个方法始终返回一个数组，包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。
用作删除时，传入两个参数，分别是要删除的第一项的位置和要删除的项数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colors.splice(<span class="number">0</span>, <span class="number">2</span>)) <span class="comment">// [ 'red', 'green' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [ 'blue', 'yellow', 'black' ]</span></span><br></pre></td></tr></table></figure>
<p>用作插入和替换时，传入三个参数，分别是起始位置、要删除的项数（用作插入时设置成0）和要插入（替换）的项，这里的项可以是一个或多个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colors.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="string">"orange"</span>, <span class="string">"purple"</span>)) <span class="comment">// [ 'blue' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [ 'red', 'green', 'orange', 'purple', 'yellow', 'black' ]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h1><ul>
<li><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><p>indexOf() 方法接收两个参数，分别是要查找的项和查找起点位置的索引，其中第二个参数可选，不设置时则默认从数组开头进行查找，方法返回要查找的项在起点位置之后首次出现时位置的索引值，如果没有找到，则返回-1。查找时，查找的项要严格相等（ === ）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nums.indexOf(<span class="number">4</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(nums.indexOf(<span class="number">4</span>, <span class="number">4</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p>lastIndexOf() 方法与 indexOf() 方法使用方式一致，唯一不同的是 lastIndexOf() 方法是从数组的末尾开始向前查找。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nums.lastIndexOf(<span class="number">4</span>)) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(nums.lastIndexOf(<span class="number">4</span>, <span class="number">4</span>)) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h1><p>迭代方法一共有5个，每个方法都接收两个参数，分别是要在每一项运行的函数和运行该函数的作用域对象，第二个参数可选。第一个参数中传入的函数会接收三个参数，分别是数组项的值、该数组项的索引值和数组本身，其中后两个参数可选。</p>
<ul>
<li><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p>every() 方法对数组中的每一项运行给定函数，如果函数对每一项都返回true，则返回true。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> everyResult = nums.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(everyResult) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p>some() 方法对数组中的每一项运行给定函数，如果函数对任意一项返回true，则返回true。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> someResult = nums.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(someResult) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>filter() 方法对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> filterResult = nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(filterResult) <span class="comment">// [ 3, 4, 5, 4, 3 ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>map() 方法对数组中的每一项运行给定函数，返回每次调用的结果组成的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> mapResult = nums.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mapResult) <span class="comment">// [ 2, 4, 6, 8, 10, 8, 6, 4, 2 ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p>forEach() 方法对数组中的每一项运行给定函数，这个方法没有返回值，本质上与使用for循环迭代数组一样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">nums.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h1><ul>
<li><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p>reduce() 方法会迭代数组的所有项，然后构建一个最终返回的值。方法接收两个参数。分别是一个在每一项上调用的函数和作为归并的初始值，第二个参数可选。第一个参数函数接收四个参数，分别是数组的前一个值、当前值、项的索引值和数组本身。如果设置了初始值，则函数第一次执行时，第一个参数就是这个初始值；如果没有设置初始值，则函数第一次执行是，第一个参数就是数组的第一项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> sum = nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h2><p>reduceRight() 方法使用方式与 reduce() 一致，唯一的区别是 reduceRight() 方法是从数组最后一项向前遍历。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> sum = nums.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="ES6-新增"><a href="#ES6-新增" class="headerlink" title="ES6 新增"></a>ES6 新增</h1><ul>
<li><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p>Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。这个方法接收两个参数，分别是想要转换成数组的伪数组对象或可迭代对象
、新数组中的每个元素要执行的回调函数，第二个参数可选，其实第二个参数相当于一个 map() 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(nums, <span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p>Array.of() 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。这个方法接收任意数量的参数，返回按参数顺序组成的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">7</span>)) <span class="comment">// [ 7 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h2><p>copyWithin() 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小。这个方法接收三个参数，分别是复制到某位置的索引值、开始复制的起始位置（包括）和结束位置（不包括），后两个参数可选，不设置起始位置表示从数组开始进行复制，不设置结束位置表示一致复制到数组末尾。这个方法会该表原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nums.copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// [ 4, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(nums.copyWithin(<span class="number">1</span>, <span class="number">3</span>)) <span class="comment">// [ 4, 4, 5, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(nums) <span class="comment">// [ 4, 4, 5, 4, 5 ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h2><p>fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。参数释义及使用方式和上面的 copyWithin() 一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nums.fill(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>)) <span class="comment">// [ 1, 2, 0, 0, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(nums.fill(<span class="number">5</span>, <span class="number">1</span>)) <span class="comment">// [ 1, 5, 5, 5, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(nums.fill(<span class="number">6</span>)) <span class="comment">// [ 6, 6, 6, 6, 6 ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h2><p>entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的[key,value]。可以调用 next() 方法遍历迭代器取得原数组的[key,value]。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">var</span> iterator = arr.entries()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> e <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [ 0, 'a' ]</span></span><br><span class="line"><span class="comment">// [ 1, 'b' ]</span></span><br><span class="line"><span class="comment">// [ 2, 'c' ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h2><p>keys() 方法返回一个新的Array Iterator对象，它包含数组中每个索引的键。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">var</span> iterator = arr.keys()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h2><p>values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。这个方法目前存在兼容性的问题，建议使用上面的 entries() 方法获取。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">var</span> iterator = arr.values()</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> found = nums.find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(found) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h2><p>findIndex() 方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> found = nums.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(found) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h2><p>includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。这个方法接收两个参数，分别是指定值和搜索开始的数组索引值，第二个参数可选。第二个参数如果为负值，则按升序从这个负值加上数组长度的索引开始搜索。默认为 0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nums.includes(<span class="number">3</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(nums.includes(<span class="number">10</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 创建对象</title>
    <url>/2018/07/20/create-object/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>无可取代的东西要等到失去之后才懂得珍惜呢</p>
<p><strong>干物妹！小埋</strong></p>
</blockquote>
<a id="more"></a>
<div class="note danger"><p>用Object构造函数或字面量创建对象有个明显的缺点：如果创建一定量的对象会产生大量重复性的代码。</p></div>
<p>为了解决这个问题，本文就来介绍JavaScript中常见的几种创建对象的模式。</p>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式抽象了创建具体对象的过程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 工厂模式 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.name = name</span><br><span class="line">  o.age = age</span><br><span class="line">  o.job = job</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"Tom"</span>, <span class="number">20</span>, <span class="string">"Teacher"</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">"Bob"</span>, <span class="number">18</span>, <span class="string">"Doctor"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName())  <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.sayName())  <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure>
<p>每次调用createPerson函数创建对象，这个对象都会包含三个属性（name，age，job）和一个方法（sayName）。工厂模式虽然解决了创建多个相似对象的问题，对没有解决对象识别的问题（不知道对象的类型），比如上面的例子中person1和person2都不是createPerson的实例。</p>
<h1 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h1><p>构造函数可以用来创建特定类型的对象，能够解决上述对象识别的问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 构造函数模式 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.job = job</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">20</span>, <span class="string">"Teacher"</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>, <span class="number">18</span>, <span class="string">"Doctor"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName())  <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.sayName())  <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure>
<p>这个例子中person1和person2既是Object的实例，同时也是Person的实例。但构造函数模式同样也有缺点：每个方法都要在每个实例上创建一遍，而像上面的sayName()这种类似的方法完全没必要多次创建。</p>
<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>构造函数的问题可以利用原型模式的特点，让所有对象实例共享原型对象所包含的属性和方法来解决。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 原型模式 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  name: "Tom",</span><br><span class="line">  age: 20,</span><br><span class="line">  job: "Dortor",</span><br><span class="line">  friends: ["John", "Lina"],</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">"Bob"</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName())  <span class="comment">// Bob</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.sayName())  <span class="comment">// Tom</span></span><br><span class="line"></span><br><span class="line">person1.friends.push(<span class="string">"Van"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person1.friends)  <span class="comment">// [ 'John', 'Lina', 'Van' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.friends)  <span class="comment">// [ 'John', 'Lina', 'Van' ]</span></span><br></pre></td></tr></table></figure>
<p>虽然原型模式避免了构造函数模式带来的问题，但其共享的特性对于包含引用类型值的属性（比如上例中的friends）来说，无疑是致命的。当然还有一个小问题是初始化时，所有的实例默认都带有相同的默认值。</p>
<h1 id="组合构造函数模式和原型模式（推荐使用）"><a href="#组合构造函数模式和原型模式（推荐使用）" class="headerlink" title="组合构造函数模式和原型模式（推荐使用）"></a>组合构造函数模式和原型模式（推荐使用）</h1><p>我们可以结合构造函数模式和原型模式的优点，使用构造函数来定义实例属性，使用原型来定义方法和共享的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 组合使用构造函数和原型模式 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.job = job</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">"John"</span>, <span class="string">"Lina"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">20</span>, <span class="string">"Teacher"</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>, <span class="number">18</span>, <span class="string">"Doctor"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.friends === person2.friends)  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName === person2.sayName)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">person1.friends.push(<span class="string">"Van"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person1.friends)  <span class="comment">// [ 'John', 'Lina', 'Van' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.friends)  <span class="comment">// [ 'John', 'Lina' ]</span></span><br></pre></td></tr></table></figure>
<p>这种模式是目前使用最广泛、认同度最高的一种创建自定义类型的方法。</p>
<h1 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h1><p>这种模式将所有信息都封装在了构造函数中，通过构造函数初始化原型，保持了同时使用构造函数和原型的优点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 动态原型模式 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.job = job</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">"John"</span>, <span class="string">"Lina"</span>]</span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">"function"</span>) &#123;</span><br><span class="line">    Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">20</span>, <span class="string">"Teacher"</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>, <span class="number">18</span>, <span class="string">"Doctor"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName())  <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.sayName())  <span class="comment">// Bob</span></span><br><span class="line"></span><br><span class="line">person1.friends.push(<span class="string">"Van"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person1.friends)  <span class="comment">// [ 'John', 'Lina', 'Van' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.friends)  <span class="comment">// [ 'John', 'Lina' ]</span></span><br></pre></td></tr></table></figure>
<p>这里巧妙的使用了if判断sayName()方法是否存在，使其只会在初次调用构造函数时才会执行。</p>
<h1 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h1><p>基本思想是创建一个函数，这个函数仅仅是封装创建对象的代码，然后再返回新创建的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 寄生构造函数模式 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.name = name</span><br><span class="line">  o.age = age</span><br><span class="line">  o.job = job</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">20</span>, <span class="string">"Teacher"</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>, <span class="number">18</span>, <span class="string">"Doctor"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName())  <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.sayName())  <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure>
<p>这种模式除了使用new操作符并把使用的包装函数叫做构造函数之外，其实和工厂模式一模一样。这里的构造函数返回的对象与在构造函数外部创建的对象没有什么不同，所以依然不能确定对象类型。</p>
<h1 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h1><p>稳妥构造函数遵循寄生构造函数类似的模式，但有两点不同：</p>
<ul>
<li>新创建对象的实例方法不引用this</li>
<li>不适用new操作符调用构造函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 稳妥构造函数模式 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">20</span>, <span class="string">"Teacher"</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>, <span class="number">18</span>, <span class="string">"Doctor"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName())  <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.sayName())  <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure>
<p>在这种模式下创建的是稳妥对象，比如上例中除了调用sayName()方法外，没有别的方式可以访问其数据成员。不过这种模式和寄生模式类似，不能确定对象类型。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 继承</title>
    <url>/2018/07/17/inheritance/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>只要有想见的人<br>就一定不会孤单</p>
<p><strong>夏目友人帐</strong></p>
</blockquote>
<a id="more"></a>
<div class="note danger"><p>大部分面向对象的语言都支持两种继承方式：接口继承和实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法。由于 ECMAScript 的函数没有签名，无法实现接口继承，故其只能支持实现继承，而且实现继承主要是依靠原型链来实现的。</p></div>
<h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>基本思想是利用原型将一个引用类型继承另一个引用类型的属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 原型链继承 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">superType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"blue"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">superType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.property = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承了 superType</span></span><br><span class="line">subType.prototype = <span class="keyword">new</span> superType()</span><br><span class="line"></span><br><span class="line">subType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> subType()</span><br><span class="line"><span class="built_in">console</span>.log(instance.getSubValue())  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.colors)  <span class="comment">// [ 'red', 'yellow', 'blue' ]</span></span><br><span class="line"></span><br><span class="line">instance.colors.push(<span class="string">"green"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance.colors)  <span class="comment">// [ 'red', 'yellow', 'blue', 'green' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> subType()</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors)  <span class="comment">// [ 'red', 'yellow', 'blue', 'green' ]</span></span><br></pre></td></tr></table></figure>
<p>上面的例子简单实现了子类型subType继承超类型superType，但是正如上所示，存在着两个致命的问题：</p>
<ul>
<li>包含引用类型值的原型属性会被所有实例共享</li>
<li>在创建子类型实例时，不能向超类型的构造函数中传递参数</li>
</ul>
<h1 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h1><p>基本思想是子类型构造函数的内部调用超类型构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 借用构造函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">superType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"blue"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 继承了 superType</span></span><br><span class="line">  superType.call(<span class="keyword">this</span>, <span class="string">"Bob"</span>)</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> subType()</span><br><span class="line"><span class="built_in">console</span>.log(instance.name)  <span class="comment">// Bob</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.age)  <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.colors)  <span class="comment">// [ 'red', 'yellow', 'blue' ]</span></span><br><span class="line"></span><br><span class="line">instance.colors.push(<span class="string">"green"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance.colors)  <span class="comment">// [ 'red', 'yellow', 'blue', 'green' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> subType()</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors)  <span class="comment">// [ 'red', 'yellow', 'blue' ]</span></span><br></pre></td></tr></table></figure>
<p>同样的，上面的例子简单实现了子类型subType继承超类型superType，但还是存在两个问题：</p>
<ul>
<li>方法都在构造函数中定义，不能做到函数复用</li>
<li>在超类型的原型中定义的方法，对子类型是不可见的，结果所有类型都只能使用构造函数模式</li>
</ul>
<h1 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h1><p>将原型链和借用构造函数的技术组合到一起，发挥两者的长处，即使用原型链实现对原型属性和方法的继承，借用构造函数实现对实例属性的继承。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 组合继承 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">superType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"blue"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">superType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 继承属性</span></span><br><span class="line">  superType.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line">subType.prototype = <span class="keyword">new</span> superType()</span><br><span class="line">subType.prototype.constructor = subType</span><br><span class="line"></span><br><span class="line">subType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> subType(<span class="string">"Bob"</span>, <span class="number">18</span>)</span><br><span class="line">instance.colors.push(<span class="string">"green"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance.colors)  <span class="comment">// [ 'red', 'yellow', 'blue', 'green' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.sayName())  <span class="comment">// Bob</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.sayAge())  <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> subType(<span class="string">"Tom"</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors)  <span class="comment">// [ 'red', 'yellow', 'blue' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.sayName())  <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.sayAge())  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<p>组合继承既避免了原型链和借用构造函数的缺陷，又融合了它们的优点，成为JavaScript中最常用的继承模式。</p>
<h1 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h1><p>基本思想是将一个已有对象通过Object.create()方法生成新的对象，再根据具体需求对新对象加以修改即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 原型式继承 */</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Bob"</span>,</span><br><span class="line">  colors: [<span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"blue"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">Object</span>.create(person)</span><br><span class="line">one.name = <span class="string">"Tom"</span></span><br><span class="line">one.colors.push(<span class="string">"green"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(one.name)  <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(one.colors)  <span class="comment">// [ 'red', 'yellow', 'blue', 'green' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> two = <span class="built_in">Object</span>.create(person)</span><br><span class="line">two.name = <span class="string">"John"</span></span><br><span class="line">two.colors.push(<span class="string">"orange"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(two.name)  <span class="comment">// John</span></span><br><span class="line"><span class="built_in">console</span>.log(two.colors)  <span class="comment">// [ 'red', 'yellow', 'blue', 'green', 'orange' ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name)  <span class="comment">// Bob</span></span><br><span class="line"><span class="built_in">console</span>.log(person.colors)  <span class="comment">// [ 'red', 'yellow', 'blue', 'green', 'orange' ]</span></span><br></pre></td></tr></table></figure>
<p>在不需要创建构造函数，只想让一个对象与另一个对象保持类似的情况下可以使用，但是这种方式依然不能避开原型链中提到的 <code>包含引用类型值的原型属性会被所有实例共享</code> 这一致命问题。</p>
<h1 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h1><p>寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数内部以某种方式来增强对象，最后返回该对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 寄生式继承 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parasitic</span>(<span class="params">original</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone = <span class="built_in">Object</span>(original)</span><br><span class="line">  clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hi!`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Bob"</span>,</span><br><span class="line">  colors: [<span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"blue"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> otherPerson = parasitic(person)</span><br><span class="line"><span class="built_in">console</span>.log(otherPerson.sayHi())</span><br></pre></td></tr></table></figure>
<p>上面的例子中otherPerson对象通过parasitic()方法，不仅具有了person的所有属性和方法，而且还增强了sayHi()方法，但是这种方式依然和 <code>借用构造函数</code> 有着类似的问题：不能做到函数复用。</p>
<h1 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h1><p>前面说过组合继承是JavaScript最常用的继承模式，不过它仍然存在一个问题：无论什么情况下，都会调用两次超类型的构造函数，一次是在创建子类型原型的时候，另一次是在子类型构造函数的内部。<br>所以就有了寄生组合式继承。所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。其基本思路是不必为了指定子类型的原型而调用超类型的构造函数，我们只需要超类型原型的一个副本而已。本质上就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 寄生组合式继承 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parasitic</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone = <span class="built_in">Object</span>(superType.prototype)</span><br><span class="line">  clone.constructor = subType</span><br><span class="line">  subType.prototype = clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">superType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"blue"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">superType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  superType.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parasitic(subType, superType)</span><br><span class="line"></span><br><span class="line">subType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> subType(<span class="string">"Bob"</span>, <span class="number">18</span>)</span><br><span class="line">instance.colors.push(<span class="string">"green"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance.colors)  <span class="comment">// [ 'red', 'yellow', 'blue', 'green' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.sayName())  <span class="comment">// Bob</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.sayAge())  <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> subType(<span class="string">"Tom"</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors)  <span class="comment">// [ 'red', 'yellow', 'blue' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.sayName())  <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.sayAge())  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<p>上面的寄生组合式继承的例子，只调用了一次superType构造函数，又避免了在subType.prototype上创建不必要的属性，还保持了原型链不变，应该是最理想的继承方式了。</p>
<h1 id="为什么要做-A-prototype-constructor-A-这样的修正"><a href="#为什么要做-A-prototype-constructor-A-这样的修正" class="headerlink" title="为什么要做 A.prototype.constructor=A 这样的修正"></a>为什么要做 A.prototype.constructor=A 这样的修正</h1><p>我们在组合继承和寄生组合继承中有一段这样的修正：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合继承</span></span><br><span class="line">subType.prototype.constructor = subType</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寄生组合继承</span></span><br><span class="line">clone.constructor = subType</span><br></pre></td></tr></table></figure>
<p>如果我们将这两行代码删去，上面的例子依然可以完美运行。那么，我们为什么要这样做呢？<br>我在<a href="https://stackoverflow.com/questions/4012998/what-it-the-significance-of-the-javascript-constructor-property" target="_blank" rel="noopener">stackoverflow</a>找到了答案。<br>总结下来，就是说如果我们不做这样的修正，那么我们在subType的实例化对象上显示调用其构造函数时，找到的就是其超类型的构造函数。即：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除前</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.constructor) <span class="comment">// [Function: subType]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 而删除后</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.constructor) <span class="comment">// [Function: superType]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MikuMikudance 制作 MMD</title>
    <url>/2018/07/07/MikuMikudance/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>相信曾经相信过的自己</p>
<p><strong>Megalo Box</strong></p>
</blockquote>
<a id="more"></a>
<p>最近学习了一下如何使用 MikuMikudance 这个软件制作一个简单的 MMD。</p>
<p>首先需要下载 MikuMikudance，打开它先熟悉一下。</p>
<p>然后我们就要开始制作啦，制作一个 MMD 最基本的要有动作数据，人物模型，场景和音乐，音乐是比较好找的，但是前三者找起来比较麻烦，一般可以去这三个地方搜索：Deviantart，NicoNico，Bowlroll。这里我简单介绍一下怎样从 Bowlroll 中找到想要的资源吧。</p>
<p>打开 Bowlroll 的 <a href="https://bowlroll.net/" target="_blank" rel="noopener">官网</a>，由于是日本的网站，我们需要将中文先翻译成英文，再输入到搜索框里搜索，这里提供三个关键词吧：モーション - 动作，モデル - 模型，ステージ - 场景。搜到之后就可以下载啦，不过别人也不是随便让你使用的，做成视频之后得写一个借物表，放在视频里或者视频简介里都行。关于借物表怎么写，我后面有个例子可以参考。</p>
<p>准备好这些资源之后，就可以用 MikuMikudance 导入并合成啦。首先是场景：场景有两种类型，先打开下载好的场景的文件夹看看，如果有x格式的文件，那就在附件操作那里载入；如果没有，那就在模型操作的地方载入。这里注意一下，如果是x格式的文件，一定要先于人物模型载入，否则这个附件操作框框可能后面莫名其妙就消失了，这样就得强行手工拖入。然后是人物模型，在模型操作那里载入即可，载入之后取消选择骨骼操作（快捷键C）。之后是动作数据，在上方文件-动作数据载入那里载入即可。最后是音乐，同样在上方文件-WAV文件载入，一定要WAV格式，如果下载的不是这个格式的音频文件，用格式工厂等转一下格式就行，但是一定不要用audition，audition转出来的WAV格式并不能被载入。这样一个简单的MMD就基本完成啦，播放试试看效果。</p>
<p>做完上面这些我们就可以点击文件-AVI文件导出成一个视频啦，导出尺寸这里不能改，得去显示-导出尺寸那里改，录制帧这里如果是全部导出就填0到最后一帧，最后一帧是多少可以在左侧查到。导出来之后文件很大，需要用premiere等软件压缩一下。</p>
<p>最后就是借物表啦，简单来说就是你这个视频用了谁的什么东西，得说明一下。比如我做了一个 miku 跳 恋爱サーキュレーション 的 <a href="https://pan.baidu.com/s/1xjuSB_29e7mlXl7KSWeGCA" target="_blank" rel="noopener">视频</a> 密码: 1yrh。 那么它的借物表就可以这么写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">借物表</span><br><span class="line">model: Lat式ミクVer.2.31 by Lat（ラト）</span><br><span class="line">stage: 新ステージ_120325 by NuRuTeKa</span><br><span class="line">motion: sm9360588 by 空虚＠せっけんP</span><br><span class="line">song: 花澤香菜 - 恋爱サーキュレーション</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>MikuMikudance</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 快捷键 （Windows版）</title>
    <url>/2018/06/30/vscode-shortcuts-windows/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>努力保持清醒，只怕再次睁眼，便已不再是我  </p>
<p><strong>Kill Me Heal Me</strong></p>
</blockquote>
<a id="more"></a>
<h1 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+P, F1</td>
    <td style="text-align: center;">显示所有命令</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+P</td>
    <td style="text-align: center;">快速打开</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+N</td>
    <td style="text-align: center;">新建窗口</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+W</td>
    <td style="text-align: center;">关闭窗口</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+,</td>
    <td style="text-align: center;">打开用户设置</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+S</td>
    <td style="text-align: center;">打开键盘快捷方式</td>
  </tr>
</table>

<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+X</td>
    <td style="text-align: center;">剪切</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+C</td>
    <td style="text-align: center;">复制</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Alt+ ↑ / ↓</td>
    <td style="text-align: center;">向上 / 向下移动行</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+Alt + ↓ / ↑</td>
    <td style="text-align: center;">向上 / 向下复制行</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+K</td>
    <td style="text-align: center;">删除行</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Enter</td>
    <td style="text-align: center;">在下面插入行</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+Enter</td>
    <td style="text-align: center;">在上面插入行</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+\</td>
    <td style="text-align: center;">转到括号</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+] / [</td>
    <td style="text-align: center;">增加 / 减少行缩进</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Home / End</td>
    <td style="text-align: center;">跳转至行首 / 行尾</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Home</td>
    <td style="text-align: center;">跳转至文件开头</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+End</td>
    <td style="text-align: center;">跳转至文件结尾</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+↑ / ↓</td>
    <td style="text-align: center;">按行向上 / 向下滚动</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Alt+PgUp / PgDn</td>
    <td style="text-align: center;">按屏向上 / 向下滚动</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+[</td>
    <td style="text-align: center;">折叠</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+]</td>
    <td style="text-align: center;">展开</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+[</td>
    <td style="text-align: center;">以递归方式折叠</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+]</td>
    <td style="text-align: center;">以递归方式展开</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+0</td>
    <td style="text-align: center;">全部折叠</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+J</td>
    <td style="text-align: center;">全部展开</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+C</td>
    <td style="text-align: center;">添加行注释</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+U</td>
    <td style="text-align: center;">删除行注释</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+/</td>
    <td style="text-align: center;">切换行注释</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+Alt+A</td>
    <td style="text-align: center;">切换块注释</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Alt+Z</td>
    <td style="text-align: center;">切换自动换行</td>
  </tr>
</table>

<h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+T</td>
    <td style="text-align: center;">跳转至工作区的某符号</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+G</td>
    <td style="text-align: center;">跳转至某行</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+P</td>
    <td style="text-align: center;">跳转至某文件</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+O</td>
    <td style="text-align: center;">跳转至文件中的某符号</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+M</td>
    <td style="text-align: center;">切换问题（错误、警告、信息）视图</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">F8</td>
    <td style="text-align: center;">跳转至文件中的下一个问题（错误、警告、信息）</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+F8</td>
    <td style="text-align: center;">跳转至文件中的上一个问题（错误、警告、信息）</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Tab</td>
    <td style="text-align: center;">打开组中下一个最近使用的编辑器</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+Tab</td>
    <td style="text-align: center;">打开组中上一个最近使用的编辑器</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Alt+ ← / →</td>
    <td style="text-align: center;">后退 / 前进</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+M</td>
    <td style="text-align: center;">切换 Tab 键是否移动焦点</td>
  </tr>
</table>

<h1 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+F</td>
    <td style="text-align: center;">查找</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+H</td>
    <td style="text-align: center;">替换</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">F3 / Shift+F3</td>
    <td style="text-align: center;">查找下一个 / 上一个</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Alt+Enter</td>
    <td style="text-align: center;">选中所有匹配项</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+D</td>
    <td style="text-align: center;">向下选中匹配项</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+D</td>
    <td style="text-align: center;">移除前一个向下选中匹配项</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Alt+C / R / W</td>
    <td style="text-align: center;">区分大小写 / 正则 / 完全匹配</td>
  </tr>
</table>

<h1 id="多光标和选择"><a href="#多光标和选择" class="headerlink" title="多光标和选择"></a>多光标和选择</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">Alt+Click</td>
    <td style="text-align: center;">插入光标</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Alt+ ↑ / ↓</td>
    <td style="text-align: center;">向上 / 向下插入光标</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+U</td>
    <td style="text-align: center;">撤销上一个光标操作</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+Alt+I</td>
    <td style="text-align: center;">在行尾添加光标</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+I</td>
    <td style="text-align: center;">选中当前行</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+L</td>
    <td style="text-align: center;">选中所有与当前选中相同的匹配项</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+F2</td>
    <td style="text-align: center;">选中所有与当前选中单词相同的单词</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+Alt+→</td>
    <td style="text-align: center;">扩大选中</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+Alt+←</td>
    <td style="text-align: center;">缩小选中</td>
  </tr>
</table>

<h1 id="富文本编辑"><a href="#富文本编辑" class="headerlink" title="富文本编辑"></a>富文本编辑</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Space</td>
    <td style="text-align: center;">触发建议</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+Space</td>
    <td style="text-align: center;">参数提示</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+Alt+F</td>
    <td style="text-align: center;">格式化</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+F</td>
    <td style="text-align: center;">格式化选中内容</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">F12</td>
    <td style="text-align: center;">跳转到定义</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Alt+F12</td>
    <td style="text-align: center;">速览定义</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K F12</td>
    <td style="text-align: center;">分屏查看具体定义</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+.</td>
    <td style="text-align: center;">快速修复</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+F12</td>
    <td style="text-align: center;">查找所有引用</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">F2</td>
    <td style="text-align: center;">重命名符号</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+X</td>
    <td style="text-align: center;">删除行尾多余空格</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K M</td>
    <td style="text-align: center;">更改语言模式</td>
  </tr>
</table>

<h1 id="编辑器管理"><a href="#编辑器管理" class="headerlink" title="编辑器管理"></a>编辑器管理</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+F4, Ctrl+W</td>
    <td style="text-align: center;">关闭编辑器</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K F</td>
    <td style="text-align: center;">关闭文件夹</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+\</td>
    <td style="text-align: center;">编辑器分屏</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+ 1 / 2 / 3</td>
    <td style="text-align: center;">切换到第一/ 第二 / 第三组</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+ ←/→</td>
    <td style="text-align: center;">切换到上 / 下一分组</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+PgUp / PgDn</td>
    <td style="text-align: center;">左移 / 右移编辑器</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K ← / →</td>
    <td style="text-align: center;">向左 / 向右移动编辑器组</td>
  </tr>
</table>

<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+N</td>
    <td style="text-align: center;">新建文件</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+O</td>
    <td style="text-align: center;">打开文件</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+S</td>
    <td style="text-align: center;">保存</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+S</td>
    <td style="text-align: center;">另存为</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K S</td>
    <td style="text-align: center;">全部保存</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+F4</td>
    <td style="text-align: center;">关闭</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+W</td>
    <td style="text-align: center;">关闭所有</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+T</td>
    <td style="text-align: center;">重新打开已关闭的编辑器</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Enter</td>
    <td style="text-align: center;">保持打开</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Tab</td>
    <td style="text-align: center;">打开下一个</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+Tab</td>
    <td style="text-align: center;">打开上一个</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K P</td>
    <td style="text-align: center;">复制当前文件路径</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K R</td>
    <td style="text-align: center;">在资源管理器中查看当前文件</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K O</td>
    <td style="text-align: center;">新窗口打开当前文件</td>
  </tr>
</table>

<h1 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">F11</td>
    <td style="text-align: center;">切换全屏</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+Alt+0</td>
    <td style="text-align: center;">切换编辑器分屏方式（横、竖）</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+ = / -</td>
    <td style="text-align: center;">放大 / 缩小</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+B</td>
    <td style="text-align: center;">切换侧边栏</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+E</td>
    <td style="text-align: center;">显示资源管理器 / 切换焦点</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+F</td>
    <td style="text-align: center;">显示搜索框</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+G</td>
    <td style="text-align: center;">显示Git面板</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+D</td>
    <td style="text-align: center;">显示调试面板</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+X</td>
    <td style="text-align: center;">显示插件面板</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+H</td>
    <td style="text-align: center;">全局搜索替换</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+J</td>
    <td style="text-align: center;">切换高级搜索</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+U</td>
    <td style="text-align: center;">显示输出面板</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+Shift+V</td>
    <td style="text-align: center;">切换markdown预览窗口</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K V</td>
    <td style="text-align: center;">分屏显示markdown预览窗口</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Z</td>
    <td style="text-align: center;">切换 Zen 模式</td>
  </tr>
</table>

<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><table>
  <tr>
    <td width="20%" style="text-align: center;">F9</td>
    <td style="text-align: center;">设置或取消断点</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">F5</td>
    <td style="text-align: center;">开始或继续</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">Shift+F5</td>
    <td style="text-align: center;">停止</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">F11 / Shift+F11</td>
    <td style="text-align: center;">进入 / 跳出</td>
  </tr>
  <tr>
    <td width="20%" style="text-align: center;">F10</td>
    <td style="text-align: center;">跳过/td&gt;
  </td></tr>
  <tr>
    <td width="20%" style="text-align: center;">Ctrl+K Ctrl+I</td>
    <td style="text-align: center;">显示悬停信息</td>
  </tr>
</table>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试基础</title>
    <url>/2018/06/13/test/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>大千世界<br>多的是想不通的事，多的是猜不透的心，多的是看不透的人<br>不如不想，不如不猜，不如不看<br>不如寄情山水，不如快意人生<br>不如，吃茶去  </p>
<p><strong>许嵩《不如吃茶去》</strong></p>
</blockquote>
<a id="more"></a>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><div class="note danger"><ol>
<li>日本证券公司超过400亿日元损失的bug</li>
<li>1990年AT&amp;T公司断网，损失超7500万</li>
<li>千年虫bug，全球损失超5000亿</li>
</ol></div>
<h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><div class="note success"><ol>
<li>1972年，Bill Hetzel在NORTH Carolina大学举行第一次以软件测试为主题的正式会议</li>
<li>1979年，Glenford J.Myers 《The art of software testing》 提出测试的经典定义</li>
<li>1996年，测试能力成熟度模型TMM被提出，Ken Beck在极限编程XP方法论中提出TDD</li>
<li>2009年，James A. Whittaker提出探索式测试理论</li>
</ol></div>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul>
<li><h2 id="早期定义"><a href="#早期定义" class="headerlink" title="早期定义"></a>早期定义</h2><div class="note warning"><p>软件测试是对程序能够按预期运行建立起一种信心 —— Bill Hetzel 1973</p></div>
</li>
</ul>
<ul>
<li><h2 id="经典定义"><a href="#经典定义" class="headerlink" title="经典定义"></a>经典定义</h2><div class="note warning"><p>测试是为发现错误而执行程序的过程 —— Glenford J.Myers 1979</p></div>
</li>
<li><h2 id="IEEE定义"><a href="#IEEE定义" class="headerlink" title="IEEE定义"></a>IEEE定义</h2><div class="note warning"><p>使用人工或自动的<strong>手段</strong>来运行或测定某个软件系统的过程，其目的在于检验它是否满足<strong>规定的需求</strong>或弄清<strong>预期结果</strong>与<strong>实际结果</strong>之间的差别</p></div>
</li>
<li><h2 id="测试的五大要素"><a href="#测试的五大要素" class="headerlink" title="测试的五大要素"></a>测试的五大要素</h2><div class="note warning"><p>质量、人员、资源、流程、技术</p></div>
</li>
<li><h2 id="测试的两个目标"><a href="#测试的两个目标" class="headerlink" title="测试的两个目标"></a>测试的两个目标</h2><div class="note warning"><p>测试覆盖率、测试效率</p></div>
</li>
</ul>
<h1 id="软件测试分类"><a href="#软件测试分类" class="headerlink" title="软件测试分类"></a>软件测试分类</h1><ul>
<li><h2 id="按测试阶段分类"><a href="#按测试阶段分类" class="headerlink" title="按测试阶段分类"></a>按测试阶段分类</h2><div class="note primary"><p>单元测试、集成测试、系统测试、验收测试</p></div>
<ul>
<li><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><div class="note success"><p>对软件中的<strong>最小可测试单元</strong>进行检查和验证</p></div>
<ul>
<li><h4 id="单元测试原则"><a href="#单元测试原则" class="headerlink" title="单元测试原则"></a>单元测试原则</h4><div class="note info"><ol>
<li>尽可能保证各个测试用例是相互独立的  </li>
<li>一般由代码的开发人员来实施，用以检验所开发的代码功能符合自己的设计要求</li>
</ol></div>
</li>
<li><h4 id="单元测试益处"><a href="#单元测试益处" class="headerlink" title="单元测试益处"></a>单元测试益处</h4><div class="note info"><ol>
<li>能尽早发现缺陷</li>
<li>有利于重构</li>
<li>简化集成</li>
<li>减少文档</li>
<li>用于设计</li>
</ol></div>
</li>
<li><h4 id="单元测试限制"><a href="#单元测试限制" class="headerlink" title="单元测试限制"></a>单元测试限制</h4><div class="note info"><ol>
<li>不可能覆盖所有的执行路径，所以不可能保证捕捉到所有路径的错误</li>
<li>每一行代码，一般需要 3 ~ 5 行测试代码才能完成单元测试，所以存在投入和产出的平衡</li>
</ol></div>
</li>
</ul>
</li>
<li><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><div class="note success"><p><strong>在单元测试的基础上</strong>，测试在将所有的软件单元按照概要设计规格说明的要求<strong>组装</strong>成模块、子系统或系统的过程中，各部分工作是否达到或实现相应技术指标及要求的活动</p></div>
<ul>
<li><h4 id="集成测试方案"><a href="#集成测试方案" class="headerlink" title="集成测试方案"></a>集成测试方案</h4><div class="note info"><p>Big Bang、自顶向下、自底向上、核心系统集成、高频集成</p></div>
</li>
</ul>
</li>
<li><h3 id="单元测试-amp-集成测试"><a href="#单元测试-amp-集成测试" class="headerlink" title="单元测试&amp;集成测试"></a>单元测试&amp;集成测试</h3><div class="note success"><p>测试对象不同、测试依据不同、测试方法不同</p></div>
</li>
<li><h3 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h3><div class="note success"><p>将经过集成测试的软件，作为计算机系统的一个部分，<strong>与系统中其他部分结合起来</strong>，在<strong>实际运行环境下</strong>对计算机系统进行一系列严格有效地测试，以发现软件潜在的问题，保证系统的正常运行</p></div>
<ul>
<li><h4 id="系统测试关注点"><a href="#系统测试关注点" class="headerlink" title="系统测试关注点"></a>系统测试关注点</h4><div class="note info"><ol>
<li>关注系统本身的使用</li>
<li>关注系统与其他相关系统间的连通</li>
<li>关注系统在不同压力下的表现</li>
<li>关注系统在真实使用环境下的表现</li>
</ol></div>
</li>
</ul>
</li>
<li><h3 id="系统测试-amp-集成测试"><a href="#系统测试-amp-集成测试" class="headerlink" title="系统测试&amp;集成测试"></a>系统测试&amp;集成测试</h3><table>
<tr>
  <th width="20%" style="text-align:center;"></th>
  <th style="text-align:center;">集成测试</th>
  <th style="text-align:center;">系统测试</th>
</tr>
<tr>
  <td style="text-align:center;">测试对象</td>
  <td style="text-align:center;">由通过了单元测试的各个模块所集成起来的构件</td>
  <td style="text-align:center;">除了软件之外，还包括计算机硬件及相关的外围设备、数据采集和传输机构、支持软件、系统操作人员等整个系统</td>
</tr>
<tr>
  <td style="text-align:center;">测试时间</td>
  <td style="text-align:center;">介于单元测试和系统测试之间</td>
  <td style="text-align:center;">在集成测试之后</td>
</tr>
<tr>
  <td style="text-align:center;">测试内容</td>
  <td style="text-align:center;">各个单元模块之间的接口</td>
  <td style="text-align:center;">整个系统的功能和性能</td>
</tr>
<tr>
  <td style="text-align:center;">测试角度</td>
  <td style="text-align:center;">偏于技术角度的验证</td>
  <td style="text-align:center;">偏于业务角度的验证</td>
</tr>
</table>
</li>
<li><h3 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h3><div class="note success"><p>也称交付测试。针对用户需求、业务流程的正式的测试，确定系统是否满足验收标准，由用户、客户或其他授权机构决定是否接受系统</p></div>
<ul>
<li><h4 id="验收测试分类"><a href="#验收测试分类" class="headerlink" title="验收测试分类"></a>验收测试分类</h4><div class="note info"><p>用户验收测试、运行验收测试、合同和规范验收测试、Alpha测试、Beta测试</p></div>
</li>
</ul>
</li>
</ul>
</li>
<li><h2 id="按测试手段分类"><a href="#按测试手段分类" class="headerlink" title="按测试手段分类"></a>按测试手段分类</h2><div class="note primary"><ul>
<li>黑盒测试、白盒测试</li>
<li>静态测试、动态测试</li>
<li>手工测试、自动化测试</li>
</ul></div>
<ul>
<li><h3 id="黑盒测试-amp-白盒测试"><a href="#黑盒测试-amp-白盒测试" class="headerlink" title="黑盒测试&amp;白盒测试"></a>黑盒测试&amp;白盒测试</h3><table>
<tr>
  <th width="20%" style="text-align:center;"></th>
  <th style="text-align:center;">黑盒测试</th>
  <th style="text-align:center;">白盒测试</th>
</tr>
<tr>
  <td style="text-align:center;">设计方法</td>
  <td style="text-align:center;">等价类划分法、边界值分析法、错误推测法、因果图法、正交试验分析法、状态迁移法、流程分析法</td>
  <td style="text-align:center;">代码检测法、静态结构分析法、静态质量度量法、逻辑覆盖法、基本路径测试法</td>
</tr>
<tr>
  <td style="text-align:center;">优点</td>
  <td style="text-align:center;">
    <span>1. 容易实施，不需要关注内部的实现</span>
    <br> 
    <span>2. 更贴近用户的角度</span>
  </td>
  <td style="text-align:center;">
    <span>1. 迫使测试人员去仔细思考软件的实现，理解原理</span>
    <br> 
    <span>2. 可以检测代码中每条分支和路径</span>
    <br> 
    <span>3. 揭示隐藏在代码中的错误</span>
    <br> 
    <span>4. 对代码的测试比较彻底</span>
  </td>
</tr>
<tr>
  <td style="text-align:center;">缺点</td>
  <td style="text-align:center;">
    <span>1. 测试覆盖率较低，一般只能覆盖到代码量的不到40%</span>
    <br> 
    <span>2. 针对黑盒的自动化测试，复用率较低，维护成本较高</span>
  </td>
  <td style="text-align:center;">
    <span>1. 昂贵</span>
    <br> 
    <span>2. 无法检测代码中遗漏的路径和数据敏感性错误</span>
    <br> 
    <span>3. 不能直接验证需求的正确性</span>
  </td>
</tr>
</table>

<p><strong>灰盒测试</strong>： 介于黑、白盒测试之间，关注输出对于输入的正确性，同时也关注内部表现</p>
</li>
<li><h3 id="静态测试-amp-动态测试"><a href="#静态测试-amp-动态测试" class="headerlink" title="静态测试&amp;动态测试"></a>静态测试&amp;动态测试</h3><p><strong>静态测试</strong>： 无须执行被测程序，而是通过评审软件文档或代码，度量程序静态复杂度，检查软件是否符合编程标准，借以发现编写的程序的不足之处，减少错误出现的概率<br><strong>动态测试</strong>： 通过运行被测程序，检查运行结果与预期结果的差异，并分析运行效率、正确性和健壮性等</p>
</li>
<li><h3 id="手工测试-amp-自动化测试"><a href="#手工测试-amp-自动化测试" class="headerlink" title="手工测试&amp;自动化测试"></a>手工测试&amp;自动化测试</h3><p><strong>手工测试</strong>： 由专门的测试人员从用户视角来验证软件是否满足设计要求的行为，更适合针对深度的测试和强调主观判断的测试<br><strong>自动化测试</strong>： 使用单独的测试工具软件控制测试的自动化执行以及对预期结果进行自动检查</p>
<table>
  <tr>
    <th width="20%" style="text-align:center;"></th>
    <th style="text-align:center;">手工测试</th>
    <th style="text-align:center;">自动化测试</th>
  </tr>
  <tr>
    <td style="text-align:center;">优点</td>
    <td style="text-align:center;">
      <span>1. 易发现缺陷</span>
      <br> 
      <span>2. 容易实施</span>
      <br> 
      <span>3. 创造性</span>
    </td>
    <td style="text-align:center;">
      <span>1. 高效率、速度快</span>
      <br> 
      <span>2. 高复用性</span>
      <br> 
      <span>3. 覆盖率容易度量</span>
      <br> 
      <span>4. 准确、可靠</span>
      <br> 
      <span>5. 不知疲劳</span>
    </td>
  </tr>
  <tr>
    <td style="text-align:center;">缺点</td>
    <td style="text-align:center;">
      <span>1. 覆盖量化难</span>
      <br> 
      <span>2. 重复测试效率低</span>
      <br> 
      <span>3. 不一致性、可靠性低</span>
      <br> 
      <span>4. 人力资源依赖</span>
    </td>
    <td style="text-align:center;">
      <span>1. 机械、发现缺陷率低</span>
      <br> 
      <span>2. 一次性投入比较大</span>
    </td>
  </tr>
</table>
</li>
</ul>
</li>
<li><h2 id="按测试模式分类"><a href="#按测试模式分类" class="headerlink" title="按测试模式分类"></a>按测试模式分类</h2><div class="note primary"><p>瀑布模型、敏捷测试、基于脚本的测试、基于风险的测试、探索式测试等</p></div>
<ul>
<li><h3 id="传统的瀑布模型"><a href="#传统的瀑布模型" class="headerlink" title="传统的瀑布模型"></a>传统的瀑布模型</h3><div class="note success"><p>项目计划 → 需求分析 → 软件设计 → 程序开发 → 软件测试 → 集成维护</p></div>
<table>
  <tr>
    <td width="20%" style="text-align:center;">优点</td>
    <td style="text-align:center;">
      <span>1. 强调需求、设计的作用</span>
      <br> 
      <span>2. 前一阶段完成后，只需关注后续阶段</span>
      <br> 
      <span>3. 为项目提供了按阶段划分的检查点，里程碑清晰</span>
      <br> 
      <span>4. 文档规范</span>
    </td>
  </tr>
  <tr>
    <td width="20%" style="text-align:center;">缺点</td>
    <td style="text-align:center;">
      <span>1. 难以适应需求的频繁变更</span>
      <br> 
      <span>2. 项目周期后段才能看到成果</span>
      <br> 
      <span>3. 强制的里程碑、完成时间点</span>
      <br> 
      <span>4. 文档工作量大</span>
    </td>
  </tr>
</table>

<p><strong>瀑布模型的演变</strong>： V模型、W模型、X模型、H模型</p>
</li>
<li><h3 id="敏捷测试"><a href="#敏捷测试" class="headerlink" title="敏捷测试"></a>敏捷测试</h3><ul>
<li><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><div class="note success"><ol>
<li>强调从用户的角度</li>
<li>重点关注持续迭代地测试新开发的功能，而不再强调传统测试过程中严格的测试阶段</li>
<li>建议尽早开始测试，不间断测试，具备条件即测试</li>
<li>强调持续反馈</li>
<li>预防缺陷重于发现缺陷</li>
</ol></div>
</li>
<li><h4 id="四个核心价值"><a href="#四个核心价值" class="headerlink" title="四个核心价值"></a>四个核心价值</h4><div class="note success"><ol>
<li>个体和互动高于流程和工具</li>
<li>可用的软件高于详尽的文档</li>
<li>客户合作高于合同谈判</li>
<li>响应变化高于遵循计划</li>
</ol></div>
</li>
</ul>
</li>
<li><h3 id="敏捷测试-amp-传统测试"><a href="#敏捷测试-amp-传统测试" class="headerlink" title="敏捷测试&amp;传统测试"></a>敏捷测试&amp;传统测试</h3><table>
  <tr>
    <th style="text-align:center;">传统测试</th>
    <th style="text-align:center;">敏捷测试</th>
  </tr>
  <tr>
    <td style="text-align:center;">
      <span>1. 测试是质量的最后保护者</span>
      <br> 
      <span>2. 严格的变更管理</span>
      <br> 
      <span>3. 预先的计划和细节的准备</span>
      <br> 
      <span>4. 重量级文档</span>
      <br> 
      <span>5. 各阶段测试有严格的入口和出口标准</span>
      <br> 
      <span>6. 更多在回归测试时进行重量级的自动化测试</span>
      <br> 
      <span>7. 严格依赖流程执行</span>
      <br> 
      <span>8. 测试团队和开发团队是相对独立的</span>
    </td>
    <td style="text-align:center;">
      <span>1. 开发和测试人员紧密合作，大家都有责任对软件负责</span>
      <br> 
      <span>2. 变更是可接受的，拥抱变更</span>
      <br> 
      <span>3. 计划随着进展时常调整</span>
      <br> 
      <span>4. 只需要绝对必要的文档</span>
      <br> 
      <span>5. 各迭代之间已经没有明显的入口和出口标准</span>
      <br> 
      <span>6. 所有阶段都需要自动测试，每个人都需要做，是项目集成的一部分</span>
      <br> 
      <span>7. 流程不再需要严格执行</span>
      <br> 
      <span>8. 团队合作是无缝隙合作</span>
    </td>
  </tr>
</table>
</li>
</ul>
</li>
<li><h2 id="按测试类型分类"><a href="#按测试类型分类" class="headerlink" title="按测试类型分类"></a>按测试类型分类</h2><div class="note primary"><p>功能测试、性能测试、部署测试、文档测试、安全测试、兼容性测试、易用性测试、本地化测试、无障碍测试、可靠性测试</p></div>
</li>
<li><h2 id="其他分类"><a href="#其他分类" class="headerlink" title="其他分类"></a>其他分类</h2><div class="note primary"><p>回归测试、冒烟测试、Monkey测试、A/B测试</p></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>离职</title>
    <url>/2018/04/26/2018-4/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>将来（江莱）路远（陆远）<br>和过去断个干净（甘敬）<br>放下陈年旧事（陈放）<br>家和（嘉禾）万事兴</p>
<p><strong>《好先生》</strong></p>
</blockquote>
<a id="more"></a>
<p>上个月月底离职的。</p>
<p>到今天也差不多快一个月了。</p>
<p>离职后在简陋的租房中呆了几天，试着找了一些下家，鲜有回音，心里感到些许不安。</p>
<p>一方面，自己是被离职的，曾经在某乎上看到过，某些企业会把真正在干活的员工“裁掉”，这件事情居然会发生在自己身上，虽然我不是唯一的一个，但事情确实不太光彩，连光荣下岗都谈不上，不禁感叹城市套路深。<br>另一方面，刚毕业没几年，能力和经验等都不太成熟，毕竟是程序员，在国企的成长速度肯定是远不及互联网公司，不过点头哈腰的本事倒是学会不少，在里面每天基本都是一样，表面笑嘻嘻，心中MMP，真是够了。</p>
<p>某天晚上想起家中长辈，心里一酸，便买了翌日的火车票回家，那一日，一宿没睡。</p>
<p>翌日，雨，穿着工装回家，没穿外套，很冷。在火车上开始思考对以后生活的向往，赚够了钱买一套很大的房子，娶了老婆，生了孩子，把父母也弄到一起住，五六点下个班，风吹的冷就缩一下脖子，笑嘻嘻的回家吃饭。不知不觉到站了，暴雨，果然，理想很丰满，现实很骨感。</p>
<p>在家里的这段时间很少出门，回来时的头几天被邻居问起，怎么不上班啦，竟无语凝噎，有点羞愧。</p>
<p>过年的时候看到了家乡的油菜花初开，现如今几乎都已凋谢，短短两个月时间不到而已，真的是，时光易逝人易老。</p>
<p>幸好赶上了山蕨、水蕨，还有很多年都没吃到的萢（学名：野草莓）</p>
<p><img src="http://b307.photo.store.qq.com/psb?/V12uHW9e1OkSER/aRODlXothbPdH7LIod7lRv*hG3yezXKtl10Yr7oXu.8!/c/dDMBAAAAAAAA&bo=AAXjCAAF4wgRMAc!&rf=mood_app" width="375" height="666" alt="Fragaria vesca" align="center"></p>
<p>看到张鑫旭老师最近住院做手术的<a href="http://www.zhangxinxu.com/life/2018/04/in-hospital/" target="_blank" rel="noopener">文章</a>，联想起之前大学时的同学们在学院群里面讨论要给自己买保险一事，慢慢开始真正体会到身体才是革命的本钱，即使年轻。</p>
<p>愿岁月静好,浅笑安然。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>rollup 入门实例教程</title>
    <url>/2018/03/13/rollup/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>向来缘浅 奈何情深<br>既然琴瑟起 何以笙箫默</p>
<p><strong>顾漫《何以笙箫默》</strong></p>
</blockquote>
<a id="more"></a>
<div class="note danger"><p>Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。Rollup 对代码模块使用新的标准化格式，这些标准都包含在 JavaScript 的 ES6 版本中，而不是以前的特殊解决方案，如 CommonJS 和 AMD。ES6 模块可以使你自由、无缝地使用你最喜爱的 library 中那些最有用独立函数，而你的项目不必携带其他未使用的代码。ES6 模块最终还是要由浏览器原生实现，但当前 Rollup 可以使你提前体验。</p></div>
<blockquote>
<p>源码仓库：<a href="https://github.com/carolyicheng666/rollup-study" target="_blank" rel="noopener">https://github.com/carolyicheng666/rollup-study</a>，欢迎Star</p>
</blockquote>
<p>下面先进行一些准备工作，先把源码拷贝一份到自己的本机上：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/carolyicheng666/rollup-study.git</span><br></pre></td></tr></table></figure></p>
<p>然后下载所依赖的库文件：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i</span><br></pre></td></tr></table></figure></p>
<p>我源码的 rollup 版本是 <strong>0.56.5</strong>，如果版本有更新，可能存在写法上的差异，建议到<a href="https://rollupjs.org/guide/en" target="_blank" rel="noopener">rollup官网</a>查询。</p>
<h2 id="demo01：-输出包的格式"><a href="#demo01：-输出包的格式" class="headerlink" title="demo01： 输出包的格式"></a>demo01： 输出包的格式</h2><p>一般分为五种：
<div class="note success"><p><strong>amd</strong> – 异步模块定义，用于像RequireJS这样的模块加载器<br><strong>cjs</strong> – CommonJS，适用于 Node 和 Browserify/Webpack<br><strong>es</strong> – 将软件包保存为ES模块文件<br><strong>iife</strong> – 一个自动执行的功能，适合作为<code>&lt;script&gt;</code>标签。（如果要为应用程序创建一个捆绑包，您可能想要使用它，因为它会使文件大小变小。）<br><strong>umd</strong>
 – 通用模块定义，以amd，cjs 和 iife 为一体  </p></div></p>
<p>如果没有设置，会报下列错误：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[!] Error: You must specify options.format, <span class="built_in">which</span> can be one of <span class="string">'amd'</span>, <span class="string">'cjs'</span>, <span class="string">'es'</span>, <span class="string">'iife'</span> or <span class="string">'umd'</span></span><br></pre></td></tr></table></figure></p>
<p>命令行执行是 <code>rollup -i 入口文件 -f 输出包格式 -o 输出文件</code>，如果是 <strong>iife</strong> 和 <strong>umd</strong> 格式，还需要加 <code>-n 输出的包名</code>。更多的配置请点击<a href="https://rollupjs.org/guide/en#core-functionality" target="_blank" rel="noopener">这里</a></p>
<p>我们简单配置一下 <code>package.json</code>：
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "build:amd": "rollup index.js -f amd -o ./dist/dist.amd.js",</span><br><span class="line">  "build:cjs": "rollup index.js -f cjs -o ./dist/dist.cjs.js",</span><br><span class="line">  "build:es": "rollup index.js -f es -o ./dist/dist.es.js",</span><br><span class="line">  "build:iife": "rollup index.js -f iife -n result -o ./dist/dist.iife.js",</span><br><span class="line">  "build:umd": "rollup index.js -f umd -n result -o ./dist/dist.umd.js",</span><br><span class="line">  "build:all": "npm run build:amd &amp;&amp; npm run build:cjs &amp;&amp; npm run build:es &amp;&amp; npm run build:iife &amp;&amp; npm run build:umd"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行命令即可：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build:all</span><br></pre></td></tr></table></figure></p>
<h2 id="demo02：-使用配置文件-rollup-config-js"><a href="#demo02：-使用配置文件-rollup-config-js" class="headerlink" title="demo02： 使用配置文件 rollup.config.js"></a>demo02： 使用配置文件 rollup.config.js</h2><p>rollup.config.js 完整的配置是
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 核心选项</span></span><br><span class="line">  input,     <span class="comment">// 必须</span></span><br><span class="line">  external,</span><br><span class="line">  plugins,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 额外选项</span></span><br><span class="line">  onwarn,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// danger zone</span></span><br><span class="line">  acorn,</span><br><span class="line">  context,</span><br><span class="line">  moduleContext,</span><br><span class="line">  legacy</span><br><span class="line"></span><br><span class="line">  output: &#123;  <span class="comment">// 必须 (如果要输出多个，可以是一个数组)</span></span><br><span class="line">    <span class="comment">// 核心选项</span></span><br><span class="line">    file,    <span class="comment">// 必须</span></span><br><span class="line">    format,  <span class="comment">// 必须</span></span><br><span class="line">    name,</span><br><span class="line">    globals,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 额外选项</span></span><br><span class="line">    paths,</span><br><span class="line">    banner,</span><br><span class="line">    footer,</span><br><span class="line">    intro,</span><br><span class="line">    outro,</span><br><span class="line">    sourcemap,</span><br><span class="line">    sourcemapFile,</span><br><span class="line">    interop,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 高危选项</span></span><br><span class="line">    exports,</span><br><span class="line">    amd,</span><br><span class="line">    indent</span><br><span class="line">    strict</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>本例中只设置了必须的选项，其它一些常用的选项会在后面的例子中看到。</p>
<p>如果使用了配置文件，那么命令行运行的命令就是 <code>rollup -c</code>，我们在 <code>package.json</code> 中设置一下：
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "build": "rollup -c"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时候就可以运行命令
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></p>
<h2 id="demo03：-实时监听"><a href="#demo03：-实时监听" class="headerlink" title="demo03： 实时监听"></a>demo03： 实时监听</h2><p>每一次改动都要运行一次命令实在是太麻烦了，所以，几乎每一种工具都会有实时监听的设置，rollup也不例外，在命令后加上 <code>-w</code> 即可
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "rollup -c -w"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行命令实现实时监听
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure></p>
<h2 id="demo04：-集成-npm-packages"><a href="#demo04：-集成-npm-packages" class="headerlink" title="demo04： 集成 npm packages"></a>demo04： 集成 npm packages</h2><p>需要用到两个插件：<code>rollup-plugin-node-resolve</code> 和 <code>rollup-plugin-commonjs</code></p>
<p><code>rollup-plugin-node-resolve</code> 插件可以告诉 Rollup 如何查找外部模块<br>一些库导出成你可以正常导入的ES6模块 - <strong>the-answer</strong> 就是一个这样的模块。 但是目前，npm中的大多数包都是以CommonJS模块的形式出现的。 在它们更改之前，我们需要将CommonJS模块转换为 ES2015 供 Rollup 处理。<code>rollup-plugin-commonjs</code> 插件就是用来将 CommonJS 转换成 ES2015 模块的。</p>
<p><code>rollup.config.js</code> 配置：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    file: <span class="string">'./dist/dist.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [ resolve(), commonjs() ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="demo05：Peer-dependencies"><a href="#demo05：Peer-dependencies" class="headerlink" title="demo05：Peer dependencies"></a>demo05：Peer dependencies</h2><p>假如我们引入了 <code>the-answer</code> 和 <code>lodash</code> 这两个模块， Rollup 默认会把他们打包在一起，那么这样打包出来的文件就会很大，因此我们希望 <code>lodash</code> 变成外部引用，这是可以做到的，设置 <code>external</code> 选项即可，这个选项接收一个数组，代表所有需要外部引入的模块，<strong>此数组不能处理通配符</strong>。</p>
<p>本例中可以这样设置：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">external: [<span class="string">'lodash'</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="demo06：-Babel"><a href="#demo06：-Babel" class="headerlink" title="demo06： Babel"></a>demo06： Babel</h2><p>使用 Babel 和 Rollup 的最简单方法是使用 <a href="https://github.com/rollup/rollup-plugin-babel" target="_blank" rel="noopener">rollup-plugin-babel</a></p>
<p>和其它工具一样，先要创建 <code>.babelrc</code> 文件：
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [<span class="string">"env"</span>, &#123;</span><br><span class="line">      <span class="attr">"modules"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"external-helpers"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">这里我们需要 `babel-preset-env` 和 `babel-plugin-external-helpers` 这两个插件，为什么不用 ES2015 而用 env，可以看看[这篇文章](http://babeljs.io/env/)。而 `external-helpers` 插件，它允许 Rollup 在包的顶部只引用一次 “helpers”，而不是每个使用它们的模块中都引用一遍，大家可以对比一下引入这个插件和不引入打包后生成的文件的区别。</span><br><span class="line"></span><br><span class="line">``` javascript</span><br><span class="line">import resolve from 'rollup-plugin-node-resolve';</span><br><span class="line">import babel from 'rollup-plugin-babel';</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  input: 'src/main.js',</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: 'bundle.js',</span><br><span class="line">    format: 'cjs'</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    resolve(),</span><br><span class="line">    babel(&#123;</span><br><span class="line">      exclude: 'node_modules/**' // 只编译我们的源代码</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="demo07：-CDN-引入"><a href="#demo07：-CDN-引入" class="headerlink" title="demo07： CDN 引入"></a>demo07： CDN 引入</h2><p>比如我们想使用 CDN 方式引入 <code>jquery</code>，那么在 <code>output</code> 的 <code>path</code> 选项添加即可 
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  ...</span><br><span class="line">  paths: &#123;</span><br><span class="line">    jquery: <span class="string">'https://cdn.bootcss.com/jquery/3.2.1/jquery.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="demo08：-集成-Gulp"><a href="#demo08：-集成-Gulp" class="headerlink" title="demo08： 集成 Gulp"></a>demo08： 集成 Gulp</h2><p>Rollup 返回 gulp 能明白的 promises，所以集成是很容易的。</p>
<p><code>gulpfile.js</code>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> rollup = <span class="built_in">require</span>(<span class="string">'rollup'</span>);</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="built_in">require</span>(<span class="string">'rollup-plugin-node-resolve'</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'rollup-plugin-babel'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'build'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> rollup.rollup(&#123;</span><br><span class="line">    input: <span class="string">'./index.js'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">      resolve(),</span><br><span class="line">      babel(&#123;</span><br><span class="line">        exclude: <span class="string">'node_modules/**'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">bundle</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> bundle.write(&#123;</span><br><span class="line">      file: <span class="string">'./dist/dist.js'</span>,</span><br><span class="line">      format: <span class="string">'umd'</span>,</span><br><span class="line">      name: <span class="string">'dist'</span>,</span><br><span class="line">      sourcemap: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>也可以用 <code>async/await</code> 语法：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> rollup = <span class="built_in">require</span>(<span class="string">'rollup'</span>);</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="built_in">require</span>(<span class="string">'rollup-plugin-node-resolve'</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'rollup-plugin-babel'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'build'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bundle = <span class="keyword">await</span> rollup.rollup(&#123;</span><br><span class="line">    input: <span class="string">'./index.js'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">      resolve(),</span><br><span class="line">      babel(&#123;</span><br><span class="line">        exclude: <span class="string">'node_modules/**'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> bundle.write(&#123;</span><br><span class="line">    file: <span class="string">'./dist/dist.js'</span>,</span><br><span class="line">    format: <span class="string">'umd'</span>,</span><br><span class="line">    name: <span class="string">'dist'</span>,</span><br><span class="line">    sourcemap: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="demo09：-添加-banner-footer"><a href="#demo09：-添加-banner-footer" class="headerlink" title="demo09： 添加 banner/footer"></a>demo09： 添加 banner/footer</h2><p>可以在输出文件的头部添加 banner 和尾部添加 footer 注释信息，例如：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">'./package.json'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  banner: <span class="string">'/* dist version '</span> + pkg.version + <span class="string">' */'</span>,</span><br><span class="line">  footer: <span class="string">'/* follow me on Github! @'</span> + pkg.author + <span class="string">' */'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="demo10：-使用插件"><a href="#demo10：-使用插件" class="headerlink" title="demo10： 使用插件"></a>demo10： 使用插件</h2><p>rollup的插件有很多，<a href="https://github.com/rollup/rollup/wiki/Plugins" target="_blank" rel="noopener">这里</a>是插件列表，稍微看看配置就能上手。<br>比如我们使用<a href="https://github.com/rollup/rollup-plugin-json" target="_blank" rel="noopener">rollup-plugin-json</a>插件解析 json 文件：<br><code>main.js</code>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> answer <span class="keyword">from</span> <span class="string">'the-answer'</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">'./package.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'the answer is '</span> + answer + <span class="string">', the version is '</span> + pkg.version);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>rollup.config.js</code>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [ json() ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>再比如我们使用<a href="https://github.com/TrySound/rollup-plugin-uglify" target="_blank" rel="noopener">rollup-plugin-uglify</a>压缩输出文件：<br><code>rollup.config.js</code>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'rollup-plugin-uglify'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [ uglify() ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="demo11：-引入-sass-文件"><a href="#demo11：-引入-sass-文件" class="headerlink" title="demo11： 引入 sass 文件"></a>demo11： 引入 sass 文件</h2><p>rollup 不仅能打包 js，还能打包 css 或者 css 的预处理文件 sass，less，stylus等。就拿 sass 举例，我们需要引入 <a href="https://github.com/thgh/rollup-plugin-scss" target="_blank" rel="noopener">rollup-plugin-scss</a> 插件<br><code>rollup.config.js</code>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scss <span class="keyword">from</span> <span class="string">'rollup-plugin-scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    scss(&#123;</span><br><span class="line">      output: <span class="string">'./dist/test.css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>index.js</code>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./main.scss'</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>想打包其它文件也可以去上面的插件列表中查找，相信大家会有更多的收获</p>
<h2 id="demo12：-开发环境和生产环境"><a href="#demo12：-开发环境和生产环境" class="headerlink" title="demo12： 开发环境和生产环境"></a>demo12： 开发环境和生产环境</h2><p>与其它打包工具一样，rollup 也能设置开发环境和生产环境（这一点其实和rollup没啥关系，还是nodejs的功劳）<br>简单配置一下（只有压缩和不压缩的区别，哈哈）：<br><code>package.json</code>:
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "rollup -c --environment NODE_ENV:development",</span><br><span class="line">  "build": "rollup -c --environment NODE_ENV:production"</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p><code>rollup.config.js</code>:
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">'rollup-plugin-json'</span>;</span><br><span class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'rollup-plugin-uglify'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> base = [resolve(), json()];</span><br><span class="line"><span class="keyword">const</span> dev = [];</span><br><span class="line"><span class="keyword">const</span> prod = [uglify()];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isProd = process.env.NODE_ENV === <span class="string">'production'</span>;</span><br><span class="line"><span class="keyword">let</span> plugins = [...base].concat(isProd ? prod : dev);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: <span class="string">'./dist/dist.js'</span>,</span><br><span class="line">    format: <span class="string">'cjs'</span>,</span><br><span class="line">    name: <span class="string">'dist'</span>,</span><br><span class="line">    sourcemap: isProd</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: plugins</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>开发环境: <code>npm run dev</code><br>生产环境: <code>npm run build</code></p>
<h2 id="Rollup-VS-Webpack"><a href="#Rollup-VS-Webpack" class="headerlink" title="Rollup VS Webpack"></a>Rollup VS Webpack</h2><p>用过这两个工具的朋友一定会有这种疑问，这两个工具非常类似，有感觉有一点点不同，那么到底什么时候用什么比较好呢？我找到了一篇文章，大家可以参考参考，<a href="http://www.css88.com/archives/7703" target="_blank" rel="noopener">传送门</a></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://rollupjs.org/guide/en" target="_blank" rel="noopener">rollup官方文档</a></li>
<li><a href="https://rollupjs.cn/" target="_blank" rel="noopener">rollup中文文档</a></li>
<li><a href="https://blog.kainstar.cn/2017/08/12/JS%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7rollup%E2%80%94%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener">JS打包工具rollup—完全入门指南</a></li>
<li><a href="http://www.css88.com/archives/7703" target="_blank" rel="noopener">Webpack 和 Rollup ：一样但又不同</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>rollup</tag>
      </tags>
  </entry>
  <entry>
    <title>commit 规范</title>
    <url>/2018/02/23/commit/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>当你凝视深渊时，深渊也在凝视你</p>
<p><strong>尼采《善恶的彼岸》</strong></p>
</blockquote>
<a id="more"></a>
<p>最近看到一篇文章：<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#" target="_blank" rel="noopener">《Git Commit Message Conventions》</a>，里面提到了 commit message 要规范化，它可以在出现问题时，快速定位问题，找到出现错误的位置，从而解决问题。我也因此开始慢慢改变以前的坏习惯。</p>
<p>但是人总是健忘的，我决定写下这篇文章，以此来提醒自己。</p>
<p>原文的规范是 Angular 的 commit 规范，包含三个部分：header、body、footer
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure></p>
<p>其中，body 和 footer 可以省略，实际情况大多数 commit message 也都只有一行 header，header 中的 scope 范围也可以省略，但是 <code>type</code> 和 <code>subject</code> 是绝对不能省略的，它们是 commit message 的核心。感觉废话好多…还是直接说这两部分怎么写吧。原文把 <code>type</code> 分为 7 类，所有的 commit 只能从这 7 类中选择<br><div class="note danger"><ul>
<li>feat (feature)</li>
<li>fix (bug fix)</li>
<li>docs (documentation)</li>
<li>style (formatting, missing semi colons, …)</li>
<li>refactor</li>
<li>test (when adding missing tests)</li>
<li>chore (maintain)</li>
</ul></div></p>
<p>翻译过来就是：
<div class="note info"><ul>
<li>feat：新功能</li>
<li>fix：修复 bug</li>
<li>docs：文档</li>
<li>style： 格式化代码</li>
<li>refactor：重构</li>
<li>test：测试</li>
<li>chore：其它维护</li>
</ul></div></p>
<p><code>subject</code> 就是写一些简要的描述信息，但是也不能乱写，原文提到了三点要求
<div class="note danger"><ul>
<li>use imperative, present tense: “change” not “changed” nor “changes”</li>
<li>don’t capitalize first letter</li>
<li>no dot (.) at the end</li>
</ul></div></p>
<p>意思也很简单：
<div class="note info"><ul>
<li>使用祈使句</li>
<li>首字母不要大写</li>
<li>末尾不要加(.)</li>
</ul></div></p>
<p>最后，要改变一个长时间养成的坏习惯真的很不容易…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Travis 持续集成入门</title>
    <url>/2018/02/22/travis-start/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>你指尖跃动的电光，是我此生不灭的信仰</p>
<p><strong>某科学的超电磁炮</strong></p>
</blockquote>
<a id="more"></a>
<p>今天是过年回来第一天上班，大家都忙着收红包呢，抽空写一篇 Travis 入门吧。</p>
<p>最初是因为看到很多人的项目中都有一个绿色的 <code>build:passing</code> 徽章，觉得好高大上，于是就去研究了一下。如何才能拿到这个徽章呢？下面进入正题。</p>
<p>首先，进入 Travis 官方网站，公共仓库点<a href="https://travis-ci.org/" target="_blank" rel="noopener">这里</a>，私有仓库点<a href="https://travis-ci.com/" target="_blank" rel="noopener">这里</a>。按照官网的意思两种仓库的设置方式是一样的，我没有私有仓库，这一点有待证实，只能拿公共仓库继续讲了。首次访问需要授权给 Travis 访问你的 Github 代码库。</p>
<p>然后就可以看到你存放在 Github 上所有的项目目录了，选择想要持续集成的项目，点击将项目前面的 <code>X</code> 改成 <code>√</code>，再点击项目名称前的设置按钮进入设置界面。</p>
<p>在设置界面中，作为入门级教程，下面的什么环境变量、定时任务我们都可以不用管，只要看最上面 <code>General</code> 里面的配置即可。这里默认打开了 <code>Build pushed branches</code> 和 <code>Build pushed pull requests</code> 这两项，我们还需要将 <code>Build Only if.travis.yml is present</code> 这一项也打开。</p>
<p>接下来，我们在项目的根目录下添加 <code>.travis.yml</code> 文件，目的是告知 Travis 在我们push之后需要做什么工作。这里的配置，不同岗位的区别比较大，好在 Github 现成的例子到处都是，大家随便搜几个项目看一下，技术栈与自己基本一致的，把他的 <code>.travis.yml</code> 贴过来，小改一下就能用了。本人只是一个小小的前端工程师，贴一个
gulp的例子吧：
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sudo:</span>          <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span>      <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"node"</span></span><br><span class="line"><span class="attr">install:</span>       <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gulp</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br></pre></td></tr></table></figure></p>
<p>更多的配置可参考<a href="https://docs.travis-ci.com/" target="_blank" rel="noopener">官方文档</a>，选择并展开 <code>Programming Languages</code> 项，在选择自己项目的语言类型，里面有详细的配置介绍，这里就不做过多说明了。</p>
<p>最后我们只需要将本次项目的改动提交，在push之后，Travis 就会开始工作了，大家可以去到 <code>https://travis-ci.org/GithubName/ProjectName</code> 查看 Travis 的工作状态。build成功则会在标题后面显示 <code>build:passing</code>，否则则显示 <code>build:failed</code>。点击该徽章会生成一个 <code>Status Image</code> 界面，将 url 复制出来即可。</p>
<p>那么 Travis 到底有什么用呢？这个问题有待深究，这里暂且不答，只引用廖雪峰老师在<a href="https://www.liaoxuefeng.com/article/0014631488240837e3633d3d180476cb684ba7c10fda6f6000" target="_blank" rel="noopener">《使用Travis进行持续集成》</a>提到的两个问题和解答：
<div class="note success"><p>Q: 是不是用了CI代码质量就有保证了？<br>A: 这个问题的答案是否。如果CI能提高代码质量，那软件公司只需要招实习生写代码外加CI就可以了，招那么贵的高级工程师浪费钱干啥？</p>
<p>Q: 是不是用了Travis就实现了CI？<br>A: 这个问题的答案还是否。CI是解决问题的手段而不是目的。问题是如何提高代码质量。我见过很多公司的项目，编译一次半小时（不是编译Linux内核那种），测试一次几个小时。不能在短时间内完成编译、测试的代码都有问题，导致CI形同虚设。这里的“短时间”是指5分钟以内。</p></div></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Travis</tag>
      </tags>
  </entry>
  <entry>
    <title>大爱无声</title>
    <url>/2018/02/16/father/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>笑是对身边的事物感到一瞬间的幸福而表现出来的东西  </p>
<p><strong>CLANNAD</strong></p>
</blockquote>
<a id="more"></a>
<p>莎士比亚曾说过，一千个猴子的背后就有着一千个不同逗比，同样，一千个家庭的背后，也会有着一千种不同的生活。当有的人在享受父母双亲给自己带来的美好童年时，就有人注定在体味着五味陈杂的辛酸与苦楚。在动漫中虽然大部分的老爸都是优秀而让人羡慕的，但也有一些特殊的父亲一直在用自己的辛劳和拼搏诠释着作为父亲的职责。</p>
<p>我记得那还是我上高中的时候，有一次无意中看到了我身边的同学在对着一部动漫痛哭流涕，而我作为一个充满爱心、关心同学的正直青年，无疑被他的举动所吸引。熟悉我的朋友都知道，我是那种很容易被别人情绪所影响的人，别人开心，我也会跟着开心；别人难过，我也会跟着开心；别人生气，我也会跟着开心，就是这样一个积极乐观的人，虽然经常会挨骂，但是这从来没有改变过我多愁善感的本色，所以抱着别人有什么悲伤的事我就得开心一下的初衷，我就向他询问起了情况，于是他也就向我推荐了这部动漫（CLANNAD）。</p>
<p>其实这部动漫在当时我是没有立刻去看的，因为我很清楚以我这么好的人品，要是在教室里哭出来，还不得有多少同学跑来报答我平时的恩情，所以我也是选择在几年后才补完了这部经典的动漫。其实说起刚看这部动漫的时候我一度以为这是后宫向作品，当时还觉得，看个后宫漫都能感动哭了，你平时这是得有多寂寞。不过随着后来对这部动漫的深入和了解，才发现这部动漫绝对是一部将友情、爱情、还有亲情完美表现的经典作品，他不仅让我重新审视了自己，更加明白了身边一切的来之不易，也让我深刻的记住了一个名字，那就是男主的父亲：冈崎直幸。</p>
<p>其实，说起这个父亲，当时给我最大的感受就是真实。首先，至少他没长着一副二十几岁的脸去当着人家十几岁孩子的爹，眼角的皱纹，灰白的头发，还有无力的目光都证明了，他在漫长岁月中所经历的那些艰辛，其次他也不像其他动漫中的那些父亲一样无所不能、近乎完美，甚至他还有着许多的缺点和毛病：酗酒，吸烟，甚至到后来的贩卖违禁品，在妻子死后的他就是这样颓废而又堕落的在进行着自己的人生。起初，我实在无法认可这样一个失败的父亲，甚至觉得他连被称作是父亲的资格都没有，但是，随着朋也逐渐的成长，随着我们一次次的遇到挫折，走上了和他父亲那条相同的道路时，才终于恍然大悟，原来曾经面对这一切的他，能将我们养育成人是有着多么巨大的勇气。</p>
<p>很多时候我们都天真的认为，我们身边所拥有的一切是那样的理所当然，认为我们张张嘴就能获得东西是那么的轻而易举，羡慕别人拥有的太多，抱怨我们得到的太少，傻傻的认为我们可以比我们的父母做的更好，可是真的等到有一天，当我们成长起来去试着去承担那份责任时，才终于明白，原来这一切的代价居然是这样的沉重，我们的成长没有给他们留下什么太多的东西，有的也只是日益增多白发，和越发步履蹒跚地步伐，我想说一声谢谢，谢谢你们那被我累垮的身躯，谢谢你们那为我而放弃的梦想，还有谢谢你们那因我而一去不复返的青春年华……</p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这是大学期间制作的视频的台词，当时找素材时回头把 《CLANNAD》 和 《CLANNAD AFTER STORY》 看了一遍，在宿舍哭了好久……<br>附上我当时做的视频：<a href="https://pan.baidu.com/s/1htUhl2k" target="_blank" rel="noopener">传送门</a>，密码是：jcgy，有兴趣的朋友可以看看。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 之 this</title>
    <url>/2018/02/07/this/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>不管前方的路有多苦<br>只要走的方向正确<br>不管多么崎岖不平<br>都比站在原地更接近幸福  </p>
<p><strong>千与千寻</strong></p>
</blockquote>
<a id="more"></a>
<p>对于和我一样 JavaScript 基础不是很扎实的朋友，在看别人写的代码的时候，一定总是弄不清 this 的指向，工作和学习的效率也相应大打折扣。</p>
<p>最近稍微研究了一下，基本总结为两句话：<strong>this不在箭头函数中，this 永远指向最后调用它的那个对象；this在箭头函数中，this 始终指向函数定义时的 this</strong></p>
<p>其实研究透了，说起来也挺简单，下面举几个例子对比一下，大致也就明白了：</p>
<p><strong>首先声明</strong>：在严格模式下，全局对象是 undefined；在非严格模式下，全局对象才是 window。下面的例子全是在非严格模式下。</p>
<p><strong>例子一</strong>：这个是最简单的例子，直接看调用a方法时，前面没有调用的对象，那就是全局对象 window 调用的，也可以写成 window.a()
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Zhang San"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"Li Si"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">a(); <span class="comment">// ZhangSan</span></span><br></pre></td></tr></table></figure></p>
<p><strong>例子二</strong>：同样直接看调用，两个 fn() 最后都是 a 调用的，所以它们的 this 指向的都是 a ，例子一的说明部分已经讲过了
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Zhang San"</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"Li Si"</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.fn(); <span class="comment">// Li Si</span></span><br><span class="line"><span class="built_in">window</span>.a.fn(); <span class="comment">// Li Si</span></span><br></pre></td></tr></table></figure></p>
<p><strong>例子三</strong>：这类的例子应该是最困扰大家的一种了，我们只要记住是在<strong>调用</strong>时即可。本例先声明了 f ，后在调用时 f() 前面并没有调用的对象，那么可以参考例子一的解释，即此时 this 指向全局对象 window
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Zhang San"</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"Li Si"</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = a.fn;</span><br><span class="line">f(); <span class="comment">// Zhang San</span></span><br></pre></td></tr></table></figure></p>
<p><strong>例子四</strong>：这个问题大家肯定也经常遇到，在调用一些原生函数时，不知道调用它的对象是什么，这个也没办法，要一点一点积累经验。比如本例中的setTimeout()究竟是哪个对象调用的呢？“红宝书”里有写过：超时调用的代码都是在全局作用域中执行的，因此函数中 this 的值在非严格模式下指向 window 对象，在严格模式下是 undefined 。回到本例中来，window 对象中没有f1()，所以才会报出错误 <code>this.f1 is not a function</code>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Zhang San"</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name : <span class="string">"Li Si"</span>,</span><br><span class="line">  f1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">  f2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.f1();</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a.f2(); <span class="comment">// this.f1 is not a function</span></span><br></pre></td></tr></table></figure></p>
<p>那么这个代码我们要怎样改造，才能成功输出 <code>Li Si</code> 呢？<br>有两种方案，第一种也是最常见的一种：使用一个变量将进入 setTimeout() 之前的 this 给保存下来：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Zhang San"</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name : <span class="string">"Li Si"</span>,</span><br><span class="line">  f1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">  f2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      self.f1();</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a.f2();</span><br></pre></td></tr></table></figure></p>
<p>第二种方案是使用箭头函数，可以回头看看我一开始的总结，这里需要注意一点：箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined。所以我们可以这么改造：（千万不要把 f2 也写成箭头函数）
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Zhang San"</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name : <span class="string">"Li Si"</span>,</span><br><span class="line">  f1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">  f2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.f1();</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a.f2();</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>印象笔记·剪藏</title>
    <url>/2018/01/24/webclipper/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>吾王剑锋所指<br>吾等心之所向</p>
<p><strong>Fate/Zero</strong></p>
</blockquote>
<a id="more"></a>
<p>如果你正在使用印象笔记（Evernote），那么你一定要知道它有一款非常好用的插件 —— 印象笔记·剪藏。今天我就来安利一下这款插件。</p>
<p>打开印象笔记·剪藏的<a href="https://www.yinxiang.com/webclipper/?downloaded" target="_blank" rel="noopener">官网</a>，首屏就能看到它硕大的宣传标语：<span style="color: red;">像剪报纸一样，「剪藏」你最爱的网站！</span>其实就是一键保存网页的功能，具体的使用方式可以打开它的<a href="https://www.yinxiang.com/webclipper/guide/" target="_blank" rel="noopener">使用说明页</a>，它自己给自己贴的标签是：“印象笔记·剪藏是史上最强的浏览器插件，可以快速保存、标注和分享网上一切内容，包括网页正文、图片、截屏和整个网页。”这个史上最强是不是有点过分了，哈哈。不过它的支持程度确实相当好，支持Google Chrome、Safari、IE 7+，Firefox和Opera浏览器。</p>
<p>在浏览器中安装好插件之后，我们就可以开始剪藏了，它的插件图标是一个大象的头，直接点击该图标默认有5种剪藏方式，分别是网页正文、隐藏广告、整个页面、网址和屏幕截图。其中网页正文的选择有 “+” 和 “-” 可以调整框选的内容。另外，还有三种特定的剪藏方式：</p>
<ol>
<li>当打开pdf文档时，可以完整的将pdf剪藏进笔记中；  </li>
<li>当选中部分内容再点击剪藏时，可以将选中的内容剪藏进笔记中，这样可以过滤掉多余的文字信息；  </li>
<li>当浏览一些热门的网站时，剪藏也对其进行了专门的优化，可以一键将页面以简洁清新的排版保存成笔记，留待日后浏览或标注修改。  </li>
</ol>
<p>选中好了我们想要的内容之后，我们可以对其进行一些标注，标注方式有两种：</p>
<ol>
<li>高亮文本：用鼠标框选即可，放弃某高亮可点击其左上角的 ‘X’ 号，这个方式适用于网页正文、隐藏广告和整个页面；  </li>
<li>添加图章：使用箭头、图形和文字轻松完成标注、快速表达想法，适用于屏幕截图</li>
</ol>
<p>然后，我们选好合适的笔记本，如果有必要，也可以额外添加标签和注释，这样就可以点击保存了，是不是很简单。</p>
<p>笔记一旦多了之后，我们可能遇到很多问题。比如，可能找了半天找不到笔记，搜索也要搜索好久。这个时候，我们就需要整理一下我们的笔记了，这里分享一个我的经验。为相同类型的笔记建立笔记本，相同类型的笔记本建立笔记本组，一般这三级目录就够用了，然后为了方便查找，给笔记本组名前面编个号，比如我自己是这样的：01-FE、02-html、03-css、04-JavaScript……，04-JavaScript下面又分类有es6、vue、react等等。这样找起来就非常方便了，想找什么到对应的目录下扫一眼就能找到。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Evernote</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack学习记录</title>
    <url>/2018/01/16/webpack1/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>爱的时候不辜负人<br>玩的时候不辜负风景<br>睡觉时不辜负床<br>一个人时不辜负自己  </p>
<p><strong>卢思浩</strong></p>
</blockquote>
<a id="more"></a>
<p>前段时间在掘金看过一篇文章，叫做<a href="https://juejin.im/post/5a2ff0b2f265da433562bce4" target="_blank" rel="noopener">《webpack 为什么这么难用？》</a>，深有感触吧，之前我有学过一段时间，但是由于官方文档确实太过于杂乱了，而且怎么说呢，按文档介绍的流程学习下来，太片段化了，没有形成一个知识体系，于是乎过一段时间不用就忘记了。看过前面的那篇文章之后，我又去翻了翻 Webpack 的官方文档，似乎比以前好理解了一些，可能是以前水平不够理解不了吧，哈哈。这篇文章简单介绍下，以我目前的开发习惯所配套使用到的 Webpack 知识点，以后学习的过程中有什么新的发现我会在这篇文章中更新。使用到的项目：<a href="https://github.com/carolyicheng666/psd-to-html" target="_blank" rel="noopener">psd-to-html</a>  </p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li><p>安装<br>下面是官网原话：</p>
<div class="note danger"><p>不推荐全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。</p></div>
<p>所以请在项目的主目录下使用命令进行本地安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev webpack</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建webpack.config.js<br>以后关于项目的复杂配置全都写在此文件中，避免每次编译等操作都在终端键入命令的麻烦</p>
</li>
<li><p>添加npm脚本<br>在 <code>package.json</code> 中 scripts 字段内添加</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"build": "webpack"</span><br></pre></td></tr></table></figure>
<p>这样我们就可以使用 <code>npm run build</code> 来执行 <code>webpack.config.js</code> 了</p>
</li>
</ul>
<p>接下来我们来介绍如何配置 webpack.config.js 。官网给出的<a href="https://doc.webpack-china.org/configuration" target="_blank" rel="noopener">可配置项</a>特别多，我在前面说过了，我只挑符合我开发习惯的讲，所以不会太全面和深入  </p>
<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>任何一种打包工具，大家最关心的可能都是如何输入输出，比如基于任务流的 gulp 采用管道的方式，开始的 <code>gulp.src()</code> 作为输入，一级一级向后，每一个管道的输入都是上一个管道的输出，最终由 <code>gulp.dest()</code> 输出。</p>
<p>当然，拿 gulp 和 webpack 比较是不恰当的。gulp 是一种工具，能够优化前端工作流程，而 webpack 本身是一种 js 模块化的方案，通过配置模块loader和插件等可以将css，html等也进行模块化，两者功能上有重合之处，但各自侧重点不同。</p>
<p>回到正题，还是来说一下webpack是如何输入输出的：</p>
<p><strong>输入</strong><br><code>entry:</code> 后写的是输入的文件路径，可以接受字符串、字符串数组和对象。如果是字符串或字符串数组，那么默认输出文件会被命名为main；如果是对象，那么默认输出文件就会被命名为其对应的key，当然在输出的时候都可以更改这些默认名。例如：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  <span class="comment">//通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存起来到缓存中供后续使用。</span></span><br><span class="line">  vendor: __dirname + <span class="string">"/dist/js/scrollreveal.min.js"</span>,<span class="comment">//公共模块</span></span><br><span class="line">  main: __dirname + <span class="string">"/dist/main.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>输出</strong><br>直接把例子搬出来：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: __dirname + <span class="string">"/webpack-build"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">  filename: <span class="string">"[name]-[chunkhash].js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>output:</code> 后写的是输出的配置，配置项特别多，大概有二三十个，挑几个比较重要的说下：  </p>
<ul>
<li><em>path</em> 表示所有输出文件的目标路径，特别说明必须是绝对路径，所以请使用 <code>__dirname</code> 这个参数，这里有两种写法，一种是官方使用的 <code>path.resolve(__dirname, &quot;dist&quot;)</code> ，这种方式需要在文件头部引入path，即 <code>const path = require(&#39;path&#39;);</code> ；另一种是使用字符串拼接的办法，即 <code>__dirname + &quot;/dist/&quot;</code>，两种方式效果是一样的  </li>
<li><em>filename</em> 表示输出文件的文件名，可以动态设置，如 <code>[name].js</code> 或 <code>[chunkhash].js</code> 等等  </li>
<li><em>publicPath</em> 表示输出解析文件的目录，在 path 不确定的情况下这个配置会很有用  </li>
<li><em>chunkFilename</em> 表示非入口文件的名称<br>……</li>
</ul>
<h2 id="模块配置"><a href="#模块配置" class="headerlink" title="模块配置"></a>模块配置</h2><p>模块的配置写在 module 字段的 rules 中，它是一个对象数组，这里确实没什么好说的，无非就是下载 loader，使用 loader 的过程，使用方式去 github 上搜索对应 loader 即可</p>
<p>我把我的项目<a href="https://github.com/carolyicheng666/psd-to-html" target="_blank" rel="noopener">psd-to-html</a>中使用的 module 拿出来介绍一下
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">        fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              minimize: <span class="literal">true</span></span><br><span class="line">            &#125;  </span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'postcss-loader'</span>, </span><br><span class="line">          <span class="string">'sass-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">      use: [<span class="string">'file-loader?name=images/[hash].[ext]'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>需要新建一个 postcss.config.js 配置文件，用于将插件集成至 postcss 中
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123; <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>], <span class="attr">cascade</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>需要什么 loader 就去下载，反正就是一顿 <code>npm i XXX --save-dev</code>，然后看看使用方式，复制粘贴再改改就好了</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件的配置写在 plugins 字段中，它是一个数组，还是拿前面那个项目举例：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>),</span><br><span class="line">  <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name]-[contenthash].css"</span>),<span class="comment">//分离css文件，使之提前加载</span></span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    names: [<span class="string">'vendor'</span>, <span class="string">'manifest'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'webpack-build'</span>], &#123; <span class="attr">verbose</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">  <span class="comment">//更新</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'index.html'</span>,</span><br><span class="line">    title: <span class="string">'this is psd-to-html'</span>,</span><br><span class="line">    template: path.resolve(__dirname, <span class="string">"src/index.tmpl.html"</span>),</span><br><span class="line">    minify: &#123;</span><br><span class="line">      removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      html5: <span class="literal">true</span>,</span><br><span class="line">      minifyCSS: <span class="literal">true</span>,</span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">      removeEmptyAttributes: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    hash: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p><code>webpack.XXX</code> 为 webpack 内置插件，不需要额外下载，只需要在文件头部引入webpack即可，即 <code>const webpack = require(&#39;webpack&#39;);</code> ，其余都需要额外下载和引入，比如上面这个例子下载完还需要
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br></pre></td></tr></table></figure></p>
<p>这些插件的作用分别是：  </p>
<ul>
<li><strong>BannerPlugin</strong> 表示在输出文件头部打上注释 <code>版权所有，翻版必究</code>；</li>
<li><strong>ExtractTextPlugin</strong>  表示分离出css文件，提高运行效率；  </li>
<li><strong>CommonsChunkPlugin</strong> 表示将公共模块拆分出来单独打包，这样在调用时只需要加载一次，提高运行速度，<em>注意</em>，name传入的是名称，如果是第三方库可以在入口entry处写上路径；  </li>
<li><strong>CleanWebpackPlugin</strong> 表示编译时清空 <code>webpack-build</code> 文件夹；</li>
<li><strong>UglifyJsPlugin</strong> 表示使编译后的文件压缩；</li>
<li><strong>HtmlWebpackPlugin</strong> 表示使用已有 <code>html</code> 模板生成 html 文件，每调用一次生成一个，使用插件的chunks和excludeChunks参数可以设置和去除在入口引入的js，可以用此插件建立多页面项目，更多配置点击<a href="https://github.com/jantimon/html-webpack-plugin#Configuration" target="_blank" rel="noopener">这里</a></li>
</ul>
<p><span style="color: red;font-weight: 700;">更新</span>，HtmlWebpackPlugin插件存在一点问题，按照<a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">插件的github主页</a>设置title等属性会不起作用，作者解释道，如果使用了html-loader就会出现这个问题，我在 <a href="https://github.com/jantimon/html-webpack-plugin/issues/176" target="_blank" rel="noopener">issue176</a> 中找到了一些相关的解释。</p>
<p>所以现在的问题是，如果使用html-loader，它就会先将模板解析成html，从而无法使用ejs语法动态设置；如果不使用html-loader，webpack就无法打包html内的静态资源，比如src中引入的图片等。那么要如何解决这个问题呢？</p>
<p><a href="https://webpack.js.org/loaders/html-loader/#interpolation" target="_blank" rel="noopener">html-loader</a>的作者给了我们解决的方案，采用ES6模板字符串的方式require图片等静态资源，webpack就能将其打包了，即
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/gallery.png"</span>&gt;</span></span><br><span class="line">改写成</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;require(`./images/gallery.png`)&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><div class="note info"><p>webpack-dev-server 为你提供了一个简单的 web 服务器，并且能够实时重新加载(live reloading)</p></div>
<p>需要先下载 webpack-dev-server
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure></p>
<p>详细的配置可以根据自己项目的实际情况参考<a href="https://doc.webpack-china.org/configuration/dev-server/#src/components/Sidebar/Sidebar.jsx" target="_blank" rel="noopener"><span style="color: red;">官网</span></a>进行设置，我这个项目只用到了很小的一部分，使用 <code>npm start</code> 启动后，就能在 <code>127.0.0.1:8080</code> 看到主页的效果了，下面是配置信息
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: <span class="string">'./webpack-build'</span>,</span><br><span class="line">  host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="string">'/api/'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://127.0.0.1:8080'</span>,</span><br><span class="line">      pathRewrite: &#123;<span class="string">'^/api'</span>: <span class="string">''</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><p>顾名思义，这个属性的设置能够告诉webpack如何解析模块。该属性的配置项也有很多，这里重点介绍alias和modules。  </p>
<ul>
<li><p>alias<br>创建 import 或 require 的别名，来确保模块引入变得更简单。比如我这个项目像如下这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    Js: path.resolve(__dirname, <span class="string">'dist/js'</span>),</span><br><span class="line">    Style: path.resolve(__dirname, <span class="string">'dist/sass'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么入口文件main.js就可以写成这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'Style/reset.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'Style/common.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'Style/index.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ScrollReveal <span class="keyword">from</span> <span class="string">'Js/scrollreveal.min.js'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>module<br>告诉 webpack 解析模块时应该搜索的目录。默认是在 node_modules 中搜索，如果想添加一个目录到模块搜索目录，并优先于 node_modules 搜索，可以用如下写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  modules: [path.resolve(__dirname, <span class="string">"src"</span>), <span class="string">"node_modules"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h2><p>这个配置可选参数很多，似乎还存在一些问题在里面，官网有这么一段话：
<div class="note warning"><p>There are some issues with Source Maps in Chrome. We need your help!.</p></div></p>
<p>下面是官网的配置项列表及说明：</p>
<table>
  <tr>
    <th width="30%" style="text-align:center;">devtool</th>
    <th width="10%" style="text-align:center;">build</th>
    <th width="10%" style="text-align:center;">rebuild</th>
    <th width="20%" style="text-align:center;">production</th>
    <th style="text-align:center;">quality</th>
  </tr>
  <tr>
    <td style="text-align:center;">(none)</td>
    <td style="text-align:center;">+++</td>
    <td style="text-align:center;">+++</td>
    <td style="text-align:center;">yes</td>
    <td style="text-align:center;">bundled code</td>
  </tr>
  <tr>
    <td style="text-align:center;">eval</td>
    <td style="text-align:center;">+++</td>
    <td style="text-align:center;">+++</td>
    <td style="text-align:center;">no</td>
    <td style="text-align:center;">generated code</td>
  </tr>
  <tr>
    <td style="text-align:center;">cheap-eval-source-map</td>
    <td style="text-align:center;">+</td>
    <td style="text-align:center;">++</td>
    <td style="text-align:center;">no</td>
    <td style="text-align:center;">transformed code (lines only)</td>
  </tr>
  <tr>
    <td style="text-align:center;">cheap-module-eval-source-map</td>
    <td style="text-align:center;">o</td>
    <td style="text-align:center;">++</td>
    <td style="text-align:center;">no</td>
    <td style="text-align:center;">original source (lines only)</td>
  </tr>
  <tr>
    <td style="text-align:center;">eval-source-map</td>
    <td style="text-align:center;">- -</td>
    <td style="text-align:center;">+</td>
    <td style="text-align:center;">no</td>
    <td style="text-align:center;">original source</td>
  </tr>
  <tr>
    <td style="text-align:center;">cheap-source-map</td>
    <td style="text-align:center;">+</td>
    <td style="text-align:center;">o</td>
    <td style="text-align:center;">no</td>
    <td style="text-align:center;">transformed code (lines only)</td>
  </tr>
  <tr>
    <td style="text-align:center;">cheap-module-source-map</td>
    <td style="text-align:center;">o</td>
    <td style="text-align:center;">-</td>
    <td style="text-align:center;">no</td>
    <td style="text-align:center;">original source (lines only)</td>
  </tr>
  <tr>
    <td style="text-align:center;">inline-cheap-source-map</td>
    <td style="text-align:center;">+</td>
    <td style="text-align:center;">o</td>
    <td style="text-align:center;">no</td>
    <td style="text-align:center;">transformed code (lines only)</td>
  </tr>
  <tr>
    <td style="text-align:center;">inline-cheap-module-source-map</td>
    <td style="text-align:center;">o</td>
    <td style="text-align:center;">-</td>
    <td style="text-align:center;">no</td>
    <td style="text-align:center;">original source (lines only)</td>
  </tr>
  <tr>
    <td style="text-align:center;">source-map</td>
    <td style="text-align:center;">- -</td>
    <td style="text-align:center;">- -</td>
    <td style="text-align:center;">yes</td>
    <td style="text-align:center;">original source</td>
  </tr>
  <tr>
    <td style="text-align:center;">inline-source-map</td>
    <td style="text-align:center;">- -</td>
    <td style="text-align:center;">- -</td>
    <td style="text-align:center;">no</td>
    <td style="text-align:center;">original source</td>
  </tr>
  <tr>
    <td style="text-align:center;">hidden-source-map</td>
    <td style="text-align:center;">- -</td>
    <td style="text-align:center;">- -</td>
    <td style="text-align:center;">yes</td>
    <td style="text-align:center;">original source</td>
  </tr>
  <tr>
    <td style="text-align:center;">nosources-source-map</td>
    <td style="text-align:center;">- -</td>
    <td style="text-align:center;">- -</td>
    <td style="text-align:center;">yes</td>
    <td style="text-align:center;">without source content</td>
  </tr>
</table>

<p><strong>说明</strong>：<br><em>+++</em>: super fast<br><em>++</em>: fast<br><em>+</em>: pretty fast<br><em>o</em>: medium<br><em>-</em>: pretty slow<br><em>- -</em>: slow</p>
<p>网上有资料显示，在开发环境推荐使用：<code>cheap-module-eval-source-map</code>；在生产环境推荐使用：<code>cheap-module-source-map</code>。考虑到上面提到的chrome存在的问题，大家可以选择适当降级，个人建议开发环境使用：<code>eval-source-map</code>；生产环境使用：<code>source-map</code>。当然，大家也可以根据自己的实际情况使用。</p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>Webpack还有很多值得探索和学习的东西，大家加油~</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Element</title>
    <url>/2018/01/10/element/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>无主之物啊<br>汇聚于梦之杖，成为吾之力量吧<br>Secure!</p>
<p><strong>魔卡少女樱 CLEAR CARD篇</strong></p>
</blockquote>
<a id="more"></a>
<p>最近学习了<strong>Element</strong>，它是一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。官方文档<strong><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener"><span style="color: red;">地址</span></a></strong></p>
<p>这个库有<strong>4大特性</strong>，分别是：  </p>
<p><strong>一致性 Consistency</strong></p>
<ul>
<li>与现实生活一致：与现实生活的流程、逻辑保持一致，遵循用户习惯的语言和概念；</li>
<li>在界面中一致：所有的元素和结构需保持一致，比如：设计样式、图标和文本、元素的位置等。</li>
</ul>
<p><strong>反馈 Feedback</strong></p>
<ul>
<li>控制反馈：通过界面样式和交互动效让用户可以清晰的感知自己的操作；</li>
<li>页面反馈：操作后，通过页面元素的变化清晰地展现当前状态。</li>
</ul>
<p><strong>效率 Efficiency</strong></p>
<ul>
<li>简化流程：设计简洁直观的操作流程；</li>
<li>清晰明确：语言表达清晰且表意明确，让用户快速理解进而作出决策；
帮助用户识别：界面简单直白，让用户快速识别而非回忆，减少用户记忆负担。</li>
</ul>
<p><strong>可控 Controllability</strong></p>
<ul>
<li>用户决策：根据场景可给予用户操作建议或安全提示，但不能代替用户进行决策；</li>
<li>结果可控：用户可以自由的进行操作，包括撤销、回退和终止当前操作等。</li>
</ul>
<p>最新的官方文档在 2018-01-08 更新到了 2.0.11 ，之前有过 Vue 的基础，我就按照 Vue 的路线一路学下来了，另外也可以按照 React 和 Angular 的路线学习</p>
<p>想要上手它除了前面说的 Vue 或 React 或 Angular 基础以外，还需要会使用 Webpack，官方提供了初学者的<a href="https://github.com/ElementUI/element-starter" target="_blank" rel="noopener">模板</a>，可以先 clone 下来研究一下，安装好相关的依赖之后，就可以进行开发了，开发在 <code>src</code> 目录下，编译后会生成 <code>dist</code> 目录，可放入生产环境中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//开发模式</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line">//编译</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>我把官方文档的例子整合到了我的<strong><a href="https://github.com/carolyicheng666/element-study" target="_blank" rel="noopener"><span style="color: red;">代码仓库</span></a></strong>中，修改 <code>src</code> 目录下的 <code>main.js</code> 文件中 <code>import App from &#39;XXX&#39;</code>这一行，可以看到与官方文档相对应的章节内容</p>
<p>目前官方文档仍然有一些bug，而且部分实例和代码呈现的效果不一致，能处理的我都尽量处理了，不能处理的我拿红色的 Bug 字眼标明了，期待官方的更新和修复</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Element</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>animation</title>
    <url>/2017/12/28/animation/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>只要那一抹笑容尚存，我便心无旁骛  </p>
<p><strong>声之形</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><div class="note danger"><p>CSS Animations 是CSS的一个模块，它定义了如何用关键帧来随时间推移对CSS属性的值进行动画处理。关键帧动画的行为可以通过指定它们的持续时间，它们的重复次数以及它们如何重复来控制。</p></div>
<h2 id="animation-浏览器兼容性"><a href="#animation-浏览器兼容性" class="headerlink" title="animation 浏览器兼容性"></a>animation 浏览器兼容性</h2><p>以下浏览器数据支持来自 <a href="https://caniuse.com/#search=animation" target="_blank" rel="noopener">Caniuse</a> ，对比一下之前的 transition ，支持程度虽然稍显逊色，但依然可以看出还是不错的</p>
<p>PC端浏览器：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Chrome</th>
<th style="text-align:center">Opera</th>
<th style="text-align:center">FireFox</th>
<th style="text-align:center">IE</th>
<th style="text-align:center">Edge</th>
<th style="text-align:center">Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">43</td>
<td style="text-align:center">30</td>
<td style="text-align:center">16</td>
<td style="text-align:center">10</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">9</td>
</tr>
</tbody>
</table>
<p>移动端浏览器：</p>
<table>
<thead>
<tr>
<th style="text-align:center">iOS Safari</th>
<th style="text-align:center">Opera Mobile</th>
<th style="text-align:center">Opera Mini</th>
<th style="text-align:center">Android</th>
<th style="text-align:center">Android Chrome</th>
<th style="text-align:center">Android Firefox</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">9.2</td>
<td style="text-align:center">12.1</td>
<td style="text-align:center">No</td>
<td style="text-align:center">62</td>
<td style="text-align:center">62</td>
<td style="text-align:center">57</td>
</tr>
</tbody>
</table>
<h2 id="keyframes"><a href="#keyframes" class="headerlink" title="keyframes"></a>keyframes</h2><p>在开始介绍 Animation 之前我们需要来介绍一下什么是 keyframes 。顾名思义，它是动画的关键帧，回想一下，前面我们在使用 transition 制作一个简单的动画效果时，我们包括了初始属性和最终属性，一个开始执行动作时间和一个延续动作时间以及动作的变换速率，其实这些值都是一个中间值，如果我们要控制的更细一些，比如说我要第一个时间段执行什么动作，第二个时间段执行什么动作，这样的效果我们用 transition 很难实现，此时我们就需要借助 Animation 的力量。在使用 Animation 之前，我们需要为 Animation 定义 keyframes，即让绑定动画的元素在特定的帧表现特定的效果，接下来我们就来介绍一下如何使用 keyframes。<br>keyframes 具有其自己的语法规则，他的命名是由 <code>@keyframes</code> 开头，后面紧接着是这个动画的名称 <code>animation-name</code> 和花括号 <code>{}</code> ，在里面定义不同时间段所显示的样式，写法和 CSS 一样。<code>@keyframes</code> 内部是由多个百分比构成的，如 <code>0%</code>到 <code>100%</code> 之间，我们可以在其中按顺序创建任意多个百分比，并且附上不同的 CSS 样式，就可以实现动画效果了。注意，我们也可以使用 <code>from</code>和<code>to</code>分别取代 <code>0%</code>和 <code>100%</code> ，并且，<code>0%</code> 不能像别的属性取值一样把百分比符号省略，我们在这里必须加上百分符号，如果没有加上，那么这个 keyframes 是无效的，keyframes 的单位只接受百分比值。<br>对照上面的介绍，我们拿 W3C 的例子加深理解：
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> mymove &#123;</span><br><span class="line">  0%   &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">  25%  &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">  50%  &#123;<span class="attribute">top</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">  75%  &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">  100% &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">name</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span> <span class="selector-tag">iteration-count</span> <span class="selector-tag">direction</span> <span class="selector-tag">fill-mode</span> <span class="selector-tag">play-state</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>animation-name: keyframename|none;<br>定义动画的名称，这个名称要与 Keyframes 中定义的动画名称一致，可以给某一元素绑定多个动画</p>
</li>
<li><p>animation-duration：time;<br>规定完成一次动画所需要的时间，单位是秒或毫秒</p>
</li>
<li><p>animation-timing-function: ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier(n, n, n, n);<br>规定动画的速度曲线，详细介绍请查看之前 transition 文章，这里与其一致</p>
</li>
<li><p>animation-delay: time;<br>规定动画的延迟时间，单位是秒或毫秒</p>
</li>
<li><p>animation-iteration-count: n|infinite;<br>定义动画的播放次数，infinite表示无限次播放</p>
</li>
<li><p>animation-direction: normal|reverse|alternate|alternate-reverse;<br>定义是否应该轮流反向播放动画，默认是normal，表示正常播放；reverse，表示反向播放；alternate表示奇数次正向播放，偶数次反向播放；alternate-reverse与alternate正好相反，表示奇数次反向播放，偶数次正向播放。注意，如果动画只播放一次，则这个属性没有效果</p>
</li>
<li><p>animation-fill-mode: none|forwards|backwards|both;<br>控制元素在动画执行前与动画完成后的样式，这个属性不太好理解，索性用处也不是很大，推荐大家去看大漠老师的这篇文章：<a href="https://www.w3cplus.com/css3/understanding-css-animation-fill-mode-property.html" target="_blank" rel="noopener">理解animation-fill-mode属性</a></p>
</li>
<li><p>animation-play-state: running|paused;<br>定义一个动画是否运行或者暂停，利用这个属性，可以使用js控制动画暂停和播放</p>
</li>
</ul>
<p>就本人经验来看，前六个属性用的比较多，后面两种一般网页可能都不太能用到，如果是做游戏开发的可能比较容易碰到吧，有兴趣的朋友随便找几个<a href="http://www.w3school.com.cn/cssref/pr_keyframes.asp" target="_blank" rel="noopener">W3C例子</a>，修改其中的参数看看效果</p>
<h2 id="animate-css3"><a href="#animate-css3" class="headerlink" title="animate.css3"></a><a href="https://github.com/daneden/animate.css" target="_blank" rel="noopener">animate.css3</a></h2><p>用 animate 写过动画的朋友对这个库一定不会陌生，这个库在 github 上拥有恐怖的接近 50000 个 star，有一点animate基础的朋友就可以立马上手，如果不是特别刁钻的需求，这个库都能满足要求，点击标题即可跳转，强烈推荐使用。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas-api</title>
    <url>/2017/12/20/canvas-api/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>就算有讨厌的事，悲伤的事<br>但在这世上还有很多我想保护的东西</p>
<p><strong>魔法少女小圆</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><div class="note danger"><p>canvas 是 HTML5 新增的元素，可用于通过使用JavaScript中的脚本来绘制图形。例如，它可以用于绘制图形，制作照片，创建动画，甚至可以进行实时视频处理或渲染。</p></div>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这之后ctx变量调用canvas中的api绘制函数即可绘制图形</span></span><br></pre></td></tr></table></figure>
<p>canvas 元素创造了一个固定大小的画布，它公开了一个或多个渲染上下文，其可以用来绘制和处理要展示的内容<br>canvas 起初是空白的。为了展示，首先脚本需要找到渲染上下文，然后在它的上面绘制。canvas 元素有一个叫做 getContext() 的方法，这个方法是用来获得渲染上下文和它的绘画功能。getContext()只有一个参数，上下文的格式。如上所示，传入 <code>2d</code> 表示绘制的是一个 <code>2d</code> 的平面图形，当然如果传入 <code>3d</code> 就可以绘制 <code>3d</code> 图形，奇妙的是canvas的 <code>2d</code> 和 <code>3d</code> 绘制完全是不同的世界，本教程只介绍 <code>2d</code> 的api </p>
<h2 id="使用moveTo-、lineTo-和stroke-绘制一条直线"><a href="#使用moveTo-、lineTo-和stroke-绘制一条直线" class="headerlink" title="使用moveTo()、lineTo()和stroke()绘制一条直线"></a>使用moveTo()、lineTo()和stroke()绘制一条直线</h2><p>在基本用法中，canvas 创建画布的同时也创建了坐标轴，默认规定原点在左上角，向右为x轴正方向，向下为y轴正方向  </p>
<ul>
<li><strong>moveTo()</strong>代表绘制的起点，包含两个参数x和y，分别代表起始点坐标的x值和y值  </li>
<li><strong>lineTo()</strong>表示添加一个新的点，然后创建从该点到画布中最后指定点的线条，<strong>特别提醒</strong>：这个方法并不会创建线条  </li>
<li><strong>stroke()</strong>实际绘制出通过 moveTo() 和 lineTo() 方法定义的路径  </li>
</ul>
<p>这里可以认为moveTo()和lineTo()都是对绘制状态的设置，最后都要通过stroke()进行实际的绘制，既然是先设置状态再绘制图形，我们自然而然就会想到可以设置线条的宽度、线条的颜色等等，是的，这些在canvas中都是可以设置的先来介绍最常用的这两个，下面可能会遇到其它的，到时候我们再一一细说  </p>
<ul>
<li>设置线条宽度使用的是<strong>lineWidth</strong>，设置时让它等于一个具体数值，不用带单位，它是按像素计算的  </li>
<li>设置线条颜色使用的是<strong>strokeStyle</strong>，设置时让它等于一个具体的颜色值，这里可以使用渐变色，是一个高级用法，我们放到后面再说  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">  context.lineTo(<span class="number">700</span>, <span class="number">700</span>);</span><br><span class="line">  context.lineWidth = <span class="number">10</span>;</span><br><span class="line">  context.strokeStyle = <span class="string">"#058"</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用beginPath-重置当前路径"><a href="#使用beginPath-重置当前路径" class="headerlink" title="使用beginPath()重置当前路径"></a>使用beginPath()重置当前路径</h2><p>上一小节我们绘制了一条直线，有拓展意识的朋友可能会利用其绘制多条直线或折线，但是细心的你一定会发现在我们第二次设置lineWidth或StrokeStyle后，该效果会影响第一次的设置，为什么呢？这么说吧，canvas是基于状态的绘制，无论使用多少次stroke()，最后一次stroke()总会重新绘制之前的stroke()，这时候就需要使用beginPath()，stroke()向上查找直到遇到beginPath()结束，然后根据当前设置进行绘制，这样说比较抽象，举个例子吧，假如说我们想要绘制三条不同颜色的折线：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.lineWidth = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">  context.lineTo(<span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">  context.lineTo(<span class="number">100</span>, <span class="number">600</span>);</span><br><span class="line">  context.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line"></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">  context.lineTo(<span class="number">500</span>, <span class="number">400</span>);</span><br><span class="line">  context.lineTo(<span class="number">300</span>, <span class="number">600</span>);</span><br><span class="line">  context.strokeStyle = <span class="string">"green"</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line"></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">500</span>, <span class="number">200</span>);</span><br><span class="line">  context.lineTo(<span class="number">700</span>, <span class="number">400</span>);</span><br><span class="line">  context.lineTo(<span class="number">500</span>, <span class="number">600</span>);</span><br><span class="line">  context.strokeStyle = <span class="string">"blue"</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里有三个stroke()，分别绘制这三条折线，根据上面对beginPath()的描述，可以很清晰的看到这三条折线的设置方式，这里有两点要说明一下：<br>第一，绘制第一条线的beginPath()是可以不需要写的，加上这一行是为了保持格式上的统一；<br>第二，我们看到对于lineWidth的设置放在了最外面，这样是比较显式的将线条宽度都设置成10个像素的做法，因为根据第一点，我们也可以放在第一个beginPath()后且在第一个stroke()前，也是一样的效果，但是我们在第二个beginPath()和第二个stroke()之间重置lineWidth，例如说在其中添加一行 <code>context.lineWidth = 5;</code> ，根据前面对beginPath()的描述，那么效果就应该是第一条折线的线条宽度是10个像素，而后两条折线的线条宽度是5个像素，大家可以自己动手实践一下。</p>
<h2 id="使用closePath-绘制封闭图形"><a href="#使用closePath-绘制封闭图形" class="headerlink" title="使用closePath()绘制封闭图形"></a>使用closePath()绘制封闭图形</h2><p>有些朋友可能会用直线的例子绘制一个图形，并且如果结束点和起始点设置成同一个点，就能绘制成一个封闭图形，这里会有一个问题，如果把线条宽度lineWidth的值设大一些，这个问题就会显而易见：最后的这个点会有 lineWidth/2 * lineWidth/2 的小空隙！这个时候我们就需要使用closePath()将图形封闭起来，并且最后设置结束点为起始点的这一行代码可以不需要写，beginPath()和closePath()会将中间设置的代码封闭成为一个图形。<br>说到了封闭图形，我们自然会想到为其填充颜色，这里我们就来介绍一下：</p>
<ul>
<li>设置填充的颜色<strong>fillStyle</strong>，让其等于一个具体的颜色值即可，也可以使用渐变色</li>
<li>设置完成之后调用<strong>fill()</strong>即可填充，类似于stroke()绘制图形一样<br>这里有点小问题，先stroke()和先fill()的显示效果是不一样的，先stroke()会比先fill()少一半的线条宽度，大家可以自行编码体会一下  </li>
</ul>
<p>下面依然是举个例子，我们绘制了一个箭头，并填充黄色
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">100</span>, <span class="number">350</span>);</span><br><span class="line">  context.lineTo(<span class="number">500</span>, <span class="number">350</span>);</span><br><span class="line">  context.lineTo(<span class="number">500</span>, <span class="number">200</span>);</span><br><span class="line">  context.lineTo(<span class="number">700</span>, <span class="number">400</span>);</span><br><span class="line">  context.lineTo(<span class="number">500</span>, <span class="number">600</span>);</span><br><span class="line">  context.lineTo(<span class="number">500</span>, <span class="number">450</span>);</span><br><span class="line">  context.lineTo(<span class="number">100</span>, <span class="number">450</span>);</span><br><span class="line">  context.closePath();</span><br><span class="line"></span><br><span class="line">  context.lineWidth = <span class="number">10</span>;</span><br><span class="line">  context.strokeStyle = <span class="string">"#058"</span>;</span><br><span class="line">  context.fillStyle = <span class="string">"yellow"</span>;</span><br><span class="line"></span><br><span class="line">  context.fill();</span><br><span class="line">  context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用rect-绘制矩形"><a href="#使用rect-绘制矩形" class="headerlink" title="使用rect()绘制矩形"></a>使用rect()绘制矩形</h2><p>按照上面的方法，如果我们要绘制一个矩形，那么就需要绘制其中三条边即可，这里我们也可以使用rect()进行绘制，这个方法接收4个参数，分别是矩形左上角x坐标、矩形左上角y坐标、矩形的宽度和矩形的高度，单位按像素计算，我们只需传入具体数值即可，举个例子：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  r(context, <span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"red"</span>);</span><br><span class="line">  r(context, <span class="number">300</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"rgba(0, 255, 0, 0.5)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">ctx, x, y, width, height, lineWidth, strokeStyle, fillStyle</span>) </span>&#123;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.rect(x, y, width, height);</span><br><span class="line">  ctx.closePath();</span><br><span class="line"></span><br><span class="line">  ctx.lineWidth = lineWidth;</span><br><span class="line">  ctx.strokeStyle = strokeStyle;</span><br><span class="line">  ctx.fillStyle = fillStyle;</span><br><span class="line"></span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>绘制矩形我们也可以使用fillRect()和strokeRect()一起绘制，参数与rect()一致，<strong>注意</strong>，这两个方法与rect()本质是不同的，rect()是设置，最终还是需要fill()和stroke()进行绘制；而fillRect()和strokeRect()是绘制，也就是说使用它们就不需要额外使用fill()和stroke()了。我们将上面的例子改进一下：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  r(context, <span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"red"</span>);</span><br><span class="line">  r(context, <span class="number">300</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"rgba(0, 255, 0, 0.5)"</span>);</span><br><span class="line">  r1(context, <span class="number">400</span>, <span class="number">50</span>, <span class="number">350</span>, <span class="number">350</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"rgba(0, 0, 255, 0.3)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">ctx, x, y, width, height, lineWidth, strokeStyle, fillStyle</span>) </span>&#123;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.rect(x, y, width, height);</span><br><span class="line">  ctx.closePath();</span><br><span class="line"></span><br><span class="line">  ctx.lineWidth = lineWidth;</span><br><span class="line">  ctx.strokeStyle = strokeStyle;</span><br><span class="line">  ctx.fillStyle = fillStyle;</span><br><span class="line"></span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r1</span>(<span class="params">ctx, x, y, width, height, lineWidth, strokeStyle, fillStyle</span>) </span>&#123;</span><br><span class="line">  ctx.lineWidth = lineWidth;</span><br><span class="line">  ctx.strokeStyle = strokeStyle;</span><br><span class="line">  ctx.fillStyle = fillStyle;</span><br><span class="line"></span><br><span class="line">  ctx.fillRect(x, y, width, height);</span><br><span class="line">  ctx.strokeRect(x, y, width, height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="线条的其它样式"><a href="#线条的其它样式" class="headerlink" title="线条的其它样式"></a>线条的其它样式</h2><ul>
<li><p><strong>lineCap</strong><br>设置线条末端线帽的样式，有三个值，默认是butt，表示向线条的每个末端添加平直的边缘；另外还可以设置成round，表示向线条的每个末端添加圆形线帽；设置成square，表示向线条的每个末端添加正方形线帽</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  </span><br><span class="line">  context.lineWidth=<span class="number">50</span>;</span><br><span class="line">  context.strokeStyle=<span class="string">"#058"</span>;</span><br><span class="line"></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">  context.lineTo(<span class="number">700</span>, <span class="number">200</span>);</span><br><span class="line">  context.lineCap=<span class="string">"butt"</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line"></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">100</span>, <span class="number">400</span>);</span><br><span class="line">  context.lineTo(<span class="number">700</span>, <span class="number">400</span>);</span><br><span class="line">  context.lineCap=<span class="string">"round"</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line"></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.moveTo(<span class="number">100</span>, <span class="number">600</span>);</span><br><span class="line">  context.lineTo(<span class="number">700</span>, <span class="number">600</span>);</span><br><span class="line">  context.lineCap=<span class="string">"square"</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line"></span><br><span class="line">  context.lineWidth=<span class="number">1</span>;</span><br><span class="line">  context.strokeStyle=<span class="string">"#27a"</span>;</span><br><span class="line">  context.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">  context.lineTo(<span class="number">100</span>, <span class="number">700</span>);</span><br><span class="line">  context.moveTo(<span class="number">700</span>, <span class="number">100</span>);</span><br><span class="line">  context.lineTo(<span class="number">700</span>, <span class="number">700</span>);</span><br><span class="line">  context.stroke();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>lineJoin</strong><br>当两条线交汇时设置所创建边角的类型，同样有三个值，默认是miter，表示创建尖角；还可以设置成bevel，表示创建斜角；设置成round，表示创建圆角  </p>
</li>
<li><strong>miterLimit</strong><br>设置最大斜接长度，斜接长度指的是在两条线交汇处内角和外角之间的距离，只有当 lineJoin 设置为 <code>miter</code> 时，miterLimit 才有效，默认值是10。这部分内容不做过多解释，有兴趣的朋友可以查阅 <a href="http://www.w3school.com.cn/tags/canvas_miterlimit.asp" target="_blank" rel="noopener">W3C文档</a> </li>
</ul>
<h2 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h2><ul>
<li><p><strong>translate(x, y)</strong><br>平移变换，x和y分别代表水平和垂直的偏移量<br>我们拿之前矩形的例子做个试验：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  r(context, <span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"red"</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">  r(context, <span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"green"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">ctx, x, y, width, height, lineWidth, strokeStyle, fillStyle, translateX, translateY</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ctx.save();</span></span><br><span class="line">  ctx.translate(translateX, translateY);</span><br><span class="line"></span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.rect(x, y, width, height);</span><br><span class="line">  ctx.closePath();</span><br><span class="line"></span><br><span class="line">  ctx.lineWidth = lineWidth;</span><br><span class="line">  ctx.strokeStyle = strokeStyle;</span><br><span class="line">  ctx.fillStyle = fillStyle;</span><br><span class="line"></span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  <span class="comment">// ctx.restore();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码绘制了两个矩形，一个是红色的，一个是绿色的，可是运行出来却只有一个绿色的矩形，准确的说是红色的矩形和绿色的矩形重合了，但是我们可以看到，红色的矩形和绿色的矩形设置的偏移量并不同，这是怎么回事？<br>这是因为在canvas中，图形变换是叠加的，我们将红色的矩形向x轴和y轴各平移100个像素，而绿色的矩形没有做平移变换，这就使得绿色的矩形在红色矩形上方绘制，从而覆盖住了红色的矩形，大家可以改变绿色矩形的偏移量再看看效果。换一个角度说，translate()实际上是对原点的平移变换，改变了坐标系<br>canvas针对这种情况提供了它自己的解决办法，大家可以将代码中 <code>ctx.save();</code> 和 <code>ctx.restore();</code> 前面的注释去掉，save()用于保存当前canvas设置的所有状态，我们在save()之后执行各种操作，再调用一次restore()，这个方法用于返回到之前save()保存的状态，这两个方法是成对出现的，以后我们在做一些复杂的设置和图形绘制时，大家一定会体会到这两个方法的巨大作用  </p>
</li>
<li><p><strong>rotate(angle)</strong><br>旋转变换，angle表示旋转的角度，单位是弧度，角度转弧度的公式是：angle = degrees * Math.PI / 180<br>有了上面平移的例子，我们应该能很好的理解旋转变换了，还是拿矩形的例子试验一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  r(context, <span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"red"</span>, <span class="number">10</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span><br><span class="line">  r(context, <span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"green"</span>, <span class="number">-10</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">ctx, x, y, width, height, lineWidth, strokeStyle, fillStyle, angle</span>) </span>&#123;</span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.rotate(angle);</span><br><span class="line"></span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.rect(x, y, width, height);</span><br><span class="line">  ctx.closePath();</span><br><span class="line"></span><br><span class="line">  ctx.lineWidth = lineWidth;</span><br><span class="line">  ctx.strokeStyle = strokeStyle;</span><br><span class="line">  ctx.fillStyle = fillStyle;</span><br><span class="line"></span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  ctx.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>scale(x, y)</strong><br>缩放变换，x和y分别表示水平方向和垂直方向的缩放倍数<br>依然是矩形的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  r(context, <span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"red"</span>, <span class="number">1.1</span>, <span class="number">1.1</span>);</span><br><span class="line">  r(context, <span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"green"</span>, <span class="number">1.3</span>, <span class="number">1.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">ctx, x, y, width, height, lineWidth, strokeStyle, fillStyle, scaleX, scaleY</span>) </span>&#123;</span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.scale(scaleX, scaleY);</span><br><span class="line"></span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.rect(x, y, width, height);</span><br><span class="line">  ctx.closePath();</span><br><span class="line"></span><br><span class="line">  ctx.lineWidth = lineWidth;</span><br><span class="line">  ctx.strokeStyle = strokeStyle;</span><br><span class="line">  ctx.fillStyle = fillStyle;</span><br><span class="line"></span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  ctx.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们可以看到这个图形都进行了放大，细心的朋友会发现连 lineWidth 也一并进行了放大，很多人也许认为这是个canvas的bug或者是canvas对于图形缩放处理的不够好的地方，其实我倒觉得不是这样的，因为在translate()中我已经说过，translate()实际上是对原点的平移变换，scale()也可以看做是对该图形当前的坐标系进行了缩放变换而已  </p>
</li>
<li><p><strong>transform(a, b, c, d, e, f)</strong> 添加一个变换矩阵，可以对图形进行平移、倾斜和缩放<br>$$
\left[
\begin{matrix}
 a &amp; c &amp; e \\<br> b &amp; d &amp; f \\<br> 0 &amp; 0 &amp; 1
\end{matrix}
\right] \tag{1}
$$
<em>a:水平缩放  b:水平倾斜  c:垂直倾斜  d:垂直缩放  e:水平平移  f:垂直平移</em><br>画布中每个对象都有一个当前的变换矩阵，默认是单位矩阵，也就是transform(1, 0, 0, 1, 0, 0)，意思是缩放为1，倾斜和平移都为0，即不变换<br>大家根据下面的实例更改数值，就很好理解了，还可以加深记忆</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  r(context, <span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="string">"#058"</span>, <span class="string">"red"</span>, <span class="number">1.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">1.2</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">ctx, x, y, width, height, lineWidth, strokeStyle, fillStyle, a, b, c, d, e, f</span>) </span>&#123;</span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.transform(a, b, c, d, e, f);</span><br><span class="line"></span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.rect(x, y, width, height);</span><br><span class="line">  ctx.closePath();</span><br><span class="line"></span><br><span class="line">  ctx.lineWidth = lineWidth;</span><br><span class="line">  ctx.strokeStyle = strokeStyle;</span><br><span class="line">  ctx.fillStyle = fillStyle;</span><br><span class="line"></span><br><span class="line">  ctx.fill();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  ctx.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>setTransform(a, b, c, d, e, f)</strong><br>把当前的变换矩阵重置为单位矩阵，然后以相同的参数运行 transform() ，不过我觉得每次图形的绘制都在save()和restore()中，重置矩阵的操作估计在这之中需要绘制多个图形的时候才可能用到吧  </p>
</li>
</ul>
<h2 id="fillStyle-属性设置"><a href="#fillStyle-属性设置" class="headerlink" title="fillStyle 属性设置"></a>fillStyle 属性设置</h2><p>之前我们在介绍 fillStyle 的时候说过可以使用渐变色，现在我们来详细说明渐变色的用法（感觉就是将 Photoshop 中“渐变”代码化了）  </p>
<ul>
<li><p><strong>线性渐变</strong><br>设置分为两步：第一步，创建渐变的变量，设置其为何种渐变</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">linearGrad = context.createLinearGradient(xstart, ystart, xend, yend);</span><br></pre></td></tr></table></figure>
<p>createLinearGradient()中包含四个变量，代表线段两端的点的坐标(xstart,ystart)和(xend,yend)，表示在这个线段上做线性渐变<br>第二步，在这条线段上设置关键帧，并为其指定颜色</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">linearGrad.addColorStop(<span class="number">0.0</span>, <span class="string">"white"</span>);</span><br><span class="line">linearGrad.addColorStop(<span class="number">1.0</span>, <span class="string">"black"</span>);</span><br></pre></td></tr></table></figure>
<p>addColorStop()表示添加关键帧，起始点为0，终止点为1，也就是上面设置的那两个点的坐标，这里用浮点数是为了让大家看得更方便，比如说我们要在线段中点位置添加一个关键帧，并设置灰色，那就可以这么写： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">linearGrad.addColorStop(<span class="number">0.5</span>, <span class="string">"gray"</span>);</span><br></pre></td></tr></table></figure>
<p>上面的描述可能比较生硬，大家可以打开Photoshop，点击渐变工具，快捷键是G，不管学过没学过吧，都可以在里面实际操作一下，再回过头来看看代码，理解起来就比较容易了<br>来看个实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> linearGrad=context.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">0.0</span>, <span class="string">"white"</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">0.25</span>, <span class="string">"yellow"</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">0.5</span>, <span class="string">"green"</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">0.75</span>, <span class="string">"blue"</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">1.0</span>, <span class="string">"black"</span>);</span><br><span class="line">  context.fillStyle=linearGrad;</span><br><span class="line">  context.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>径向渐变</strong><br>有了线性渐变的基础，径向渐变就很好理解了<br>第一步，依然是创建渐变的变量，设置其为何种渐变</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">radialGrad = context.createRadialGradient(x0, y0, r0, x1, y1, r1);</span><br></pre></td></tr></table></figure>
<p>createRadialGradient()中包含六个变量，分别是小圆圆心坐标(x0,y0)和小圆半径r0，大圆圆心坐标(x1,y1)和大圆半径r1，表示在这两个圆之间做径向渐变<br>第二步和线性渐变一致，同样是设置关键帧</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">radialGrad.addColorStop(<span class="number">0.0</span>, <span class="string">"white"</span>);</span><br><span class="line">radialGrad.addColorStop(<span class="number">1.0</span>, <span class="string">"black"</span>);</span><br></pre></td></tr></table></figure>
<p>来看个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> radialGrad=context.createRadialGradient(<span class="number">400</span>, <span class="number">400</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line">  radialGrad.addColorStop(<span class="number">0.0</span>, <span class="string">"white"</span>);</span><br><span class="line">  radialGrad.addColorStop(<span class="number">0.25</span>, <span class="string">"yellow"</span>);</span><br><span class="line">  radialGrad.addColorStop(<span class="number">0.5</span>, <span class="string">"green"</span>);</span><br><span class="line">  radialGrad.addColorStop(<span class="number">0.75</span>, <span class="string">"blue"</span>);</span><br><span class="line">  radialGrad.addColorStop(<span class="number">1.0</span>, <span class="string">"black"</span>);</span><br><span class="line">  context.fillStyle=radialGrad;</span><br><span class="line">  context.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>除了可以填充渐变色以外，我们还可以填充图像</p>
<ul>
<li><p><strong>填充图像</strong><br>设置方式是先创建一个图像源对象，可以是如下几种：image, video, canvas, CanvasRenderingContext2D, ImageBitmap, ImageData, Blob，然后再用类似渐变的方式绑定到canvas中，我们这里只讨论image和canvas这两个，首先来看第一个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> backgroundImage=<span class="keyword">new</span> Image();</span><br><span class="line">  backgroundImage.src=<span class="string">"images/repeat.gif"</span>;</span><br><span class="line">  backgroundImage.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pattern=context.createPattern(backgroundImage, <span class="string">"repeat"</span>);</span><br><span class="line">    context.fillStyle=pattern;</span><br><span class="line">    context.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>createPattern()包含两个参数，第一个是image对象，第二个是指定如何重复图像，和 CSS 中的设置一样<br>我们再来看第二个canvas的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> backCanvas=createBackgroundCanvas();</span><br><span class="line">  <span class="keyword">var</span> pattern=context.createPattern(backCanvas, <span class="string">"repeat"</span>);</span><br><span class="line">  context.fillStyle=pattern;</span><br><span class="line">  context.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBackgroundCanvas</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> backCanvas=<span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">  backCanvas.width=<span class="number">100</span>;</span><br><span class="line">  backCanvas.height=<span class="number">100</span>;</span><br><span class="line">  <span class="keyword">var</span> backCanvasContext=backCanvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  drawStar(backCanvasContext, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> backCanvas;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawStar</span>(<span class="params">cxt, x, y, R, rot</span>)</span>&#123;</span><br><span class="line">  cxt.save();</span><br><span class="line"></span><br><span class="line">  cxt.translate(x, y);</span><br><span class="line">  cxt.rotate(rot/<span class="number">180</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">  cxt.scale(R, R);</span><br><span class="line"></span><br><span class="line">  starPath(cxt);</span><br><span class="line"></span><br><span class="line">  cxt.fillStyle=<span class="string">"#fb3"</span>;</span><br><span class="line">  cxt.fill();</span><br><span class="line"></span><br><span class="line">  cxt.restore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">starPath</span>(<span class="params">cxt</span>)</span>&#123;</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    cxt.lineTo(<span class="built_in">Math</span>.cos((<span class="number">18</span>+<span class="number">72</span>*i)/<span class="number">180</span>*<span class="built_in">Math</span>.PI),-<span class="built_in">Math</span>.sin((<span class="number">18</span>+<span class="number">72</span>*i)/<span class="number">180</span>*<span class="built_in">Math</span>.PI));</span><br><span class="line">    cxt.lineTo(<span class="built_in">Math</span>.cos((<span class="number">54</span>+<span class="number">72</span>*i)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*<span class="number">0.5</span>,-<span class="built_in">Math</span>.sin((<span class="number">54</span>+<span class="number">72</span>*i)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*<span class="number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  cxt.closePath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子稍微有点复杂，首先创建了绘制五角星的方法drawStar()，然后用createBackgroundCanvas()其绘制到画布上，最后用createPattern()方法设置如何绘制  </p>
</li>
</ul>
<h2 id="绘制曲线"><a href="#绘制曲线" class="headerlink" title="绘制曲线"></a>绘制曲线</h2><ul>
<li><p><strong>arc(x, y, r, sAngle, eAngle, counterclockwise)</strong><br>用于绘制圆和部分圆，原点中心坐标为(x,y)，半径为r，起始角是sAngle，结束角是eAngle，单位是弧度，counterclockwise是布尔值，默认是false，表示顺时针绘制，反之为true时，表示逆时针绘制，具体请参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/arc" target="_blank" rel="noopener">MDN</a>和<a href="http://www.w3school.com.cn/tags/canvas_arc.asp" target="_blank" rel="noopener">W3C</a>，这里提供一个便于理解的实例，例子中1和2，3和4，5和6对照着看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.width=<span class="number">1024</span>;</span><br><span class="line">  canvas.height=<span class="number">768</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.lineWidth=<span class="number">5</span>;</span><br><span class="line">  context.strokeStyle=<span class="string">"#005588"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(<span class="number">50</span>+i*<span class="number">100</span>, <span class="number">60</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>);</span><br><span class="line">    context.stroke();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(<span class="number">50</span>+i*<span class="number">100</span>, <span class="number">180</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>);</span><br><span class="line">    context.closePath();</span><br><span class="line">    context.stroke();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(<span class="number">50</span>+i*<span class="number">100</span>, <span class="number">300</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>, <span class="literal">true</span>);</span><br><span class="line">    context.stroke();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(<span class="number">50</span>+i*<span class="number">100</span>, <span class="number">420</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>, <span class="literal">true</span>);</span><br><span class="line">    context.closePath();</span><br><span class="line">    context.stroke();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.fillStyle=<span class="string">"#005588"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(<span class="number">50</span>+i*<span class="number">100</span>, <span class="number">540</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>);</span><br><span class="line">    context.fill();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.fillStyle=<span class="string">"#005588"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(<span class="number">50</span>+i*<span class="number">100</span>, <span class="number">660</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI*(i+<span class="number">1</span>)/<span class="number">10</span>, <span class="literal">true</span>);</span><br><span class="line">    context.closePath();</span><br><span class="line">    context.fill();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>arcTo(x1, y1, x2, y2, r)</strong><br>创建介于两个切线之间的弧或曲线。这里面有几个概念：开始点(x0,y0)，控制点(x1,y1)，结束点(x2,y2)。一般是先用 moveTo() 方法设置开始点，然后使用 arcTo() 方法创建同时相切于开始点到控制点和控制点到结束点的两条切线，且半径为r的圆弧，这里我们可以想象的到，如果半径比某条切线长度要大时，切点就不会在切线的所在的线段上，而是在切线的延长线上，这种情况也是可以的。举个例子，大家可以自行更改数值看看效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  arcToTest(context, <span class="number">150</span>, <span class="number">100</span>, <span class="number">650</span>, <span class="number">100</span>, <span class="number">650</span>, <span class="number">600</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arcToTest</span>(<span class="params">cxt, x0, y0, x1, y1, x2, y2, R</span>)</span>&#123;</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  cxt.moveTo(x0, y0);</span><br><span class="line">  cxt.arcTo(x1, y1, x2, y2, R);</span><br><span class="line"></span><br><span class="line">  cxt.lineWidth=<span class="number">6</span>;</span><br><span class="line">  cxt.strokeStyle=<span class="string">"red"</span>;</span><br><span class="line">  cxt.stroke();</span><br><span class="line"></span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  cxt.moveTo(x0, y0);</span><br><span class="line">  cxt.lineTo(x1, y1);</span><br><span class="line">  cxt.lineTo(x2, y2);</span><br><span class="line"></span><br><span class="line">  cxt.lineWidth=<span class="number">2</span>;</span><br><span class="line">  cxt.strokeStyle=<span class="string">"gray"</span>;</span><br><span class="line">  cxt.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>quadraticCurveTo(x1, y1, x2, y2)</strong><br>绘制二次贝塞尔曲线，学过图形学的朋友看到这个一定不会陌生，用法与arcTo()非常类似，同样先需要使用 moveTo() 方法设置开始点，然后再使用quadraticCurveTo()设置控制点(x1, y1)和结束点(x2, y2)，与arcTo()不同的是没有半径r，并且开始点就是曲线的开始点，结束点就是曲线的结束点，这样这条曲线就是唯一确定了，我们来使用它绘制一个月亮</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  fillMoon(context, <span class="number">400</span>, <span class="number">400</span>, <span class="number">300</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillMoon</span>(<span class="params">cxt, x, y, R, rot, fillColor</span>)</span>&#123;</span><br><span class="line">  cxt.save();</span><br><span class="line">  cxt.translate(x, y);</span><br><span class="line">  cxt.rotate(rot*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span><br><span class="line">  cxt.scale(R, R);</span><br><span class="line">  pathMoon(cxt);</span><br><span class="line">  cxt.fillStyle=fillColor || <span class="string">"#fd5"</span>;</span><br><span class="line">  cxt.fill();</span><br><span class="line">  cxt.restore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pathMoon</span>(<span class="params">cxt</span>)</span>&#123;</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  cxt.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.5</span>*<span class="built_in">Math</span>.PI, <span class="number">1.5</span>*<span class="built_in">Math</span>.PI, <span class="literal">true</span>);</span><br><span class="line">  cxt.moveTo(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">  cxt.quadraticCurveTo(<span class="number">1.2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  cxt.closePath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>bezierCurveTo(x1, y1, x2, y2, x3, y3)</strong><br>绘制三次贝塞尔曲线，类似二次贝塞尔曲线，只是中间多了一个控制点，这样我们就可以绘制出更复杂的曲线了，综合前面我们绘制的月亮星星的例子，我们来绘制一个星空的场景</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.width=<span class="number">1200</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//sky</span></span><br><span class="line">  <span class="keyword">var</span> radialGrad=context.createRadialGradient(</span><br><span class="line">    canvas.width/<span class="number">2</span>, canvas.height, <span class="number">0</span>, </span><br><span class="line">    canvas.width/<span class="number">2</span>, canvas.height, canvas.height);</span><br><span class="line">  radialGrad.addColorStop(<span class="number">0.0</span>, <span class="string">"#035"</span>);</span><br><span class="line">  radialGrad.addColorStop(<span class="number">1.0</span>, <span class="string">"black"</span>);</span><br><span class="line">  context.fillStyle=radialGrad;</span><br><span class="line"></span><br><span class="line">  context.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">200</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> r=<span class="built_in">Math</span>.random()*<span class="number">5</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="built_in">Math</span>.random()*canvas.width;</span><br><span class="line">    <span class="keyword">var</span> y=<span class="built_in">Math</span>.random()*canvas.height*<span class="number">0.6</span>;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="built_in">Math</span>.random()*<span class="number">360</span>;</span><br><span class="line">    drawStar(context, x, y, r, r/<span class="number">2.0</span>, a);   </span><br><span class="line">  &#125;</span><br><span class="line">  fillMoon(context, <span class="number">900</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">30</span>); </span><br><span class="line">  drawland(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//land</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawland</span>(<span class="params">cxt</span>)</span>&#123;</span><br><span class="line">  cxt.save();</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  cxt.moveTo(<span class="number">0</span>, <span class="number">600</span>);</span><br><span class="line">  cxt.bezierCurveTo(<span class="number">540</span>, <span class="number">400</span>, <span class="number">660</span>, <span class="number">800</span>, <span class="number">1200</span>, <span class="number">600</span>);</span><br><span class="line">  cxt.lineTo(<span class="number">1200</span>, <span class="number">800</span>);</span><br><span class="line">  cxt.lineTo(<span class="number">0</span>, <span class="number">800</span>);</span><br><span class="line">  cxt.closePath();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> landStyle=cxt.createLinearGradient(<span class="number">0</span>, <span class="number">800</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  landStyle.addColorStop(<span class="number">0.0</span>, <span class="string">"#030"</span>);</span><br><span class="line">  landStyle.addColorStop(<span class="number">1.0</span>, <span class="string">"#580"</span>);</span><br><span class="line">  cxt.fillStyle=landStyle;</span><br><span class="line">  cxt.fill();</span><br><span class="line">  cxt.restore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//star</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawStar</span>(<span class="params">cxt, x, y, R, r, rot</span>)</span>&#123;</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    cxt.lineTo(<span class="built_in">Math</span>.cos((<span class="number">18</span>+<span class="number">72</span>*i-rot)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*R+x,-<span class="built_in">Math</span>.sin((<span class="number">18</span>+<span class="number">72</span>*i-rot)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*R+y);</span><br><span class="line">    cxt.lineTo(<span class="built_in">Math</span>.cos((<span class="number">54</span>+<span class="number">72</span>*i-rot)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*r+x,-<span class="built_in">Math</span>.sin((<span class="number">54</span>+<span class="number">72</span>*i-rot)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*r+y);</span><br><span class="line">  &#125;</span><br><span class="line">  cxt.closePath();</span><br><span class="line">  cxt.fillStyle=<span class="string">"#fb3"</span>;</span><br><span class="line">  cxt.strokeStyle=<span class="string">"#fd5"</span>;</span><br><span class="line">  cxt.lineWidth=<span class="number">3</span>;</span><br><span class="line">  cxt.lineJoin=<span class="string">"round"</span>;</span><br><span class="line">  cxt.fill();</span><br><span class="line">  cxt.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// moon</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillMoon</span>(<span class="params">cxt, x, y, R, rot, fillColor</span>)</span>&#123;</span><br><span class="line">  cxt.save();</span><br><span class="line">  cxt.translate(x, y);</span><br><span class="line">  cxt.rotate(rot*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span><br><span class="line">  cxt.scale(R, R);</span><br><span class="line">  pathMoon(cxt);</span><br><span class="line">  cxt.fillStyle=fillColor || <span class="string">"#fd5"</span>;</span><br><span class="line">  cxt.fill();</span><br><span class="line">  cxt.restore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pathMoon</span>(<span class="params">cxt</span>)</span>&#123;</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  cxt.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.5</span>*<span class="built_in">Math</span>.PI, <span class="number">1.5</span>*<span class="built_in">Math</span>.PI, <span class="literal">true</span>);</span><br><span class="line">  cxt.moveTo(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">  cxt.quadraticCurveTo(<span class="number">1.2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  cxt.closePath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="文字渲染"><a href="#文字渲染" class="headerlink" title="文字渲染"></a>文字渲染</h2><ul>
<li><p><strong>font</strong><br>设置文字的属性，与 CSS 设置方式一致。具体可设置的值请看 <a href="http://www.w3school.com.cn/tags/canvas_font.asp" target="_blank" rel="noopener">W3C文档</a>，比如这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">context.font=<span class="string">"italic small-caps bold 12px arial"</span>;</span><br></pre></td></tr></table></figure>
<p>那么如何填入文字呢？请看下面两个方法</p>
</li>
<li><p><strong>fillText(text, x, y, maxWidth)</strong><br>表示在画布上绘制填色的文本，默认是黑色，text是文本内容，x和y分别是开始绘制文本的（相对于画布）x坐标位置和y坐标位置，maxWidth可以设置文本最大的宽度，这个参数是可选的</p>
</li>
<li><p><strong>strokeText(text, x, y, maxWidth)</strong><br>表示在画布上绘制文本（没有填色），可以认为是绘制边框，默认同样是黑色，参数及含义与上面的 fillText() 一致，下面来看个综合实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.font=<span class="string">"40px bold Arial"</span>;</span><br><span class="line"></span><br><span class="line">  context.fillStyle=<span class="string">"#058"</span>;</span><br><span class="line">  context.fillText(<span class="string">"欢迎大家学习《canvas绘图接口详解》！"</span>, <span class="number">40</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  context.lineWidth=<span class="number">1</span>;</span><br><span class="line">  context.strokeStyle=<span class="string">"#058"</span>;</span><br><span class="line">  context.strokeText(<span class="string">"欢迎大家学习《canvas绘图接口详解》！"</span>, <span class="number">40</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  context.fillText(<span class="string">"欢迎大家学习《canvas绘图接口详解》！"</span>, <span class="number">40</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">  context.strokeText(<span class="string">"欢迎大家学习《canvas绘图接口详解》！"</span>, <span class="number">40</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> linearGrad=context.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">0</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">0.0</span>, <span class="string">"red"</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">0.25</span>, <span class="string">"orange"</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">0.5</span>, <span class="string">"yellow"</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">0.75</span>, <span class="string">"green"</span>);</span><br><span class="line">  linearGrad.addColorStop(<span class="number">1.0</span>, <span class="string">"purple"</span>);</span><br><span class="line">  context.fillStyle=linearGrad;</span><br><span class="line">  context.fillText(<span class="string">"欢迎大家学习《canvas绘图接口详解》！"</span>, <span class="number">40</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> backgroundImage=<span class="keyword">new</span> Image();</span><br><span class="line">  backgroundImage.src=<span class="string">"images/repeat.gif"</span>;</span><br><span class="line">  backgroundImage.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pattern=context.createPattern(backgroundImage, <span class="string">"repeat"</span>);</span><br><span class="line">    context.fillStyle=pattern;</span><br><span class="line">    context.font=<span class="string">"100px bold Arial"</span>;</span><br><span class="line">    context.fillText(<span class="string">"Canvas!"</span>, <span class="number">40</span>, <span class="number">650</span>);</span><br><span class="line">    context.strokeText(<span class="string">"Canvas!"</span>, <span class="number">40</span>, <span class="number">650</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>textAlign</strong><br>设置文本的对齐方式，有五个取值：默认是start，表示文本在指定的位置开始；end，表示文本在指定的位置结束；center，表示居中对齐；left，表示左对齐；right，表示右对齐。来看个综合实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.fillStyle=<span class="string">"#058"</span>;</span><br><span class="line">  context.font=<span class="string">"40px bold san-serif"</span>;</span><br><span class="line"></span><br><span class="line">  context.textAlign=<span class="string">"left"</span>;</span><br><span class="line">  context.fillText(<span class="string">"textAlign = left"</span>, <span class="number">400</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  context.textAlign=<span class="string">"center"</span>;</span><br><span class="line">  context.fillText(<span class="string">"textAlign = center"</span>, <span class="number">400</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  context.textAlign=<span class="string">"right"</span>;</span><br><span class="line">  context.fillText(<span class="string">"textAlign = right"</span>, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  context.textAlign=<span class="string">"start"</span>;</span><br><span class="line">  context.fillText(<span class="string">"textAlign = start"</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  context.textAlign=<span class="string">"end"</span>;</span><br><span class="line">  context.fillText(<span class="string">"textAlign = end"</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  context.strokeStyle=<span class="string">"#888"</span>;</span><br><span class="line">  context.moveTo(<span class="number">400</span>, <span class="number">0</span>);</span><br><span class="line">  context.lineTo(<span class="number">400</span>, <span class="number">800</span>);</span><br><span class="line">  context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>textBaseline</strong><br>设置文本的基线，有六个取值：top，基线在顶端；middle，基线在正中；bottom，基线在低端；默认值alphabetic，普通字母的基线；hanging，印度语的基线；ideographic，方块字如中文日文等的基线。综合实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.fillStyle = <span class="string">"#058"</span>;</span><br><span class="line">  context.font = <span class="string">"40px bold san-serif"</span>;</span><br><span class="line"></span><br><span class="line">  context.textBaseline = <span class="string">"top"</span>;</span><br><span class="line">  context.fillText(<span class="string">"textBaseline = top"</span>, <span class="number">40</span>, <span class="number">100</span>);</span><br><span class="line">  drawBaseline(context, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  context.textBaseline = <span class="string">"middle"</span>;</span><br><span class="line">  context.fillText(<span class="string">"textBaseline = middle"</span>, <span class="number">40</span>, <span class="number">200</span>);</span><br><span class="line">  drawBaseline(context, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  context.textBaseline = <span class="string">"bottom"</span>;</span><br><span class="line">  context.fillText(<span class="string">"textBaseline = bottom"</span>, <span class="number">40</span>, <span class="number">300</span>);</span><br><span class="line">  drawBaseline(context, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">  context.textBaseline = <span class="string">"alphabetic"</span>;</span><br><span class="line">  context.fillText(<span class="string">"中文日本語कितने बज रहे हैंalphabetic"</span>, <span class="number">40</span>, <span class="number">500</span>);</span><br><span class="line">  drawBaseline(context, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  context.textBaseline = <span class="string">"middle"</span>;</span><br><span class="line">  context.fillText(<span class="string">"中文日本語कितने बज रहे हैंhanging"</span>, <span class="number">40</span>, <span class="number">600</span>);</span><br><span class="line">  drawBaseline(context, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">  context.textBaseline = <span class="string">"bottom"</span>;</span><br><span class="line">  context.fillText(<span class="string">"中文日本語कितने बज रहे हैंideographic"</span>, <span class="number">40</span>, <span class="number">700</span>);</span><br><span class="line">  drawBaseline(context, <span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">drawBaseline</span>(<span class="params">cxt, h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = cxt.canvas.width;</span><br><span class="line"></span><br><span class="line">    cxt.save();</span><br><span class="line">    cxt.strokeStyle = <span class="string">"#888"</span>;</span><br><span class="line">    cxt.lineWidth = <span class="number">2</span>;</span><br><span class="line">    cxt.moveTo(<span class="number">0</span>, h);</span><br><span class="line">    cxt.lineTo(width, h);</span><br><span class="line">    cxt.stroke();</span><br><span class="line">    cxt.restore();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>measureText(text)</strong><br>这个方法能返回一个对象，截止目前只能用它来获取文本的宽度，使用方式是 context.measureText(text).width，希望将来能够获取更多关于这个文本的信息  </p>
</li>
</ul>
<h2 id="高级属性"><a href="#高级属性" class="headerlink" title="高级属性"></a>高级属性</h2><ul>
<li><p><strong>阴影</strong><br>shadowColor：设置阴影的颜色<br>shadowOffsetX：设置图形与阴影的水平距离<br>shadowOffsetY：设置图形与阴影的垂直距离<br>shadowBlur：设置阴影的模糊级数<br>同样，这些属性对于使用过 Photoshop 中模糊滤镜的朋友都非常简单易懂，我们举个例子，给之前绘制的那个五角星加个阴影</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.shadowColor=<span class="string">"#058"</span>;</span><br><span class="line">  context.shadowOffsetX=<span class="number">10</span>;</span><br><span class="line">  context.shadowOffsetY=<span class="number">10</span>;</span><br><span class="line">  context.shadowBlur=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  drawStar(context, <span class="number">150</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//五角星</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawStar</span>(<span class="params">cxt, R, r, x, y, rot</span>)</span>&#123;</span><br><span class="line">  cxt.beginPath();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    cxt.lineTo(<span class="built_in">Math</span>.cos((<span class="number">18</span>+<span class="number">72</span>*i-rot)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*R+x,-<span class="built_in">Math</span>.sin((<span class="number">18</span>+<span class="number">72</span>*i-rot)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*R+y);</span><br><span class="line">    cxt.lineTo(<span class="built_in">Math</span>.cos((<span class="number">54</span>+<span class="number">72</span>*i-rot)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*r+x,-<span class="built_in">Math</span>.sin((<span class="number">54</span>+<span class="number">72</span>*i-rot)/<span class="number">180</span>*<span class="built_in">Math</span>.PI)*r+y);</span><br><span class="line">  &#125;</span><br><span class="line">  cxt.closePath();</span><br><span class="line">  cxt.stroke();</span><br><span class="line">  cxt.fillStyle=<span class="string">"#fd5"</span>;</span><br><span class="line">  cxt.fill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>合成</strong><br>globalAlpha：设置当前绘图的透明度，与 CSS 一致，0是完全透明，1是完全不透明。大家可以更改下面例子的数值看下效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.width=<span class="number">1200</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.globalAlpha=<span class="number">0.7</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    context.fillStyle=<span class="string">"rgb("</span>+ r +<span class="string">","</span>+ g +<span class="string">","</span>+ b +<span class="string">")"</span>;</span><br><span class="line"></span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(<span class="built_in">Math</span>.random()*canvas.width, <span class="built_in">Math</span>.random()*canvas.height, <span class="built_in">Math</span>.random()*<span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">    context.fill();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>globalCompositeOperation：设置如何将新的图像绘制到旧的图像中去，总共有11个取值，大家可以查看 <a href="http://www.w3school.com.cn/tags/canvas_globalcompositeoperation.asp" target="_blank" rel="noopener">W3C文档</a>，我这里提供一个交互式的例子，把这11个取值都放进去了，大家可以点击看看，对比他们之间的不同</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// css</span><br><span class="line">#buttons &#123;</span><br><span class="line">  width: 1200px;</span><br><span class="line">  margin: 10px auto;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line">#buttons a &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  display: block;</span><br><span class="line">  float: left;</span><br><span class="line">  margin-right: 14px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// html</span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #aaa; display: block; margin: 50px auto;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>source-over<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>source-atop<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>source-in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>source-out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>destination-over<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>destination-atop<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>destination-in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>destination-out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>lighter<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>copy<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>xor<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//js</span><br><span class="line">window.onload=function()&#123;</span><br><span class="line">  draw("source-over");</span><br><span class="line"></span><br><span class="line">  var buttons=document.getElementById("buttons").getElementsByTagName("a");</span><br><span class="line">  for (var i=0; i<span class="tag">&lt;<span class="name">buttons.length;</span> <span class="attr">i</span>++) &#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">buttons</span>[<span class="attr">i</span>]<span class="attr">.onclick</span>=<span class="string">function()</span> &#123;</span></span><br><span class="line"><span class="tag">      <span class="attr">draw</span>(<span class="attr">this.text</span>);</span></span><br><span class="line"><span class="tag">      <span class="attr">return</span> <span class="attr">false</span>;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">  &#125;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br><span class="line"><span class="tag"><span class="attr">function</span> <span class="attr">draw</span>(<span class="attr">compositeStyle</span>) &#123;</span></span><br><span class="line"><span class="tag">  <span class="attr">var</span> <span class="attr">canvas</span>=<span class="string">document.getElementById(</span>"<span class="attr">canvas</span>");</span></span><br><span class="line"><span class="tag">  <span class="attr">canvas.width</span>=<span class="string">1200;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">canvas.height</span>=<span class="string">800;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">var</span> <span class="attr">context</span>=<span class="string">canvas.getContext(</span>"<span class="attr">2d</span>");</span></span><br><span class="line"><span class="tag">  <span class="attr">context.clearRect</span>(<span class="attr">0</span>, <span class="attr">0</span>, <span class="attr">canvas.width</span>, <span class="attr">canvas.height</span>);</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">context.font</span>=<span class="string">"bold 40px Arial"</span>;</span></span><br><span class="line"><span class="tag">  <span class="attr">context.textAlign</span>=<span class="string">"center"</span>;</span></span><br><span class="line"><span class="tag">  <span class="attr">context.textBaseline</span>=<span class="string">"middle"</span>;</span></span><br><span class="line"><span class="tag">  <span class="attr">context.fillStyle</span>=<span class="string">"#058"</span>;</span></span><br><span class="line"><span class="tag">  <span class="attr">context.fillText</span>("<span class="attr">globalCompositeOperation</span>=<span class="string">" + compositeStyle, canvas.width/2, 60);</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">  context.fillStyle="</span><span class="attr">blue</span>";</span></span><br><span class="line"><span class="tag">  <span class="attr">context.fillRect</span>(<span class="attr">300</span>, <span class="attr">150</span>, <span class="attr">500</span>, <span class="attr">500</span>);</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">context.globalCompositeOperation</span>=<span class="string">compositeStyle;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">context.fillStyle</span>=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="tag">  <span class="attr">context.beginPath</span>();</span></span><br><span class="line"><span class="tag">  <span class="attr">context.moveTo</span>(<span class="attr">700</span>, <span class="attr">250</span>);</span></span><br><span class="line"><span class="tag">  <span class="attr">context.lineTo</span>(<span class="attr">1000</span>, <span class="attr">750</span>);</span></span><br><span class="line"><span class="tag">  <span class="attr">context.lineTo</span>(<span class="attr">400</span>, <span class="attr">750</span>);</span></span><br><span class="line"><span class="tag">  <span class="attr">context.closePath</span>();</span></span><br><span class="line"><span class="tag">  <span class="attr">context.fill</span>();</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>clip()</strong><br>从原始画布中剪切任意形状和尺寸。一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。您也可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。我们来做一个类似管中窥豹的效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.fillStyle=<span class="string">"black"</span>;</span><br><span class="line">  context.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.arc(<span class="number">400</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">  context.fillStyle=<span class="string">"#fff"</span>;</span><br><span class="line">  context.fill();</span><br><span class="line">  context.clip();</span><br><span class="line"></span><br><span class="line">  context.font=<span class="string">"bold 150px Arial"</span>;</span><br><span class="line">  context.textAlign=<span class="string">"center"</span>;</span><br><span class="line">  context.textBaseline=<span class="string">"middle"</span>;</span><br><span class="line">  context.fillStyle=<span class="string">"#058"</span>;</span><br><span class="line">  context.fillText(<span class="string">"CANVAS"</span>, canvas.width/<span class="number">2</span>, canvas.height/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>非零环绕原则</strong><br>我们可以利用非零环绕原则制作一些图形中部的镂空效果，这里虽然可以使用覆盖白色图形的方式实现，但是这样实现不了内部的阴影效果。另外，非零环绕原则在拓扑学应用的非常广，不懂的小伙伴们可以自行百度，系统的学习一下。我们现在来制作一个带有阴影的圆环效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">  canvas.width = <span class="number">800</span>;</span><br><span class="line">  canvas.height = <span class="number">600</span>;</span><br><span class="line">  <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  context.fillStyle = <span class="string">"#FFF"</span>;</span><br><span class="line">  context.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">  context.shadowColor = <span class="string">"#545454"</span>;</span><br><span class="line">  context.shadowOffsetX = <span class="number">5</span>;</span><br><span class="line">  context.shadowOffsetY = <span class="number">5</span>;</span><br><span class="line">  context.shadowBlur = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  context.arc(<span class="number">400</span>, <span class="number">300</span>, <span class="number">150</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span> ,<span class="literal">false</span>);</span><br><span class="line">  context.arc(<span class="number">400</span>, <span class="number">300</span>, <span class="number">230</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span> ,<span class="literal">true</span>);</span><br><span class="line">  context.fillStyle = <span class="string">"#00AAAA"</span>;</span><br><span class="line">  context.fill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>isPointInPath(x, y)</strong><br>如果指定的点(x,y)位于当前的路径中，则返回true；否则返回false。我们可以利用这个特性制作一些交互的效果，下面的例子当用户点击画布中的圆形小球时，该小球会变成红色的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> balls = [];</span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  canvas.width=<span class="number">800</span>;</span><br><span class="line">  canvas.height=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    balls.push(&#123;<span class="attr">x</span>: <span class="built_in">Math</span>.random()*canvas.width, <span class="attr">y</span>: <span class="built_in">Math</span>.random()*canvas.height, <span class="attr">r</span>: <span class="built_in">Math</span>.random()*<span class="number">50</span>+<span class="number">30</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw();</span><br><span class="line">  canvas.addEventListener(<span class="string">"mouseup"</span>, detect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;balls.length; i++) &#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(balls[i].x, balls[i].y, balls[i].r, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">    context.fillStyle=<span class="string">"#058"</span>;</span><br><span class="line">    context.fill();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detect</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = e.clientX - canvas.getBoundingClientRect().left;</span><br><span class="line">  <span class="keyword">var</span> y = e.clientY - canvas.getBoundingClientRect().top;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;balls.length; i++) &#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(balls[i].x, balls[i].y, balls[i].r, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">    <span class="keyword">if</span> (context.isPointInPath(x, y)) &#123;</span><br><span class="line">      context.fillStyle=<span class="string">"#f00"</span>;</span><br><span class="line">      context.fill();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>clearRect(x, y, width, height)</strong><br>用于清空一个矩形的内部元素，参数与rect()一致。这个方法之前我们在 globalCompositeOperation 这一小节用到过，我们在每一次绘制之前都清空一下画布中的元素。</p>
</li>
</ul>
<h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><p>前面我们介绍了如何在canvas上自定义绘制一些图形，那么如何在canvas上绘制一张已有的图片呢？有的朋友可能会想到用fillStyle那一小节的填充图像的方式，但是这样无法处理复杂问题，而且有点像是一种临时解决的办法。其实canvas有它自己专门绘制图像的方法drawImage()，它有三种用法，下面我们来一一介绍</p>
<ul>
<li><p><strong>drawImage(img, x, y)</strong><br>img表示绘制的图像源，它可以是HTMLImageElement, HTMLVideoElement, HTMLCanvasElement, CanvasRenderingContext2D, 或 ImageBitmap中任意一个对象，我们这一节主要是使用HTMLImageElement对象。后面两个参数表示在canvas画布的(x,y)位置处开始绘制图像</p>
</li>
<li><p><strong>drawImage(img, x, y, width, height)</strong><br>width和height表示绘制在画布上的图像的宽度和高度，其余参数和上面一致</p>
</li>
<li><p><strong>drawImage(img, sx, sy, swidth, sheight, x, y, width, height)</strong><br>sx和sy表示裁剪图像的起始点位置，swidth和sheight表示裁剪图像的宽度和高度，其余参数和上面一致。这里参数比较多，记住顺序就很好理解了，是先裁剪图像，再绘制图像</p>
</li>
</ul>
<p>简单改造一下W3C的实例
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>)</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>)</span><br><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image()</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  canvas.width = <span class="number">1300</span></span><br><span class="line">  canvas.height = <span class="number">800</span></span><br><span class="line"></span><br><span class="line">  image.src = <span class="string">"img.jpg"</span></span><br><span class="line">  image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    context.drawImage(image, <span class="number">100</span>, <span class="number">100</span>, (image.width<span class="number">-100</span>)/<span class="number">2</span>, (image.height<span class="number">-100</span>)/<span class="number">2</span>, <span class="number">200</span>, <span class="number">200</span>, (image.width<span class="number">-100</span>)/<span class="number">2</span>, (image.height<span class="number">-100</span>)/<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另外，canvas在图像处理中还有三个比较重要的方法：getImageData()、putImageData()、createImageData()  </p>
<ul>
<li><strong>getImageData(x, y, width, height)</strong><br>参数及含义与rect()一致，方法返回 ImageData 对象，对象拷贝了画布指定矩形的像素数据。这个 ImageData 对象中的 data 属性非常有用，它是一个数组，按顺序存储指定矩形中每个像素的 rgba 的值。例如下面的代码就会返回指定矩形的第一个像素的rgba的值：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imgData=ctx.getImageData(<span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">var</span> red=imgData.data[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> green=imgData.data[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> blue=imgData.data[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> alpha=imgData.data[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>当然聪明的你一定能想到使用4个数组把这个指定矩形每个像素的rgba的值封装起来，然后做一些类似 Photoshop 中模糊、反色、去色等非常有意思的操作，哈哈，赶紧动手试试吧！</p>
<ul>
<li><p><strong>putImageData(imgData, x, y, dirtyX, dirtyY, dirtyWidth, dirtyHeight)</strong><br>第一个参数是getImageData()方法返回的对象，(x,y)表示绘制的起始点的位置，(dirtyX, dirtyY)表示裁剪图像的起始点位置，(dirtyWidth, dirtyHeight)表示裁剪的图像宽度和高度，这里与drawImage()不同的是最终绘制的时候，x会和dirtyX叠加，y会和dirtyY叠加，下面的代码可以实现图像复制并粘贴的效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imageData = context1.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas1.width, canvas1.height)</span><br><span class="line">context2.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, canvas2.width, canvas2.height)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>createImageData(width,height) 或 createImageData(imageData)</strong><br>这个方法可以创建一个 ImageData 对象，前者可以指定宽度和高度，后者可以指定创建与imageData对象尺寸相同的新 ImageData 对象，此时并不会复制旧imageData的图像数据<br>用法呢，目前我只能想到利用循环设置或修改之前提到的ImageData对象的data属性的数据，从而绘制出一个新的图像</p>
</li>
</ul>
<p><a href="https://github.com/carolyicheng666/canvas-demo" target="_blank" rel="noopener"><strong style="color: red;">代码仓库</strong></a><br><!-- <strong style="color: red;">未完待续...</strong> --></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 高阶函数之 map、filter、reduce</title>
    <url>/2017/12/14/map-filter-reduce/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>月色如水，虽不如阳光般耀眼，但我的眼中却只有比那月色更可爱的你<br>心跳不知不觉中加速，嘴角也绷不住那溢出来的幸福笑意<br>月色确实醉人，却是因为你才显得更美</p>
<p><strong>月色真美</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><div class="note danger"><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p></div>
<p><strong>语法：</strong>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue, index, array</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// Return element for new_array </span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure></p>
<p><em>currentValue</em>表示arr当前元素的值<br><em>index</em>表示arr当前元素的索引<br><em>array</em>表示arr数组本身<br><em>thisArg</em>可选参数，表示执行回调函数时使用的 this 值<br>返回值是一个新数组，每个元素都是回调函数的结果</p>
<p>举个例子吧，比如说现在我们有这样一个需求：假设现在有一个事先准备好的数组，我们要产生一个新的数组，并且这个新的数组里每一个元素的值是之前准备好的数组元素值的平方，简单的说就是要实现 $f(x)=x^2$ 这样一个效果<br>我们先来看看原始的做法：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">  result.push(f(arr[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 map() 的做法：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> results = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>对比看看，使用 map() 函数大大简化了我们的代码，它把运算抽象到它内部的回调函数中，可能在上面的例子中优势并没有体现出来，但是一旦处理起复杂问题时，它的优势会变得非常明显</p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><div class="note danger"><p>filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </p></div>
<p><strong>语法：</strong>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.filter(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">element, index, array</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// Return true to keep the element</span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure></p>
<p>filter() 的所有参数及含义与 map() 的一致，唯一不同的是：filter() 把传入的函数依次作用于每个元素，然后根据返回值是 true 还是 false 决定保留还是丢弃该元素。刚入门的朋友可能会有疑惑，我举个例子吧：假设有一个对象数组，我想筛选出某一属性值作为新的数组，这种情况 filter() 是无法做到的，请看下面的代码
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">25</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// map 能正确执行，而 filter 不能正确执行</span></span><br><span class="line"><span class="keyword">var</span> result = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>照例还是举个例子：假设我们需要从一个数组筛选出其中所有的素数，并合并成一个新的数组<br>原始的写法：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_primes</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">Math</span>.sqrt(x); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x % i === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [], result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (get_primes(arr[i])) &#123;</span><br><span class="line">    result.push(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></p>
<p>使用 filter() 的写法：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">Math</span>.sqrt(e); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e % i === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><div class="note danger"><p>reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。</p></div>
<p><strong>语法：</strong>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">accumulator, currentValue, currentIndex, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Return accumulator</span></span><br><span class="line">&#125;[, initialValue]);</span><br></pre></td></tr></table></figure></p>
<p><em>accumulator</em>表示最后的返回值，它也是上一次调用回调时返回的累积值。有两种情况：第一种情况如果设置了 initialValue ，则第一次的 accumulator 值就为 initialValue，而 currentValue 的值就为数组的第一个值；第二种情况如果没有设置 initialValue ，则第一次的 accumulator 值为数组的第一个值，而 currentValue 的值就为数组的第二个值<br><em>currentValue</em>表示当前数组元素的值<br><em>currentIndex</em>表示当前数组元素的索引<br><em>array</em>表示arr数组本身<br><em>initialValue</em>可选参数，用作第一个调用回调函数的第一个参数的值，如果没有提供初始值，则将使用数组中的第一个元素。<strong>特别注意</strong>，在没有初始值的空数组上调用 reduce 将报错</p>
<p>这个函数就比较好理解了，我们来举个例子：求一个数组所有元素的积<br>原始写法：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">product</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">  result *= arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>reduce() 写法：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h2><p>1、将一个数字字符串变成一个整数数字，不能使用parseInt
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = s.split(<span class="string">''</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> +x &#125;).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x*<span class="number">10</span>+y &#125;);</span><br></pre></td></tr></table></figure></p>
<p>2、计算一个对象数组students中分数在10分以上的分数总和
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Nick"</span>, <span class="attr">grade</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">grade</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Julia"</span>, <span class="attr">grade</span>: <span class="number">19</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Nathalie"</span>, <span class="attr">grade</span>: <span class="number">9</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> aboveTenSum = students</span><br><span class="line">  .map(<span class="function"><span class="params">student</span> =&gt;</span> student.grade)</span><br><span class="line">  .filter(<span class="function"><span class="params">grade</span> =&gt;</span> grade &gt;= <span class="number">10</span>)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> prev + next, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aboveTenSum);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 设置 SSH Key</title>
    <url>/2017/12/12/github-ssh/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>只要记住你的名字<br>不管你在世界的哪个地方<br>我一定会，去见你  </p>
<p><strong>你的名字</strong></p>
</blockquote>
<a id="more"></a>
<p><strong>https 和 SSH 的区别：</strong><br>1、前者可以随意克隆github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。<br>2、https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p>
<p>那么如何在github上添加SSH key呢？</p>
<h2 id="步骤1：检查你电脑是否已经有-SSH-key"><a href="#步骤1：检查你电脑是否已经有-SSH-key" class="headerlink" title="步骤1：检查你电脑是否已经有 SSH key"></a>步骤1：检查你电脑是否已经有 SSH key</h2><p>在Git Bash中输入：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.sh</span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure></p>
<p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，命令下可能还会有其他文件，其中 .pub 文件是你的公钥，而另一个没有 .pub 后缀的同名文件则是你的私钥。如果找不到这样的文件（或者根本没有 .ssh 目录），那么你需要进入步骤2；如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3</p>
<h2 id="步骤2：创建一个-SSH-key"><a href="#步骤2：创建一个-SSH-key" class="headerlink" title="步骤2：创建一个 SSH key"></a>步骤2：创建一个 SSH key</h2><p>在Git Bash中输入：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></p>
<p><em>-t</em> —— 指定密钥类型，默认是 rsa ，可以省略<br><em>-C</em> —— 设置注释文字，比如邮箱<br><em>-f</em> —— 指定密钥文件存储文件名<br>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Generating public/private rsa key pair.</span><br><span class="line">$ Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure></p>
<p>如果不输入文件名直接回车，那么就会使用默认的文件名生成 id_rsa 和 id_rsa.pub 两个文件<br>接着又会提示你输入两次密码（该密码是你 push 文件的时候要输入的密码，而不是 github 登录的密码）<br>我们要用 SSH 方式 push 代码，当然是能简单就简单点，这里推荐不输入密码直接回车，以后 push 的时候就可以不用输密码
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">$ Enter same passphrase again:</span><br></pre></td></tr></table></figure></p>
<p>接下来，就会显示类似下面这种提示:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Your identification has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.</span><br><span class="line">$ Your public key has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line">$ The key fingerprint is:</span><br><span class="line">$ 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure></p>
<p>当你看到上面这段代码的时候，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。</p>
<h2 id="步骤3：在-Github-上添加SSH-key"><a href="#步骤3：在-Github-上添加SSH-key" class="headerlink" title="步骤3：在 Github 上添加SSH key"></a>步骤3：在 Github 上添加SSH key</h2><ul>
<li>拷贝 id_rsa.pub 文件的内容</li>
<li>网页打开自己的 github ，点击头像右边的小箭头，选择 Settings ，进入后再在左侧选择 SSH and GPG keys</li>
<li>点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称</li>
</ul>
<h2 id="步骤4：测试是否添加成功"><a href="#步骤4：测试是否添加成功" class="headerlink" title="步骤4：测试是否添加成功"></a>步骤4：测试是否添加成功</h2><p>在Git Bash中输入：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>
<p>会提示一段警告代码，类似下面这样：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">$ RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">$ Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p>
<p>这是正常的，你输入 yes 回车即可。然后会出现：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p>
<p>这样就设置成功了。随便找个以前的项目，按如上方法操作，可能会看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。  顺便说一句如何把一个项目从 https 换成 ssh ，把下面命令的 ssh-url 换成项目的即可：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin <span class="string">'ssh-url'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>可能有的朋友会担心如果在公司的电脑配置了，自己家里的电脑要怎么办，或者今后换了电脑、重装了系统要怎么办等等问题。  </p>
<p>这里首先得清楚公钥和私钥的关系，公钥就相当于大门，私钥就相当于钥匙，要相互匹配才能把门打开。比如说现在这种情况，公钥已经在步骤3中配置完成，而私钥则保存在我们的电脑上，默认路径是 <code>C:\Users\XXX\.ssh</code> 。   </p>
<p>网上大致提供了两种解决办法：一种是为大门再配一把钥匙；另一种是另外开一个大门，为其匹配一把钥匙。  </p>
<p>我尝试了第一种方法，卡在了步骤4的第一步，提示的是 <code>Permission denied (publickey).</code> 这说明这样做并不行，具体操作我不细说了，总之又是改文件名又是改配置的，就算成功了也很是麻烦。这里我采用的做法是，直接拷贝这个 <code>.ssh</code> 文件夹到另一电脑的相同目录下，也就是说让这两台电脑使用同一把钥匙开门，是不是很简单~  </p>
<p>第二种方法适合的是两台电脑不是同一种操作系统的情况，比如说你在公司用的是 Windows ，而你家里用的是 Linux 等等，当然设置的方式照着上面再来一遍就行了  </p>
<p>最后，还是要提醒一下，你要保证这两台电脑足够安全，不然要是某个家伙动了你的电脑，papapa把你的东西全删了，你哭都找不到人哭去……</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>transition</title>
    <url>/2017/12/08/transition/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>被拒绝是悲伤的，但是拒绝的一方也很痛苦</p>
<p><strong>纯白交响曲</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSS transitions 提供了一种在更改CSS属性时控制动画速度的方法。 其可以让属性变化成为一个持续一段时间的过程，而不是立即生效的。比如，将一个元素的颜色从白色改为黑色，通常这个改变是立即生效的，使用 CSS transitions 后该元素的颜色将逐渐从白色变为黑色，按照一定的曲线速率变化。这个过程可以自定义。</p>
<p>通常将两个状态之间的过渡称为隐式过渡（implicit transitions），因为开始与结束之间的状态由浏览器决定。</p>
<p>CSS transitions 可以决定哪些属性发生动画效果 (明确地列出这些属性)，何时开始 (设置 delay），持续多久 (设置 duration) 以及如何动画 (定义timing funtion，比如匀速地或先快后慢)。</p>
<h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>以下浏览器数据支持来自 <a href="https://caniuse.com/#search=transition" target="_blank" rel="noopener">Caniuse</a> ，可以看出支持程度相当好了</p>
<p>PC端浏览器：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Chrome</th>
<th style="text-align:center">Opera</th>
<th style="text-align:center">FireFox</th>
<th style="text-align:center">IE</th>
<th style="text-align:center">Edge</th>
<th style="text-align:center">Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">12.1</td>
<td style="text-align:center">16</td>
<td style="text-align:center">10</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">6.1</td>
</tr>
</tbody>
</table>
<p>移动端浏览器：</p>
<table>
<thead>
<tr>
<th style="text-align:center">iOS Safari</th>
<th style="text-align:center">Opera Mobile</th>
<th style="text-align:center">Opera Mini</th>
<th style="text-align:center">Android</th>
<th style="text-align:center">Android Chrome</th>
<th style="text-align:center">Android Firefox</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">7.1</td>
<td style="text-align:center">12.1</td>
<td style="text-align:center">12.1</td>
<td style="text-align:center">4.4</td>
<td style="text-align:center">62</td>
<td style="text-align:center">57</td>
</tr>
</tbody>
</table>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transition-property</span> <span class="selector-tag">transition-duration</span> <span class="selector-tag">transition-timing-function</span> <span class="selector-tag">transition-delay</span>;</span><br></pre></td></tr></table></figure>
<p><em>transition-property</em>：规定设置过渡效果的 CSS 属性的名称<br><em>transition-duration</em>：规定完成过渡效果的时间，单位是秒或毫秒<br><em>transition-timing-function</em>：规定速度效果的速度曲线<br><em>transition-delay</em>：定义过渡效果延迟时间，单位是秒或毫秒 </p>
<p>下面重点介绍property和timing-function这两个属性：</p>
<ul>
<li><p>transition-property<br>这个属性的取值有很多，建议到 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties" target="_blank" rel="noopener">MDN官方文档</a> 中查阅，经常用到的有color类的，width/height类的等等</p>
</li>
<li><p>transition-duration<br>这个属性严格意义上不能分类，官方单独将五种（不包含step类的）比较特别的单独命名出来，便于大家使用，分别是：<br><em>linear</em>：规定以相同速度开始至结束的过渡效果<br><em>ease</em>：规定慢速开始，然后变快，然后慢速结束的过渡效果<br><em>ease-in</em>：规定以慢速开始的过渡效果<br><em>ease-out</em>：规定以慢速结束的过渡效果<br><em>ease-in-out</em>：规定以慢速开始和结束的过渡效果<br>其实最基本的都是依赖于cubic-bezier(n,n,n,n)，n的取值范围是0到1</p>
</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>demo1:
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span>我是一个demo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.demo &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line">.demo:before &#123;</span><br><span class="line">  content: "";</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: -2px;</span><br><span class="line">  height: 2px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background: #4285f4;</span><br><span class="line">  transform: scale(0);</span><br><span class="line">  transition: all 0.3s;</span><br><span class="line">&#125;</span><br><span class="line">.demo:hover:before &#123;</span><br><span class="line">  transform: scale(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>demo2:
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"l-border border-line"</span>&gt;</span>我是另一个demo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.l-border&#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  padding: 16px 32px;</span><br><span class="line">  border: 1px solid #ebebeb;</span><br><span class="line">  -webkit-transition: all 0.6s ease-in;</span><br><span class="line">  transition: all 0.6s ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.l-border:hover&#123;</span><br><span class="line">  border: 1px solid #367dff;</span><br><span class="line">&#125;</span><br><span class="line">.border-line &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background: none;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  box-shadow: inset 0 0 0 0px transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.border-line::after,</span><br><span class="line">.border-line::before &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  content: '';</span><br><span class="line">  display: block;</span><br><span class="line">  width: 0;</span><br><span class="line">  height: 0;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  border: 1px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.border-line::after &#123;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  -webkit-transition: border-color 0s ease-in 0.8s, width 0.2s ease-in 0.6s, height 0.2s ease-in 0.4s;</span><br><span class="line">  transition: border-color 0s ease-in 0.8s, width 0.2s ease-in 0.6s, height 0.2s ease-in 0.4s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.border-line::before &#123;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  -webkit-transition: border-color 0s ease-in 0.4s, width 0.2s ease-in 0.2s, height 0.2s ease-in;</span><br><span class="line">  transition: border-color 0s ease-in 0.4s, width 0.2s ease-in 0.2s, height 0.2s ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.border-line:hover::after,</span><br><span class="line">.border-line:hover::before &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.border-line:hover::after &#123;</span><br><span class="line">  border-top-color: #367dff;</span><br><span class="line">  border-right-color: #367dff;</span><br><span class="line">  -webkit-transition: width 0.2s ease-out, height 0.2s ease-out 0.2s;</span><br><span class="line">  transition: width 0.2s ease-out, height 0.2s ease-out 0.2s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.border-line:hover::before &#123;</span><br><span class="line">  border-bottom-color: #367dff;</span><br><span class="line">  border-left-color: #367dff;</span><br><span class="line">  -webkit-transition: border-color 0s ease-out 0.4s, width 0.2s ease-out 0.4s, height 0.2s ease-out 0.6s;</span><br><span class="line">  transition: border-color 0s ease-out 0.4s, width 0.2s ease-out 0.4s, height 0.2s ease-out 0.6s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>demo3:
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"effect-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-line2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> XXX <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Read More<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.effect-box &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 250px;</span><br><span class="line">  height: 158px;</span><br><span class="line">  background: #367dff;</span><br><span class="line">  cursor: pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.effect-box img &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  opacity: .7;</span><br><span class="line">  -webkit-transition: opacity .35s;</span><br><span class="line">  transition: opacity .35s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.effect-box:hover img &#123;</span><br><span class="line">  opacity: .4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.effect-box .border-line2 &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  padding: 2em;</span><br><span class="line">  font-size: 1.25em;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-transform: uppercase;</span><br><span class="line">  -webkit-backface-visibility: hidden;</span><br><span class="line">  backface-visibility: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.effect-box .border-line2::after,</span><br><span class="line">.effect-box .border-line2::before &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 30px;</span><br><span class="line">  right: 30px;</span><br><span class="line">  bottom: 30px;</span><br><span class="line">  left: 30px;</span><br><span class="line">  content: '';</span><br><span class="line">  opacity: 0;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  -webkit-transition: opacity .35s, -webkit-transform .35s;</span><br><span class="line">  transition: opacity .35s, transform .35s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.effect-box .border-line2::before &#123;</span><br><span class="line">  border-top: 1px solid #fff;</span><br><span class="line">  border-bottom: 1px solid #fff;</span><br><span class="line">  -webkit-transform: scale(0, 1);</span><br><span class="line">  transform: scale(0, 1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.effect-box .border-line2::after &#123;</span><br><span class="line">  border-right: 1px solid #fff;</span><br><span class="line">  border-left: 1px solid #fff;</span><br><span class="line">  -webkit-transform: scale(1, 0);</span><br><span class="line">  transform: scale(1, 0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.effect-box:hover .border-line2::after,</span><br><span class="line">.effect-box:hover .border-line2::before &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">  -webkit-transform: scale(1);</span><br><span class="line">  transform: scale(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.effect-box .border-line2 p &#123;</span><br><span class="line">  padding: 4px 10px;</span><br><span class="line">  margin: 0;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  line-height: 1.0;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #fff;</span><br><span class="line">  letter-spacing: 1px;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  -webkit-transition: opacity .35s, -webkit-transform .35s;</span><br><span class="line">  transition: opacity .35s, transform .35s;</span><br><span class="line">  -webkit-transform: translate3d(0, 20px, 0);</span><br><span class="line">  transform: translate3d(0, 20px, 0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.effect-box:hover .border-line2 p &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">  -webkit-transform: translate3d(0, 0, 0);</span><br><span class="line">  transform: translate3d(0, 0, 0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" target="_blank" rel="noopener">MDN —— Using_CSS_transitions</a> </li>
<li><a href="http://www.w3school.com.cn/cssref/pr_transition.asp" target="_blank" rel="noopener">W3C —— CSS3 transition 属性</a></li>
<li><a href="https://juejin.im/post/592536c32f301e006b39059c" target="_blank" rel="noopener">掘金 —— transform，transition，animation 的混合使用——结业篇</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache 压力测试</title>
    <url>/2017/12/07/Apache-test/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>“如果下雨了，你愿意留下吗？”<br>“即使不下雨，我也在这里啊。”</p>
<p><strong>言叶之庭</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在项目上线之前，我们通常需要对其进行各种各样的测试，测试的分类有很多种：按开发阶段分为单元测试、集成测试、系统测试和验收测试；按是否运行分为静态测试和动态测试；按是否关系内部结构分为黑盒测试、白盒测试和灰盒测试；等等等等，不过这些对本文都不重要，今天我主要是来介绍一下，如何用 Apache 的 ab 工具对项目进行压力测试，顺带一提，压力测试属于黑盒测试中性能测试的其中一种。</p>
<h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><p>首先要使用 Apache ，必须要到 <a href="http://www.apache.org/dyn/closer.cgi" target="_blank" rel="noopener"><span style="color: red;">官网</span></a> 去下载安装才行，可是无奈官网链接也是各种打不开，好不容易进去了又找不到下载的地方，这里给个 <a href="http://httpd.apache.org/download.cgi" target="_blank" rel="noopener"><span style="color: red;">传送门</span></a> ，顺着指引一步步点击，下载完成后解压到想放的文件夹下，不用安装，直接进入文件夹下的 bin 目录下，执行命令
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ httpd -k install</span><br></pre></td></tr></table></figure></p>
<p>把 Apache 安装成 Windows 后台服务，中间如果遇到了什么问题，请自行百度</p>
<h2 id="参数释义"><a href="#参数释义" class="headerlink" title="参数释义"></a>参数释义</h2><p>假设上面的步骤都正常，那么就可以使用 ab 命令进行压力测试了<br>使用方式是在 Apache 的 bin 目录下执行：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./ab -n1000 -c10 url</span><br></pre></td></tr></table></figure></p>
<p>url换成想测试的项目的url即可，Linux用户不用加 <code>./</code> ，直接使用 ab 即可，这里有两个参数：-n1000表示总共有1000次请求，默认值是1；-c10表示请求的并发数是10，默认值同样是1<br>下面列出比较常用的参数及释义：  </p>
<table>
  <tr>
    <th width="20%" style="text-align:center;">参数</th>
    <th style="text-align:center;">含义</th>
  </tr>
  <tr>
    <td style="text-align:center;">-h</td>
    <td>显示帮助信息</td>
  </tr>
  <tr>
    <td style="text-align:center;">-V</td>
    <td>查看版本号</td>
  </tr>
  <tr>
    <td style="text-align:center;">-c</td>
    <td>并发用户数</td>
  </tr>
  <tr>
    <td style="text-align:center;">-n</td>
    <td>总请求数</td>
  </tr>
  <tr>
    <td style="text-align:center;">-C</td>
    <td>请求cookie，用法 “cookie_name=value”, 可重复</td>
  </tr>
  <tr>
    <td style="text-align:center;">-d</td>
    <td>不显示”percentage served within XX [ms] table”</td>
  </tr>
  <tr>
    <td style="text-align:center;">-H</td>
    <td>增加额外的请求头</td>
  </tr>
  <tr>
    <td style="text-align:center;">-i</td>
    <td>用HEAD请求代替GET</td>
  </tr>
  <tr>
    <td style="text-align:center;">-k</td>
    <td>启用Http keepalive功能</td>
  </tr>
  <tr>
    <td style="text-align:center;">-v</td>
    <td>显示详细信息  “-v4”  4或更大值会显示头信息，”-v3” 3或更大值可以显示响应代码(404，200等)，2或更大值可以显示警告和其他信息 </td>
  </tr>
  <tr>
    <td style="text-align:center;">-w</td>
    <td>以html格式输出结果</td>
  </tr>
  <tr>
    <td style="text-align:center;">-t</td>
    <td>超时时间，所有请求的最大执行时间，默认没有限制</td>
  </tr>
</table>

<p>更多的参数及释义请查阅官网的 API ，<a href="http://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener"><span style="color: red;">传送门</span></a>，注意自己的 Apache 版本</p>
<h2 id="执行压力测试"><a href="#执行压力测试" class="headerlink" title="执行压力测试"></a>执行压力测试</h2><p>现在我们用 Nodejs 简单跑一个服务
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-Type'</span>: <span class="string">'text-Plain'</span>&#125;);</span><br><span class="line">	res.write(<span class="string">'Hello Nodejs'</span>);</span><br><span class="line">	res.end();</span><br><span class="line">&#125;)</span><br><span class="line">.listen(<span class="number">2017</span>);</span><br></pre></td></tr></table></figure></p>
<p>然后执行命令对其进行压力测试，注意 url 后要多加一个<code>/</code>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./ab -n1000 -c10 http://localhost:2017</span><br></pre></td></tr></table></figure></p>
<p>我们来看一下输出的内容，每个字段的意思我写在注释中方便对照查看
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1796539 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line"></span><br><span class="line">/* 服务器名称 */</span><br><span class="line">Server Software:</span><br><span class="line">/* url主机名称 */</span><br><span class="line">Server Hostname:        localhost</span><br><span class="line">/* 端口号 */</span><br><span class="line">Server Port:            2017</span><br><span class="line"></span><br><span class="line">/* url中绝对路径 */</span><br><span class="line">Document Path:          /</span><br><span class="line">/* http相应数据的正文长度 */</span><br><span class="line">Document Length:        12 bytes</span><br><span class="line"></span><br><span class="line">/* 并发用户数，即我们用-c设置的参数 */</span><br><span class="line">Concurrency Level:      10</span><br><span class="line">/* 所有请求处理完花费的时间 */</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   0.177 seconds</span><br><span class="line">/* 总请求数，即我们用-n设置的参数 */</span><br><span class="line">Complete requests:      1000</span><br><span class="line">/* 失败的请求数 */</span><br><span class="line">Failed requests:        0</span><br><span class="line">/* http响应头和正文的总和 */</span><br><span class="line">Total transferred:      113000 bytes</span><br><span class="line">/* 相应正文的总和 */</span><br><span class="line">HTML transferred:       12000 bytes</span><br><span class="line">/* 每秒处理请求数，即吞吐量 */</span><br><span class="line">Requests per second:    5649.53 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">/* 用户平均等待时间 */</span><br><span class="line">Time per request:       1.770 [ms] (mean)</span><br><span class="line">/* 服务器平均处理时间 */</span><br><span class="line">Time per request:       0.177 [ms] (mean, across all concurrent requests)</span><br><span class="line">/* 每秒从服务器获取的数据长度 */</span><br><span class="line">Transfer rate:          623.43 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.5      0      16</span><br><span class="line">Processing:     0    2   3.6      0      16</span><br><span class="line">Waiting:        0    2   3.6      0      16</span><br><span class="line">Total:          0    2   3.6      0      16</span><br><span class="line"></span><br><span class="line">/* 每个请求处理时间的分布 */</span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%      0</span><br><span class="line">  66%      1</span><br><span class="line">  75%      2</span><br><span class="line">  80%      2</span><br><span class="line">  90%      5</span><br><span class="line">  95%     16</span><br><span class="line">  98%     16</span><br><span class="line">  99%     16</span><br><span class="line"> 100%     16 (longest request)</span><br><span class="line">Finished 1000 requests</span><br></pre></td></tr></table></figure></p>
<p>上面的分布说明：其中 80% 的用户响应时间小于 2 毫秒， 90% 的用户响应时间小于 5 毫秒， 最大的响应时间小于 16 毫秒  </p>
<h2 id="特别提醒"><a href="#特别提醒" class="headerlink" title="特别提醒"></a>特别提醒</h2><p>通过上面的学习我们就可以愉快的玩耍了，记得千万不要随便拿别人的网站来测试哦~</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 选择器</title>
    <url>/2017/12/06/css-selectors/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>我要用什么样的速度，才能与你相遇</p>
<p><strong>秒速五厘米</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSS 选择器一般分成三大类：基本选择器、属性选择器和伪类选择器。</p>
<h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ul>
<li><p>通配符选择器 ( * )<br>通配符选择器是用来选择所有元素，也可以选择某个元素下的所有元素</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">* &#123; ... &#125;</span><br><span class="line">.class * &#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>元素选择器 ( element )<br>元素选择器用来选择文档的元素，如html,body,div,span等等</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">html &#123; ... &#125;</span><br><span class="line">div &#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类选择器 ( .className )<br>给html中的元素定义类名，就能用类选择器选中该元素，并为其指定样式了，使用方式是在类名前面加 “.”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.class1 &#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>id选择器 ( #id )<br>给html中的元素定义id名，就能用id选择器选中该元素，并为其指定样式了，使用方式是在类名前面加 “#”<br><strong>注意</strong>，id与类的区别是：id是唯一的，而class可以不唯一  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#id1 &#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后代选择器 ( element1 element2 )
选择某元素的所有后代元素，举个例子：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">div span &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>  选中的就是div下所有的span元素</p>
</li>
<li><p>子元素选择器 ( element1 &gt; element2 )<br>选择某元素的所有子元素，不敢包括其子元素内的子元素（即只存在父子关系的元素），举个例子：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">div&gt;span &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>  选中的是div下的span元素，不包括span下的span元素</p>
</li>
<li><p>相邻兄弟元素选择器 ( element1 + element2 )<br>选择紧跟在某元素后的兄弟元素，它们具有一个相同的父元素，举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">li+li &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>  这里选中的就是第二和第三个li元素</p>
</li>
<li><p>通用兄弟元素选择器 ( element1 ~ element2 )<br>选择跟在某元素后的所有兄弟元素，它们具有一个相同的父元素，可参考相邻兄弟元素选择器</p>
</li>
<li><p>群组选择器 ( element1, element2, …, elementN )<br>群组选择器可以把相同样式的元素写在一起，用 “,” 隔开</p>
</li>
</ul>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul>
<li><p>element[attribute]<br>选中拥有某个属性的所有元素，举个例子：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a[href] &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>  选中的就是有href属性的a元素，也可以多属性选择，像下面这样：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-attr">[title]</span></span><br></pre></td></tr></table></figure>
<p>  选中的就是同时有href和title属性的a元素</p>
</li>
<li><p>element[attribute = “value”]<br>选中某个属性值为value的所有元素，注意要<strong>完全匹配</strong>才行，举个例子：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a[href="#"] &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>  选中的就是href值为#的a元素，其它值都不能被选中</p>
</li>
<li><p>element[attribute ~= “value”]<br>选中某个属性值包含value的所有元素，类似于模糊匹配，注意与上一个的区别</p>
</li>
<li><p>element[attribute ^= “value”]<br>选中某个属性值是以value开头的所有元素，注意可以<strong>不等于</strong>value，与上面两个有本质区别</p>
</li>
<li><p>element[attribute $= “value”]<br>选中某个属性值是以value结尾的所有元素，知道正则匹配的一定对^和$不陌生</p>
</li>
<li><p>element[attribute *= “value”]<br>选中某个属性值是包含子串value的所有元素</p>
</li>
<li><p>element[attribute |= “value”]<br>选中某个属性值是等于value或者以value-开头的所有元素，<strong>注意是value-开头</strong></p>
</li>
</ul>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类选择器的使用方式都是在元素后面加“:”，再跟上伪类的名称，下面逐一介绍  </p>
<ul>
<li>动态伪类<br>:link —— 选择未访问链接<br>:visited —— 选择已访问链接<br>:hover —— 鼠标位于元素上时<br>:focus —— 获取焦点（即选中）时<br>:active —— 激活链接（键盘space，鼠标点击）</li>
</ul>
<p>这里特别说明一下，一定要按上面的顺序设置，不然可能会带来不必要的麻烦，关于最后两个选择器，有困扰的朋友可以看看 <a href="https://stackoverflow.com/questions/1677990/what-is-the-difference-between-focus-and-active" target="_blank" rel="noopener">what-is-the-difference-between-focus-and-active</a>，也就是说:active是在:focus后触发，实际上的代码是:focus:active，所以整个动作是：点击时是先:focus，同时发生:active，而松开后变回:focus。</p>
<ul>
<li><p>状态伪类<br>这些类主要针对的是html里的form元素，例如input，option等等<br>:enabled —— 选择器匹配每个已启用的元素<br>:disabled —— 选择器匹配每个被禁用的元素<br>:checked —— 选择器匹配每个已被选中的 input 元素（只用于单选按钮和复选框），目前只有 Opera 支持 :checked 选择器。</p>
</li>
<li><p>nth选择器<br>:first-child —— 选择某个元素的第一个子元素<br>:last-child —— 选择某个元素的最后一个子元素<br>:nth-child() —— 选择某个元素的一个或多个特定的子元素<br>:nth-last-child() —— 选择某个元素的一个或多个特定的子元素，从这个元素的最后一个子元素开始算<br>:nth-of-type() —— 选择指定的元素<br>:nth-last-of-type() —— 选择指定的元素，从元素的最后一个开始计算<br>:first-of-type —— 选择一个上级元素下的第一个同类子元素<br>:last-of-type —— 选择一个上级元素的最后一个同类子元素<br>:only-child —— 选择的元素是它的父元素的唯一一个了元素<br>:only-of-type —— 选择一个元素是它的上级元素的唯一一个相同类型的子元素<br>:empty —— 选择的元素里面没有任何内容  </p>
</li>
</ul>
<p>我个人建议使用后半部分 <code>*-of-type</code> 这种，会比前半部分的 <code>*-child</code> 好很多，初学者可能总是会碰到写了样式，却不生效的情况，W3C 上的例子规避了一些我们经常遇到的问题和习惯性的错误，建议看看张鑫旭老师的<a href="http://www.zhangxinxu.com/wordpress/2011/06/css3%E9%80%89%E6%8B%A9%E5%99%A8nth-child%E5%92%8Cnth-of-type%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%BC%82/" target="_blank" rel="noopener">CSS3选择器:nth-child和:nth-of-type之间的差异</a>，这篇文章也许能解答大多数人的疑惑<br>顺便介绍一个github上大佬写的库——<a href="https://github.com/LukyVj/family.scss/" target="_blank" rel="noopener">family.scss</a>，很容易上手</p>
<ul>
<li><p>否定选择器<br>:not(selector) —— 选择器匹配非指定元素/选择器的每个元素</p>
</li>
<li><p>伪元素<br>:first-letter —— 选择器用于选取指定选择器的首字母<br>:first-line —— 选择器用于选取指定选择器的首行<br>:before —— 选择器在被选元素的内容前面插入内容，需要使用 content 属性来指定要插入的内容<br>:after —— 选择器在被选元素的内容后面插入内容，需要使用 content 属性来指定要插入的内容<br>:lang —— 选择器用于选取带有以指定值开头的 lang 属性的元素<br>::selection —— 选择器匹配被用户选取的部分，只能向 ::selection 选择器应用少量 CSS 属性：color、background、cursor 以及 outline。<br>:target —— 选择器可用于选取当前活动的目标元素  </p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">W3C——CSS 选择器参考手册</a></li>
<li><a href="https://www.w3cplus.com/css3/pseudo-class-selector" target="_blank" rel="noopener">w3cplus——CSS3选择器 伪类选择器</a></li>
<li><a href="https://stackoverflow.com/questions/1677990/what-is-the-difference-between-focus-and-active" target="_blank" rel="noopener">stackoverflow——what-is-the-difference-between-focus-and-active</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2011/06/css3%E9%80%89%E6%8B%A9%E5%99%A8nth-child%E5%92%8Cnth-of-type%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%BC%82/" target="_blank" rel="noopener">张鑫旭——CSS3选择器:nth-child和:nth-of-type之间的差异</a></li>
<li><a href="https://github.com/LukyVj/family.scss/" target="_blank" rel="noopener">family.scss</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid 布局</title>
    <url>/2017/12/05/grid/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>我们总是在注意错过太多，却不注意自己拥有多少</p>
<p><strong>未闻花名</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CSS Grid 布局是 CSS 中最强大的布局系统。与 flexbox 的一维布局系统不同，CSS Grid 布局是一个二维布局系统，也就意味着它可以同时处理列和行。通过将 CSS 规则应用于 <strong>父元素</strong> (成为 Grid Container 网格容器)和其 <strong>子元素</strong>（成为 Grid Items 网格项），你就可以轻松使用 Grid(网格) 布局。</p>
<h2 id="浏览器支持程度"><a href="#浏览器支持程度" class="headerlink" title="浏览器支持程度"></a>浏览器支持程度</h2><p>截至今日，许多浏览器都提供了对 CSS Grid 的原生支持，而且无需加浏览器前缀：Chrome（包括 Android ），Firefox，Edge，Safari（包括iOS）和 Opera 。但是 IE 10和11需要额外写代码特殊支持。以下浏览器支持数据来自 <a href="https://caniuse.com/#search=grid" target="_blank" rel="noopener">Caniuse</a> ，点击可查看更多的细节。</p>
<p>PC端浏览器：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Chrome</th>
<th style="text-align:center">Opera</th>
<th style="text-align:center">FireFox</th>
<th style="text-align:center">IE</th>
<th style="text-align:center">Edge</th>
<th style="text-align:center">Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">57</td>
<td style="text-align:center">44</td>
<td style="text-align:center">52</td>
<td style="text-align:center">10*</td>
<td style="text-align:center">16</td>
<td style="text-align:center">10.1</td>
</tr>
</tbody>
</table>
<p>移动端浏览器：</p>
<table>
<thead>
<tr>
<th style="text-align:center">iOS Safari</th>
<th style="text-align:center">Opera Mobile</th>
<th style="text-align:center">Opera Mini</th>
<th style="text-align:center">Android</th>
<th style="text-align:center">Android Chrome</th>
<th style="text-align:center">Android Firefox</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10.3</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">62</td>
<td style="text-align:center">62</td>
<td style="text-align:center">57</td>
</tr>
</tbody>
</table>
<h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><p>grid 的一些属性包括命名都与 flex 十分类似，相信熟悉 flex 布局的朋友看一遍 grid 的 API 就能轻易上手，下面的介绍可能不会太详细，毕竟有一些属性的设置还是要符合前端人员的习惯，拐弯抹角的设置往往会给维护带来成倍的麻烦。</p>
<p>首先来看看 html 模板：
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>怎么样，是不是很干净，强迫症患者总算是舒服了。html就写成这样，我们不需要再做更改了，剩下的只需要写 CSS 样式，包括能让 item2 在 item1 前面，突破了html顺序所带来的瓶颈，是不是很酷！结构与样式分离一直是所有前端人推崇的，Grid(网格) 布局真正做到了这点，对于 CSS 来说是一个巨大的进步。</p>
<p>接下来我们就来梳理一下基本概念：</p>
<ul>
<li>网格容器(Grid Container)：如果把上面的 <code>wrapper</code> 类样式设置成 <code>display: grid</code>，那么它就是一个网格容器。</li>
<li>网格项(Grid Item)：网格容器下的所有子元素（注意，只有是网格容器父子关系的子元素，其它的都不算）。</li>
<li>网格线(Grid Line)：构成网格结构的分界线。</li>
<li>网格轨道(Grid Track)：两条相邻网格线之间的空间。</li>
<li>网格单元格(Grid Cell)：两个相邻的行和两个相邻的列网格线之间的空间。按照上面的代码来看就是每一个 item。</li>
<li>网格区域(Grid Area)： 可以由任意数量的 网格单元格(Grid Cell) 组成。</li>
</ul>
<p>我们再来了解一下基本属性，这里只做简要概括，不常用的就不详细说了，也许以后再补充进去吧。<br><strong style="color: red;font-size: 24px;">网格容器(Grid Container)</strong> 属性：</p>
<ul>
<li><p><strong>display</strong>  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid | inline-grid | subgrid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  这里有三个值，分别表示块级网格，内联网格，子网格（父级也是网格）</p>
</li>
<li><p><strong>grid-template-columns / grid-template-rows</strong>  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  这样设置就把上面6个item设置成了两行三列的、每项大小是100px*100px的网格，这里的值也可以是百分比，或者fr（表示等分剩余可用空间），当然还有用网格线名称设置的高级操作（不建议使用）。上面的代码由于都是相同的值，则可以像下面这样写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  显示效果是一样的。</p>
</li>
<li><p><strong>grid-template-areas</strong>  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: </span><br><span class="line">    <span class="string">" . | none | ..."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  这里有三个值，分别表示一个空的网格单元、不定义网格区域、指定的网格区域名称。还是举个例子吧：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">5px</span>;    </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">300px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">". a a ."</span></span><br><span class="line">    <span class="string">"b c d e"</span></span><br><span class="line">    <span class="string">". f f ."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: a;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ACF4B6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: b;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#FFE975</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item3</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: c;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#5DFFFA</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item4</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: d;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#E6B4FD</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item5</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: e;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#26DB0A</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item6</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: f;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#FCDCDD</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  复制到编辑器，然后浏览器打开看看效果就明白了，是不是很简单！</p>
</li>
<li><p><strong>grid-template</strong><br>用于定义 grid-template-rows ，grid-template-columns ，grid-template-areas 缩写 (shorthand) 属性。看了API，设置起来真的麻烦，我个人不建议这么写，还是分开写比较好，这里就不过多介绍了，有兴趣的自己去看 API 吧。</p>
</li>
<li><p><strong>grid-column-gap / grid-row-gap</strong><br>指定网格线(grid lines)的大小。你可以把它想象为设置列/行之间间距的宽度。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">grid-row-gap</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  上述设置把列间距设置为 10px，行间距设置为 15px。</p>
</li>
<li><p><strong>grid-gap</strong><br>grid-column-gap 和 grid-row-gap 的缩写语法，建议用此写法。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">15px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  第一个值是行间距，第二个值是列间距。也可以只写一个值，表示行间距和列间距相等。</p>
</li>
<li><p><strong>justify-items</strong><br>沿着 行轴线(row axis) 对齐 网格项(grid items) 内的内容，该值用于容器内的所有网格项。可以理解为所有网格项的水平对齐方式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">	<span class="attribute">justify-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  四个值分别表示左对齐，右对齐，中间对齐和填满整个网格宽度（默认）。</p>
</li>
<li><p><strong>align-items</strong><br>沿着 列轴线(column axis) 对齐 网格项(grid items) 内的内容，该值适用于容器内的所有网格项。可以理解为所有网格项的垂直对齐方式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">	<span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  四个值分别表示顶部对齐，底部对齐，垂直居中对齐和填满整个网格高度（默认）。</p>
</li>
<li><p><strong>justify-content</strong><br>有时，网格合计大小可能小于其 网格容器(grid container) 大小。 如果所有 网格项(grid items) 都使用像 px 这样的非灵活单位设置大小，在这种情况下，可以设置网格容器内的网格的对齐方式。 此属性沿着 行轴线(row axis) 对齐网格。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  特别说明一下后面三个：<br>  <em>space-around</em>：在每个网格项之间放置一个均匀的空间，左右两端放置一半的空间<br>  <em>space-between</em>：在每个网格项之间放置一个均匀的空间，左右两端没有空间<br>  <em>space-evenly</em>：在每个栅格项目之间放置一个均匀的空间，左右两端放置一个均匀的空间  </p>
</li>
<li><p><strong>align-content</strong>  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  与上面的情况类似，只是方向上的区别：
  <em>space-around</em>：在每个网格项之间放置一个均匀的空间，上下两端放置一半的空间<br>  <em>space-between</em>：在每个网格项之间放置一个均匀的空间，上下两端没有空间<br>  <em>space-evenly</em>：在每个栅格项目之间放置一个均匀的空间，上下两端放置一个均匀的空间  </p>
</li>
<li><p><strong>grid-auto-columns / grid-auto-rows</strong><br>指定任何自动生成的网格轨道(grid tracks)（又名隐式网格轨道）的大小。在你明确定位的行或列（通过  grid-template-rows / grid-template-columns），超出定义的网格范围时，隐式网格轨道被创建了。我看了一下例子，功能确实强大，但是超出网格范围依然有元素，实际情况几乎用不到，影响到外部元素的做法并不是很可取，在此我不展开讲这个，以后如果有实际情况遇到了，我再加进来。</p>
</li>
<li><p><strong>grid-auto-flow</strong><br>如果你有一些没有明确放置在网格上的网格项(grid items)，自动放置算法 会自动放置这些网格项。该属性控制自动布局算法如何工作。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row | column | row dense | column dense</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <em>row</em>：告诉自动布局算法依次填充每行，根据需要添加新行
  <em>column</em>：告诉自动布局算法依次填入每列，根据需要添加新列
  <em>dense</em>：告诉自动布局算法在稍后出现较小的网格项时，尝试填充网格中较早的空缺，注意，这可能导致你的网格项出现乱序，不建议使用。<br>  举个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">6</span>, <span class="number">60px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">30px</span>);</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item6</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  因为我们把 grid-auto-flow 设成了 row ，所以网格中未设置的item2、item3、item4和item5会在第一行。如果把 grid-auto-flow 设成了 column，则它们或按顺序垂直填充进前两列。</p>
</li>
<li><p><strong>grid</strong><br>这个属性是老大哥，可以设置所有以下属性的简写： grid-template-rows, grid-template-columns,  grid-template-areas, grid-auto-rows, grid-auto-columns, 和 grid-auto-flow 。它还将grid-column-gap 和 grid-column-gap设置为初始值，即使它们不可以通过grid属性显式地设置。恩，不建议使用。</p>
</li>
</ul>
<p><strong style="color: red;font-size: 24px;">网格项(Grid Items) </strong>属性</p>
<ul>
<li><p><strong>grid-column-start / grid-column-end / grid-row-start / grid-row-end</strong><br>这里推荐简写形式，请看下面</p>
</li>
<li><p><strong>grid-column / grid-row</strong><br>分别为 grid-column-start + grid-column-end 和 grid-row-start + grid-row-end 的缩写形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">  <span class="attribute">grid-row</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  这里设置方式有两种，两种都可以，前者用的比较多一些。<br>  <strong>注意</strong>，后面一个参数也可以省略：不加 <code>span</code> 表示占据一个网格轨道；加 <code>span</code> 表示跨越几个网格轨道，可以看例子中的 <code>wrapper2</code></p>
</li>
<li><p><strong>grid-area</strong><br>为网格项提供一个名称，以便可以 被使用网格容器 grid-template-areas 属性创建的模板进行引用。 另外，这个属性可以用作grid-row-start + grid-column-start + grid-row-end +  grid-column-end 的缩写。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: &lt;name&gt; | &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>justify-self</strong><br>沿着 行轴线(row axis) 对齐 网格项 内的内容，此值适用于单个网格项内的内容。可以理解为所有网格项的水平对齐方式，设置方式可参考 justify-items 。</p>
</li>
<li><p><strong>align-self</strong><br>沿着 列轴线(row axis) 对齐 网格项 内的内容，此值适用于单个网格项内的内容。可以理解为所有网格项的垂直对齐方式，设置方式可参考 align-items 。</p>
</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>如果上面的概念都很清楚了，下面的例子应该不难看懂，部分已经在上面出现过。
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Grid<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">    font-size: 20px;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-gap: 5px;    </span><br><span class="line">    grid-template-columns: repeat(12, 1fr);</span><br><span class="line">    grid-template-rows: 50px 350px 50px;</span><br><span class="line">    grid-template-areas:</span><br><span class="line">      ". h h h h h h h h h h ."</span><br><span class="line">      "m m c c c c c c c c c c"</span><br><span class="line">      ". f f f f f f f f f f .";</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.header</span> &#123;</span></span><br><span class="line">    grid-area: h;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.menu</span> &#123;</span></span><br><span class="line">    grid-area: m;</span><br><span class="line">    line-height: 350px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    grid-area: c;</span><br><span class="line">    line-height: 350px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">    grid-area: f;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line">    padding-top: 50px;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-gap: 5px;</span><br><span class="line">    grid-template-columns: repeat(3, 100px);</span><br><span class="line">    grid-template-rows: repeat(3, 100px);</span><br><span class="line">    justify-content: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span> <span class="selector-class">.item1</span> &#123;</span></span><br><span class="line">    grid-column: 1 / 3;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span> <span class="selector-class">.item3</span> &#123;</span></span><br><span class="line">    grid-row: 2 / 4;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span> <span class="selector-class">.item4</span> &#123;</span></span><br><span class="line">    grid-column: 2 / 4;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper2</span> &#123;</span></span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(12, 1fr);</span><br><span class="line">    grid-template-rows: 40px 100px 40px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper2</span> <span class="selector-class">.item1</span>, <span class="selector-class">.wrapper2</span> <span class="selector-class">.item4</span> &#123;</span></span><br><span class="line">    grid-column: span 12;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper2</span> <span class="selector-class">.item2</span> &#123;</span></span><br><span class="line">    grid-column: span 4;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper2</span> <span class="selector-class">.item3</span> &#123;</span></span><br><span class="line">    grid-column: span 8;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span> <span class="attr">style</span>=<span class="string">"background-color: #ACF4B6;"</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span> <span class="attr">style</span>=<span class="string">"background-color: #FFE975;"</span>&gt;</span>MENU<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"background-color: #5DFFFA;"</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span> <span class="attr">style</span>=<span class="string">"background-color: #E6B4FD;"</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span> <span class="attr">style</span>=<span class="string">"background-color: #ACF4B6;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span> <span class="attr">style</span>=<span class="string">"background-color: #FFE975;"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span> <span class="attr">style</span>=<span class="string">"background-color: #5DFFFA;"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item4"</span> <span class="attr">style</span>=<span class="string">"background-color: #E6B4FD;"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item5"</span> <span class="attr">style</span>=<span class="string">"background-color: #26DB0A;"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item6"</span> <span class="attr">style</span>=<span class="string">"background-color: #FCDCDD;"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span> <span class="attr">style</span>=<span class="string">"background-color: #ACF4B6;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span> <span class="attr">style</span>=<span class="string">"background-color: #FFE975;"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span> <span class="attr">style</span>=<span class="string">"background-color: #5DFFFA;"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item4"</span> <span class="attr">style</span>=<span class="string">"background-color: #E6B4FD;"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 正则表达式</title>
    <url>/2017/12/04/RegExp/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>七言秋雨似情长,宫影空明人不往。<br>智绝情深不由伤,音泣相思泪以裳。</p>
<p><strong>中二病也要谈恋爱</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><p>正则表达式是用于匹配字符串中字符组合的模式。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串，简而言之，正则表达式就是对字符串执行模式匹配的强大工具。在 JavaScript 中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。</p>
<h2 id="如何创建正则表达式"><a href="#如何创建正则表达式" class="headerlink" title="如何创建正则表达式"></a>如何创建正则表达式</h2><p>你可以使用以下两种方法之一构建一个正则表达式：</p>
<p>第一种，使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   /pattern/flags </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/ab+c/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/^[a-zA-Z]+[0-9]*\W?_$/gi</span>;</span><br></pre></td></tr></table></figure></p>
<p>在加载脚本后，正则表达式字面值提供正则表达式的编译。当正则表达式保持不变时，使用此方法可获得更好的性能。</p>
<p>第二种，调用RegExp对象的构造函数，如下所示：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    new RegExp(pattern [, flags])</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"ab+c"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^[a-zA-Z]+[0-9]*\W?_$/</span>, <span class="string">"gi"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^[a-zA-Z]+[0-9]*\\W?_$"</span>, <span class="string">"gi"</span>);</span><br></pre></td></tr></table></figure></p>
<p>使用构造函数提供正则表达式的运行时编译。使用构造函数，当你知道正则表达式模式将会改变，或者你不知道模式，并从另一个来源，如用户输入。</p>
<p><strong>参数说明：</strong></p>
<ul>
<li>参数 pattern 是一个字符串，指定了正则表达式的模式或其他正则表达式。</li>
<li>参数 attributes 是一个可选的字符串，包含属性 “g”、”i” 和 “m”，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 m 属性。如果 pattern 是正则表达式，而不是字符串，则必须省略该参数。</li>
</ul>
<p><span style="color: red;">PS: 单看概念容易晕，最好结合具体的例子。</span></p>
<h2 id="特殊字符-规则"><a href="#特殊字符-规则" class="headerlink" title="特殊字符(规则)"></a>特殊字符(规则)</h2><p>字符类别（Character Classes）</p>
<table>
  <tr>
    <th width="20%" style="text-align:center;">字符</th>
    <th style="text-align:center;">含义</th>
  </tr>
  <tr>
    <td style="text-align:center;">.</td>
    <td>(点号，小数点) 匹配任意单个字符，但是行结束符除外：\n \r \u2028 或 \u2029。在字符集中，点( . )失去其特殊含义，并匹配一个字面点( . )。需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符。<br>例如，/.y/ 匹配 “yes make my day” 中的 “my” 和 “ay”，但是不匹配 “yes”。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\d</td>
    <td>匹配任意阿拉伯数字。等价于[0-9]。<br>例如，/\d/ 或 /[0-9]/ 匹配 “B2 is the suite number.” 中的 ‘2’。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\D</td>
    <td>匹配任意一个不是阿拉伯数字的字符。等价于[^0-9]。<br>例如，/\D/ 或 /[^0-9]/ 匹配 “B2 is the suite number.” 中的 ‘B’。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\w</td>
    <td>匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]。<br>例如，/\w/ 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\W</td>
    <td>匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 [^A-Za-z0-9_]。<br>例如，/\W/ 或 /[^A-Za-z0-9_]/ 匹配 “50%” 中的 ‘%’。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\s</td>
    <td>匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。等价于 [ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​​\u202f\u205f​ \u3000]。<br>例如 /\s\w*/ 匹配 “foo bar” 中的 ‘ bar’。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\S</td>
    <td>匹配一个非空白符。等价于 [^ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​\u202f\u205f​\u3000]。<br>例如，/\S\w*/ 匹配 “foo bar” 中的 ‘foo’。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\t</td>
    <td>匹配一个水平制表符（tab）</td>
  </tr>
  <tr>
    <td style="text-align:center;">\r</td>
    <td>匹配一个回车符（carriage return）</td>
  </tr>
  <tr>
    <td style="text-align:center;">\n</td>
    <td>匹配一个换行符（linefeed）</td>
  </tr>
  <tr>
    <td style="text-align:center;">\v</td>
    <td>匹配一个垂直制表符（vertical tab）</td>
  </tr>
  <tr>
    <td style="text-align:center;">\f</td>
    <td>匹配一个换页符（form-feed）</td>
  </tr>
  <tr>
    <td style="text-align:center;">[\b]</td>
    <td>匹配一个退格符（backspace）（不要与 \b 混淆）</td>
  </tr>
  <tr>
    <td style="text-align:center;">\0</td>
    <td>匹配一个 NUL 字符。不要在此后面跟小数点。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\cX</td>
    <td>X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。<br>例如，/\cM/ 匹配字符串中的 control-M。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\xhh</td>
    <td>匹配编码为 hh （两个十六进制数字）的字符。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\uhhhh</td>
    <td>匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\</td>
    <td>对于那些通常被认为字面意义的字符来说，表示下一个字符具有特殊用处，并且不会被按照字面意义解释。<br>例如 /b/ 匹配字符 ‘b’。在 b 前面加上一个反斜杠，即使用 /\b/，则该字符变得特殊，以为这匹配一个单词边界。<br>或对于那些通常特殊对待的字符，表示下一个字符不具有特殊用途，会被按照字面意义解释。<br>例如，* 是一个特殊字符，表示匹配某个字符 0 或多次，如 /a*/ 意味着 0 或多个 “a”。 为了匹配字面意义上的 * ，在它前面加上一个反斜杠，例如，/a\*/匹配 ‘a*‘。</td>
  </tr>
</table>

<p>字符集合（Character Sets）</p>
<table>
  <tr>
    <th width="20%" style="text-align:center;">字符</th>
    <th style="text-align:center;">含义</th>
  </tr>
  <tr>
    <td style="text-align:center;">[xyz]</td>
    <td>一个字符集合，也叫字符组。匹配集合中的任意一个字符。你可以使用连字符’-‘指定一个范围。<br>例如，[abcd] 等价于 [a-d]，匹配”brisket”中的’b’和”chop”中的’c’。</td>
  </tr>
  <tr>
    <td style="text-align:center;">[^xyz]</td>
    <td>一个反义或补充字符集，也叫反义字符组。也就是说，它匹配任意不在括号内的字符。你也可以通过使用连字符 ‘-‘ 指定一个范围内的字符。<br>例如，[^abc] 等价于 [^a-c]。 第一个匹配的是 “bacon” 中的’o’ 和 “chop” 中的 ‘h’。</td>
  </tr>
</table>

<p>边界（Boundaries）</p>
<table>
  <tr>
    <th width="20%" style="text-align:center;">字符</th>
    <th style="text-align:center;">含义</th>
  </tr>
  <tr>
    <td style="text-align:center;">^</td>
    <td>匹配输入开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。<br>例如，/^A/ 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。</td>
  </tr>
  <tr>
    <td style="text-align:center;">$</td>
    <td>匹配输入结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。<br>例如，/t$/ 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\b</td>
    <td>匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 [\b] 混淆）<br>例如，/\bno/ 匹配 “at noon” 中的 “no”，/ly\b/ 匹配 “possibly yesterday.” 中的 “ly”。</td>
  </tr>
  <tr>
    <td style="text-align:center;">\B</td>
    <td>匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。<br>例如，/\Bon/ 匹配 “at noon” 中的 “on”，/ye\B/ 匹配 “possibly yesterday.” 中的 “y</td>
  </tr>
</table>

<p>分组（Grouping）与反向引用（back references）</p>
<table>
  <tr>
    <th width="20%" style="text-align:center;">字符</th>
    <th style="text-align:center;">含义</th>
  </tr>
  <tr>
    <td style="text-align:center;">(x)</td>
    <td>匹配 x 并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。<br>例如，/(foo)/ 匹配且捕获 “foo bar.” 中的 “foo”。被匹配的子字符串可以在结果数组的元素 [1], …, [n] 中找到，或在被定义的 RegExp 对象的属性 $1, …, $9 中找到。捕获组（Capturing groups）有性能惩罚。如果不需再次访问被匹配的子字符串，最好使用非捕获括号（non-capturing parentheses）</td>
  </tr>
  <tr>
    <td style="text-align:center;">\n</td>
    <td>n 是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。<br>例如，/apple(,)\sorange\1/ 匹配 “apple, orange, cherry, peach.” 中的 “apple,orange,”。</td>
  </tr>
  <tr>
    <td style="text-align:center;">(?:x)</td>
    <td>匹配 x 不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。匹配项不能够从结果数组的元素 [1], …, [n] 或已被定义的 RegExp 对象的属性 $1, …, $9 再次访问到。</td>
  </tr>
</table>

<p>数量词（Quantifiers）</p>
<table>
  <tr>
    <th width="20%" style="text-align:center;">字符</th>
    <th style="text-align:center;">含义</th>
  </tr>
  <tr>
    <td style="text-align:center;">x*</td>
    <td>匹配前面的模式 x 0或多次。<br>例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</td>
  </tr>
  <tr>
    <td style="text-align:center;">x+</td>
    <td>匹配前面的模式 x 1或多次。等价于 {1,}。<br>例如，/a+/ 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</td>
  </tr>
  <tr>
    <td style="text-align:center;">x*?、x+?</td>
    <td>像上面的 * 和 + 一样匹配前面的模式 x，然而匹配是最小可能匹配<span style="color: red;">（即非贪婪模式，不加?就是贪婪模式）</span>。<br>例如，/“.*?”/ 匹配 ‘“foo” “bar”‘ 中的 ‘“foo”‘，而 * 后面没有 ? 时匹配 ‘“foo” “bar”‘。</td>
  </tr>
  <tr>
    <td style="text-align:center;">x?</td>
    <td>匹配前面的模式 x 0或1次。<br>例如，/e?le?/ 匹配 “angel” 中的 “el”，”angle” 中的 “le”。如果在数量词 *、+、? 或 {}, 任意一个后面紧跟该符号（?），会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。</td>
  </tr>
  <tr>
    <td style="text-align:center;">x?</td>
    <td>匹配前面的模式 x 0或1次。<br>例如，/e?le?/ 匹配 “angel” 中的 “el”，”angle” 中的 “le”。如果在数量词 *、+、? 或 {}, 任意一个后面紧跟该符号（?），会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。</td>
  </tr>
  <tr>
    <td style="text-align:center;">x(?=y)、x(?!y)</td>
    <td>这两个放在断言（Assertions）里面讲</td>
  </tr>
  <tr>
    <td style="text-align:center;">x|y</td>
    <td>匹配 x 或 y <br>例如，/green|red/ 匹配 “green apple” 中的 ‘green’，”red apple.” 中的 ‘red’。</td>
  </tr>
  <tr>
    <td style="text-align:center;">x{n}</td>
    <td>n 是一个正整数。前面的模式 x 连续出现 n 次时匹配。<br>例如，/a{2}/ 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</td>
  </tr>
  <tr>
    <td style="text-align:center;">x{n,}</td>
    <td>n 是一个正整数。前面的模式 x 连续出现至少 n 次时匹配。<br>例如，/a{2,}/ 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</td>
  </tr>
  <tr>
    <td style="text-align:center;">x{n,m}</td>
    <td>n 和 m 为正整数。前面的模式 x 连续出现至少 n 次，至多 m 次时匹配。<br>例如，/a{1,3}/ 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</td>
  </tr>
</table>

<p>断言（Assertions）</p>
<table>
  <tr>
    <th width="20%" style="text-align:center;">字符</th>
    <th style="text-align:center;">含义</th>
  </tr>
  <tr>
    <td style="text-align:center;">x(?=y)</td>
    <td>仅匹配被y跟随的x。<br>举个例子，/Jack(?=Sprat)/，如果”Jack”后面跟着sprat，则匹配之。/Jack(?=Sprat|Frost)/ ，如果”Jack”后面跟着”Sprat”或者”Frost”，则匹配之。但是，”Sprat” 和”Frost” 都不会在匹配结果中出现。</td>
  </tr>
  <tr>
    <td style="text-align:center;">x(?!y)</td>
    <td>仅匹配不被y跟随的x。<br>举个例子，/\d+(?!\.)/ 只会匹配不被点（.）跟随的数字。/\d+(?!\.)/.exec(‘3.141’) 匹配”141”，而不是”3.141”</td>
  </tr>
</table>



<h2 id="对象方法-使用"><a href="#对象方法-使用" class="headerlink" title="对象方法(使用)"></a>对象方法(使用)</h2><p>正则表达式可以被用于 RegExp 的exec和test方法以及 String 的match、replace、search和split方法。</p>
<table>
  <tr>
    <th width="20%" style="text-align:center;">方法</th>
    <th style="text-align:center;">描述</th>
  </tr>
  <tr>
    <td style="text-align:center;">exec</td>
    <td>一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）。<a href="http://www.w3school.com.cn/jsref/jsref_exec_regexp.asp" target="_blank" rel="noopener">传送门</a></td>
  </tr>
  <tr>
    <td style="text-align:center;">test</td>
    <td>一个在字符串中测试是否匹配的RegExp方法，它返回true或false。<a href="http://www.w3school.com.cn/jsref/jsref_test_regexp.asp" target="_blank" rel="noopener">传送门</a></td>
  </tr>
  <tr>
    <td style="text-align:center;">match</td>
    <td>一个在字符串中执行查找匹配的String方法，它返回一个数组或者在未匹配到时返回null。<a href="http://www.w3school.com.cn/jsref/jsref_match.asp" target="_blank" rel="noopener">传送门</a></td>
  </tr>
  <tr>
    <td style="text-align:center;">search</td>
    <td>一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。<a href="http://www.w3school.com.cn/jsref/jsref_search.asp" target="_blank" rel="noopener">传送门</a></td>
  </tr>
  <tr>
    <td style="text-align:center;">replace</td>
    <td>一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。<a href="http://www.w3school.com.cn/jsref/jsref_replace.asp" target="_blank" rel="noopener">传送门</a></td>
  </tr>
  <tr>
    <td style="text-align:center;">split</td>
    <td>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。<a href="http://www.w3school.com.cn/jsref/jsref_split.asp" target="_blank" rel="noopener">传送门</a></td>
  </tr>
</table>

<p>这些方法详细的说明和使用方式建议点击表格中的传送门，到 W3C 中查看。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noopener">MDN文档——RegExp</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN文档——正则表达式</a></li>
<li><a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" target="_blank" rel="noopener">W3C——JavaScript RegExp 对象</a></li>
<li><a href="http://www.imooc.com/learn/706" target="_blank" rel="noopener">慕课网——JavaScript正则表达式</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>RegExp</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime 常用快捷键</title>
    <url>/2017/12/01/sublime-shortcut/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>不做做看怎么知道<br>并不需要什么理由<br>只是因为想做所以去做<br>自己真正想做的事情<br>不就是这样开始的吗</p>
<p><strong>Love Live!</strong></p>
</blockquote>
<a id="more"></a>
<p>按住 <code>Shift+Ctrl</code> 然后按 <code>←</code> 或 <code>→</code> 可快速选中一行中的某一部分，相当于双击鼠标选中。<br>输入文字 -&gt; 光标移到文字末尾 -&gt; 按住 <code>Shift+Ctrl+←</code> 便会选中文字 -&gt; 操作：删除、注释（ <code>Ctrl+/</code> 、<code>Ctrl+Shift+/</code>）等等。<br><code>Ctrl+Shift+↑↓</code>：上下移动一行。<br><code>Ctrl+Shift+D</code>：快速复制光标所在的一整行，并复制到该行之前。<br><code>Ctrl+Shift+M</code>：选中花括号里面的全部内容不包括{}。<br><code>Ctrl+Shift+A</code>：选中标签内的内容不包括标签，继续按会继续往上一层选择。<br><code>Ctrl+Shift+[</code>：折叠代码<br><code>Ctrl+Shift+]</code>：展开代码<br><code>Ctrl+Shift+K</code>：删除整行<br><code>Ctrl+Shift+P</code>：打开命令面板<br><code>Ctrl+P</code>：搜索项目中的文件<br><code>Ctrl+G</code>：跳转到第几行<br><code>Ctrl+W</code>：关闭当前打开文件<br><code>Ctrl+Shift+W</code>：关闭所有打开文件<br><code>Ctrl+Shift+V</code>：粘贴并格式化<br><code>Ctrl+D</code>：选择单词，重复可增加选择下一个相同的单词<br><code>Ctrl+L</code>：选择行，重复可依次增加选择下一行<br><code>Ctrl+Shift+L</code>：选择多行<br><code>Ctrl+Shift+Enter</code>：在当前行前插入新行<br><code>Ctrl+X</code>：删除当前行<br><code>Ctrl+M</code>：跳转到对应括号<br><code>Ctrl+U</code>：软撤销，撤销光标位置<br><code>Ctrl+J</code>：选择标签内容<br><code>Ctrl+F</code>：查找内容<br><code>Ctrl+Shift+F</code>：查找并替换<br><code>Ctrl+H</code>：替换<br><code>Ctrl+R</code>：前往 method<br><code>Ctrl+N</code>：新建窗口<br><code>Ctrl+K+B</code>：开关侧栏<br><code>Ctrl+Shift+M</code>：选中当前括号内容，重复可选着括号本身<br><code>Ctrl+F2</code>：设置/删除标记<br><code>Ctrl+/</code>：注释当前行<br><code>Ctrl+Shift+/</code>：当前位置插入注释<br><code>Ctrl+Shift+A</code>：选择当前标签前后，修改标签用的<br><code>F11</code>：全屏<br><code>Shift+F11</code>：全屏免打扰模式，只编辑当前文件<br><code>Alt+F3</code>：选择所有相同的词<br><code>Alt+.</code>：闭合标签<br><code>Alt+Shift+数字</code>：分屏显示<br><code>Alt+数字</code>：切换打开第N个文件<br>按<code>Ctrl</code>，依次点击或选取，可需要编辑的多个位置  </p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>Zeal + Sublime 快速查阅API文档</title>
    <url>/2017/11/28/zeal/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>远的不是距离，而是次元啊</p>
<p><strong>路人女主的养成方法</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><div class="note danger"><p>Zeal is an offline documentation browser for software developers.</p></div>
<p>一个简单的离线 <code>API</code> 文档浏览器</p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><a href="https://zealdocs.org/" target="_blank" rel="noopener">下载地址</a></h2><p>面向的用户是 <code>Windows/Linux/macOS</code> ，<code>Windows</code> 难民可以使用，开不开心 ^O^!!
macOS用户建议使用 <code>Dash</code> ，<a href="https://kapeli.com/dash" target="_blank" rel="noopener"><span style="color: red;">下载地址</span></a></p>
<h2 id="下载API"><a href="#下载API" class="headerlink" title="下载API"></a><a href="https://zealdocs.org/usage.html" target="_blank" rel="noopener">下载API</a></h2><div class="note danger"><p>After installing Zeal go to <code>Tools -&gt; Docsets</code> to browse and download docsets.</p></div>
<p>挑选自己平时用到的 <code>API</code> 下载即可</p>
<h2 id="Sublime安装Zeal"><a href="#Sublime安装Zeal" class="headerlink" title="Sublime安装Zeal"></a>Sublime安装Zeal</h2><ul>
<li><p><code>Ctrl + Shift + P</code>，输入 <code>zeal</code> 并选择 <code>Zeal</code> 插件安装。</p>
</li>
<li><p>安装完成后，在 <code>Preference -&gt; Package Settings -&gt; Zeal -&gt; Settings User</code> 中加入如下字段：
“zeal_command”: “Zeal安装路径/zeal.exe”
如：”zeal_command”: “C:/Program Files/Zeal/zeal.exe”
<strong>注意</strong>，从目录复制过来的路径要把反斜杠改成斜杠</p>
</li>
<li><p>使用方式：<code>F1</code> 和 <code>Shift + F1</code></p>
<div class="note danger"><p>F1 - Open Zeal documentation for current/selected word.
Shift + F1 - Open Zeal search bar. </p></div>
</li>
<li><p>在Zeal内搜索方式是：</p>
<div class="note danger"><p><code>string</code> will search all docsets for string
<code>python:string</code> will search only docsets related to Python for string</p></div>
</li>
<li><p>如果你使用的是别的编辑器，例如 Atom、Vim等等，<a href="https://zealdocs.org/usage.html" target="_blank" rel="noopener"><span style="color: red;">这里</span></a> 也可以找到安装配置的方法</p>
</li>
</ul>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><ul>
<li>下载的 API 文档存放在 <code>C:\Users\XXX\AppData\Local\Zeal\Zeal\docsets</code> 目录下</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
        <tag>Zeal</tag>
      </tags>
  </entry>
  <entry>
    <title>width、clientWidth、scrollWidth 和 offsetWidth</title>
    <url>/2017/11/23/client-scroll-offset/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前路</p>
<p><strong>四月是你的谎言</strong></p>
</blockquote>
<a id="more"></a>
<p>话不多说，扯那些个概念没啥用，直接上例子，对着盒模型看公式，一看就懂：
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">textarea &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  line-height: 300px;</span><br><span class="line">  resize: none;</span><br><span class="line">  margin: 30px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 10px solid red;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'t'</span>&gt;</span>123123213211232132132123132123132111111<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'t'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'width: '</span> + getComputedStyle(obj).width);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'clientWidth: '</span> + obj.clientWidth + <span class="string">'px'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'scrollWidth: '</span> + obj.scrollWidth + <span class="string">'px'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'offsetWidth: '</span> + obj.offsetWidth + <span class="string">'px'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们假定预设元素的宽度为 <code>width0</code>，在上面代码中就是 <code>200px</code>，那么上面的四个值就可以用如下公式表示：
<div class="note info"><p>width = width0 - 滚动条宽度</p>
<p>clientWidth = width + padding</p>
<p>scrollWidth = clientWidth + 溢出部分宽度</p>
<p>offsetWidth = width0 + padding + border</p></div></p>
<p>换个通俗点的解释吧：
<div class="note info"><p>width = content内容的宽度</p>
<p>clientWidth = 白色可见区域宽度</p>
<p>scrollWidth = 白色区域总宽度（可见 + 不可见）</p>
<p>offsetWidth = 白色可见区域宽度 + 滚动条宽度 + 红色框框宽度</p></div></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>一切都准时</title>
    <url>/2017/11/23/on-time/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>人生不只有眼前的苟且，还有诗和远方</p>
<p><strong>高晓松</strong></p>
</blockquote>
<a id="more"></a>
<center>New York is 3 hours ahead of California &nbsp; 纽约时间比加州时间早三个小时</center>
<center>but it does not make California slow &nbsp; 但加州时间并没有变慢</center>
<center>Someone graduated at the age of 22 &nbsp; 有人22岁就毕业了</center>
<center>but waited 5 years before securing a good job &nbsp; 但等了五年才找到好的工作</center>
<center>Someone became a CEO at 25 &nbsp; 有人25岁就当上CEO</center>
<center>and died at 50 &nbsp; 却在50岁去世</center>
<center>While another became a CEO at 50 &nbsp; 也有人迟到50岁才当上CEO</center>
<center>and lived to 90 years &nbsp; 然后活到90岁</center>
<center>Someone is still single &nbsp; 有人依然单身</center>
<center>while someone else got married &nbsp; 同时也有人已婚</center>
<center>Obama retires at 55 &nbsp; 奥巴马55岁就退休</center>
<center>but Trump starts at 70 &nbsp; 川普70岁才开始当总统</center>
<center>Absolutely everyone in this world works based on their Time Zone &nbsp; 世上每个人本来就有自己的发展时区</center>
<center>People around you might seem to go ahead of you &nbsp; 身边有些人看似走在你前面</center>
<center>some might seem to be behind you &nbsp; 也有人看似走在你后面</center>
<center>But everyone is running their own RACE, in their own TIME &nbsp; 但其实每个人在自己的时区有自己的步程</center>
<center>Don’t envy them or mock them &nbsp; 不用嫉妒或嘲笑他们</center>
<center>They are in their TIME ZONE, and you are in yours &nbsp; 他们都在自己的时区里，你也是</center>
<center>Life is about waiting for the right moment to act &nbsp; 生命就是等待正确的行动时机</center>
<center>So, RELAX &nbsp; 所以，放轻松</center>
<center>You’re not LATE &nbsp; 你没有落后</center>
<center>You’re not EARLY &nbsp; 你没有领先</center>
<center>You are very much ON TIME, and in your TIME ZONE Destiny set up for you</center>
<center>在命运为你安排的属于自己的时区里，一切都准时</center>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title>从 Compass 到 Autoprefixer</title>
    <url>/2017/11/20/compass-to-autoprefixer/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>一个人若没有怀揣过大的梦想，也就无法到达向往的地方</p>
<p><strong>冰上的尤里</strong></p>
</blockquote>
<a id="more"></a>
<p>自从学会了 Sass 之后，就觉得再也离不开 Sass 了。但是，Sass 和原生 CSS 一样，也要面临着 CSS3 浏览器前缀的问题。众所周知，在 CSS3 发布之后，由于各大浏览器的兼容性，我们往往需要对 CSS3 属性加上相应的浏览器前缀，该属性才能才特定的浏览器中生效。</p>
<p>现在主要流行的浏览器内核主要有：
<div class="note info"><p>Trident内核：主要代表为IE浏览器<br>Gecko内核：主要代表为Firefox<br>Presto内核：主要代表为Opera<br>Webkit内核：产要代表为Chrome和Safari</p></div></p>
<p>而这些不同内核的浏览器，CSS3属性（部分需要添加前缀的属性）对应需要添加不同的前缀：
<div class="note info"><p>Trident内核：前缀为-ms<br>Gecko内核：前缀为-moz<br>Presto内核：前缀为-o<br>Webkit内核：前缀为-webkit</p></div></p>
<p>这个时候我们就需要来思考一下，如何才能避免加前缀的麻烦呢？</p>
<h2 id="Compass"><a href="#Compass" class="headerlink" title="Compass"></a><a href="http://compass-style.org/" target="_blank" rel="noopener">Compass</a></h2><div class="note danger"><p>Compass is an open-source CSS Authoring Framework.<br>Compass uses Sass.</p></div>
<p>因为 Sass 并不能被浏览器识别，要编译成普通的 CSS 才行，Compass 使用 Sass 的 mixin 为 CSS3 需要带前缀的属性定制了一些 mixin，这使得 Compass 在编译 Sass 时能够自动加上浏览器前缀。
当然，除 CSS3 之外，Compass 还有很多特殊定制，主要分为六大模块：
<div class="note info"><p><a href="http://compass-style.org/reference/compass/reset/" target="_blank" rel="noopener">reset模块</a><br><a href="http://compass-style.org/reference/compass/css3/" target="_blank" rel="noopener">CSS3模块</a><br><a href="http://compass-style.org/reference/compass/layout/" target="_blank" rel="noopener">layout模块</a><br><a href="http://compass-style.org/reference/compass/typography/" target="_blank" rel="noopener">typography模块</a><br><a href="http://compass-style.org/reference/compass/utilities/" target="_blank" rel="noopener">utilities模块</a><br><a href="http://compass-style.org/reference/compass/helpers/" target="_blank" rel="noopener">helpers模块</a></p></div></p>
<p>具体的内容我就不一一细说了，主要还是这些模块中定制的 mixin 用到的真的不多，有些 mixin 甚至有点鸡肋，实在是找不到哪个地方能够用到。我在 Compass 官网的 <a href="http://compass-style.org/CHANGELOG/" target="_blank" rel="noopener">更新日志</a> 中找到了问题所在，Compass 的最新版本是 Version 1.0.1 ，但这却是2014年8月19号更新的，也就是说截至今日，它已经三年多没有再更新过了。三年以来，对于很多 CSS3 的属性，随着浏览器的更新早已不再需要添加私有前缀了，这时候我们必须要换掉 Compass 了，不再更新的 Compass 已经过时而被淘汰了。</p>
<h2 id="Autoprefixer"><a href="#Autoprefixer" class="headerlink" title="Autoprefixer"></a><a href="https://www.npmjs.com/package/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a></h2><div class="note danger"><p>PostCSS plugin to parse CSS and add vendor prefixes to CSS rules using values from Can I Use. It is recommended by Google and used in Twitter and Taobao.</p></div>
<p>用SASS、LESS、Stylus或者其他类似的工具都是属于 CSS 的预处理器（Preprocessor），而 Autoprefixer 则是一种后处理器（Postprocessor）。它是直接针对 CSS 本身来进行处理，不需要任何额外的语法。因为它是在 CSS 代码产生之后才进行后续处理。<br>Autoprefixer 会分析 CSS 代码，并且根据 Can I Use 所提供的资料来决定要加上哪些浏览器前缀，而你要做的事情就是把他加入自己的自动化开发工具中（如Grunt或Gulp），然后就可以直接使用 W3C 的标准来写 CSS，不需要加上任何浏览器的私有前缀。<br>这样任务就得到了分解，拿 Gulp 来举例：<br>第一步：我们需要将原始的 Sass 文件编译成普通的 CSS 文件（使用 <a href="https://github.com/dlmanning/gulp-sass" target="_blank" rel="noopener">gulp-sass</a>）<br>第二步：我们再将编译后的 CSS 文件后处理成带有浏览器私有前缀的 CSS 文件（使用 <a href="https://github.com/sindresorhus/gulp-autoprefixer" target="_blank" rel="noopener">gulp-autoprefixer</a>）</p>
<p>关于PostCSS，gulp-autoprefixer的作者是这么描述的：
<div class="note info"><p>If you use other PostCSS based tools, like cssnano, you may want to run them together using gulp-postcss instead of gulp-autoprefixer. It will be faster, as the CSS is parsed only once for all PostCSS based tools, including Autoprefixer.</p></div></p>
<p>这段话大致是说，如果你只使用autoprefixer这一个插件，那么就用gulp-autoprefixer；如果还要使用别的插件，那就使用 PostCSS ，将其他插件写在它里面，速度更快，写法像下面这样：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> postcss    = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</span><br><span class="line">  <span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/**/*.css'</span>)</span><br><span class="line">    .pipe( sourcemaps.init() )</span><br><span class="line">    .pipe( postcss([ <span class="built_in">require</span>(<span class="string">'precss'</span>), <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>) ]) )</span><br><span class="line">    .pipe( sourcemaps.write(<span class="string">'.'</span>) )</span><br><span class="line">    .pipe( gulp.dest(<span class="string">'build/'</span>) );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>当然，还得 PostCSS 支持才行，比如它对于语法（syntax）这一项的描述：
<div class="note warning"><p>PostCSS can transform styles in any syntax, not just CSS. If there is not yet support for your favorite syntax, you can write a parser and/or stringifier to extend PostCSS.</p>
<ul>
<li>postcss-scss allows you to work with SCSS (but does not compile SCSS to CSS).</li>
<li>postcss-sass allows you to work with Sass (but does not compile Sass to CSS).</li>
<li>postcss-less allows you to work with Less (but does not compile LESS to CSS).</li>
</ul></div></p>
<p>重点是括号里面的话，哈哈，看看就好。<br>我个人比较喜欢一个东西只干一件事，不太喜欢集成式的思维逻辑，毕竟分开干活，查 Bug 非常快，pipe的精髓就是如此，上一级的输出作为下一级的输入，谁输出的有问题，一目了然。上面提到的两个步骤，用两个 pipe 就可以搞定，当然更极端一点，可以把它们分为两个单独的 task 分开执行，注意执行顺序即可。</p>
<p>随着技术不断发展，CSS3 属性前缀的问题已不再是一个问题。如今你完全可以忽略各个 CSS3 属性要不要加前缀，要加哪些前缀，而只需要专心去写你的代码。把这些烦人的事情交给 Autoprefixer 去处理。当然，越到后面，或许我们都不需要使用任何前缀。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Sass</tag>
        <tag>Compass</tag>
        <tag>Autoprefixer</tag>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text 3 + LiveReload实时刷新网页</title>
    <url>/2017/11/17/LiveReload/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>不是因为有翅膀所以能飞翔，而是因为想要飞翔，所以才有翅膀</p>
<p><strong>加速世界</strong></p>
</blockquote>
<a id="more"></a>
<p>&emsp;&emsp;之前的文章《一些常用的gulp插件整理》中最后提到了 <code>browser-sync</code> 插件，这是一个浏览器同步测试的插件，我们只要修改了插件监听的文件，网页就会实时刷新。但是如果我们只是写一个小项目，不用搞这么大的工程，不用什么 <code>Grunt</code>、<code>Gulp</code> 来构建，那么我们就需要来思考下如何实时监听了。</p>
<p>&emsp;&emsp;于是，我找了到这么一款插件 —— Live​Reload。它需要在 Sublime Text 3 和浏览器里一起安装使用。下面介绍这个插件的安装、配置及使用方法。</p>
<p>&emsp;&emsp;首先，在 Sublime Text 3 中使用 <code>ctrl+shift+p</code> 打开 <code>Package Control</code> ，输入 <code>Package Control: Install Package</code> 并回车后，搜索 <code>LiveReload</code> 插件，敲下回车安装此插件。
&emsp;&emsp;当然，如果由于种种原因一直打不开插件列表，没办法搜索插件，没关系，我们可以到作者的 <a href="https://github.com/Grafikart/ST3-LiveReload" target="_blank" rel="noopener"><span style="color: red;">Github项目地址下载</span></a>，安装方式是在 <code>Sublime</code> 工具栏 <code>Preferences &gt; Browser Packages...</code> 打开 <code>Packages</code> 目录，解压下载的插件压缩包到这个目录下，并重命名为 <code>LiveReload</code> 。
<strong>注意</strong>，插件作者的介绍中明确指出：
<div class="note danger"><p>A web browser page reloading plugin for the Sublime Text 3 editor.</p></div>
还停留在远古版本的 Sublime Text 2 的老铁们悲剧了…</p>
<p>&emsp;&emsp;其次，在浏览器中扩展程序中搜索 <code>LiveReload</code> 插件并安装，也可以直接外部搜索下载后添加到扩展程序中。
安装完之后，选择管理扩展程序，把 <code>LiveReload</code> 这个插件的<strong>允许访问网址文件</strong>这一选项勾选上。</p>
<p>&emsp;&emsp;最后，如何使用呢？
&emsp;&emsp;我们在 Sublime Text 3 中使用 <code>ctrl+shift+p</code> 打开 <code>Package Control</code>，输入 <code>LiveReload: Enable/disable plugins</code> 并回车，选择 <code>Enable - Simple Reload</code> 这一选项，完成配置后打开我们的 <code>html</code> 文件，并点击浏览器地址栏旁边的 <code>LiveReload</code> 按钮，这时看到按钮变成了实心的，于是我们就可以愉快的玩耍了。</p>
<p>&emsp;&emsp;总结一下，<code>LiveReload</code> 是一款非常棒的插件，可以在浏览器中实时刷新页面，这样就可以做到保存就能立马看到效果。省去配置本地环境和消除 <code>Grunt</code> 和 <code>Gulp</code>工具的局限性，操作起来也非常简单。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的一些简写技巧</title>
    <url>/2017/11/15/javascript-shorthand/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>逃避有两种：我们把有目的的逃避叫做飞翔，把没有目的的逃避叫做漂浮。</p>
<p><strong>空之境界</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> answer;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  answer = <span class="string">'greater than 10'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  answer = <span class="string">'less than 10'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> answer = x &gt; <span class="number">10</span> ? <span class="string">'greater than 10'</span> : <span class="string">'less than 10'</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p>这里原文有点问题，下面代码能执行的条件是如果 <code>variable1</code> 不存在必须先声明，我们知道，在 <code>javascript</code> 中已存在或声明后的变量如果不被赋值，那么它的值应该是 <code>undefined</code> ，所以下面的代码简化前后输出 <code>variable2</code> 的值一定不相等，应该去掉 <code>variable1 !== undefined</code> 这一判断项，或者直接改成注释中内容即可：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (variable1 !== <span class="literal">null</span> || variable1 !== <span class="literal">undefined</span> || variable1 !== <span class="string">''</span>) &#123; <span class="comment">// if (variable)</span></span><br><span class="line">  <span class="keyword">let</span> variable2 = variable1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> variable2 = <span class="string">'new'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> variable2 = variable1  || <span class="string">'new'</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>在函数开始之前声明变量是很好的习惯。在同时声明多个变量时，用下面的方法可以节省大量的时间和空间：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="keyword">let</span> y;</span><br><span class="line"><span class="keyword">let</span> z = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x, y, z=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (likeJavaScript === <span class="literal">true</span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">if</span> (a !== <span class="literal">true</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (likeJavaScript) &#123; ... &#125;</span><br><span class="line"><span class="keyword">if</span> (!a) &#123; ... &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>如果不依赖外部库（如 <code>jQuery</code> 或 <code>lodash</code>），下面的小技巧会非常有用：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allImgs.length; i++)</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> allImgs)</span><br></pre></td></tr></table></figure></p>
<p>forEach遍历数组简写：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a["</span> + index + <span class="string">"] = "</span> + element);</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>].forEach(logArrayElements);</span><br><span class="line"><span class="comment">// logs:</span></span><br><span class="line"><span class="comment">// a[0] = 2</span></span><br><span class="line"><span class="comment">// a[1] = 5</span></span><br><span class="line"><span class="comment">// a[2] = 9</span></span><br></pre></td></tr></table></figure></p>
<h2 id="十进制数"><a href="#十进制数" class="headerlink" title="十进制数"></a>十进制数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e4</span>; i++) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// All the below will evaluate to true</span></span><br><span class="line"><span class="number">1e0</span> === <span class="number">1</span>;</span><br><span class="line"><span class="number">1e1</span> === <span class="number">10</span>;</span><br><span class="line"><span class="number">1e2</span> === <span class="number">100</span>;</span><br><span class="line"><span class="number">1e3</span> === <span class="number">1000</span>;</span><br><span class="line"><span class="number">1e4</span> === <span class="number">10000</span>;</span><br><span class="line"><span class="number">1e5</span> === <span class="number">100000</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><p><code>ES6</code> 提供了一个很简单的办法，来分配属性的对象。如果属性名与 <code>key</code> 名相同，则可以使用简写：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>:x, <span class="attr">y</span>:y &#125;;</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; x, y &#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sayHello = <span class="function"><span class="params">name</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>), <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item));</span><br></pre></td></tr></table></figure></p>
<h2 id="隐式返回"><a href="#隐式返回" class="headerlink" title="隐式返回"></a>隐式返回</h2><p>返回值是我们通常用来返回函数最终结果的关键字。只有一条语句的箭头函数，可以隐式返回结果（函数必须省略大括号 <code>{}</code> ，以便省略返回关键字）。
要返回多行语句（例如对象文本），需要使用 <code>()</code> 而不是 <code>{}</code> 来包裹函数体。这样可以确保代码以单个语句的形式进行求值。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcCircumference</span>(<span class="params">diameter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * diameter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">calcCircumference = <span class="function"><span class="params">diameter</span> =&gt;</span> (</span><br><span class="line">  <span class="built_in">Math</span>.PI * diameter;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><p>可以使用 <code>if</code> 语句来定义函数参数的默认值。<code>ES6</code> 中规定了可以在函数声明中定义默认值。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params">l, w, h</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (w === <span class="literal">undefined</span>)</span><br><span class="line">    w = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> (h === <span class="literal">undefined</span>)</span><br><span class="line">    h = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">return</span> l * w * h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">volume = <span class="function">(<span class="params">l, w = <span class="number">3</span>, h = <span class="number">4</span> </span>) =&gt;</span> (l * w * h);</span><br></pre></td></tr></table></figure></p>
<h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>过去我们习惯了使用 <code>+</code> 将多个变量转换为字符串，但是有没有更简单的方法呢？
<code>ES6</code> 提供了相应的方法，我们可以使用反引号和 <code>${}</code> 将变量合成一个字符串。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> welcome = <span class="string">'You have logged in as '</span> + first + <span class="string">' '</span> + last + <span class="string">'.'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = <span class="string">'http://'</span> + host + <span class="string">':'</span> + port + <span class="string">'/'</span> + database;</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> welcome = <span class="string">`You have logged in as <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = <span class="string">`http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>/<span class="subst">$&#123;database&#125;</span>`</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>解构赋值是一种表达式，用于从数组或对象中快速提取属性值，并赋给定义的变量。
在代码简写方面，解构赋值能达到很好的效果。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observable = <span class="built_in">require</span>(<span class="string">'mobx/observable'</span>);</span><br><span class="line"><span class="keyword">const</span> action = <span class="built_in">require</span>(<span class="string">'mobx/action'</span>);</span><br><span class="line"><span class="keyword">const</span> runInAction = <span class="built_in">require</span>(<span class="string">'mobx/runInAction'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">this</span>.props.store;</span><br><span class="line"><span class="keyword">const</span> form = <span class="keyword">this</span>.props.form;</span><br><span class="line"><span class="keyword">const</span> loading = <span class="keyword">this</span>.props.loading;</span><br><span class="line"><span class="keyword">const</span> errors = <span class="keyword">this</span>.props.errors;</span><br><span class="line"><span class="keyword">const</span> entity = <span class="keyword">this</span>.props.entity;</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action, runInAction &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; store, form, loading, errors, entity &#125; = <span class="keyword">this</span>.props;</span><br></pre></td></tr></table></figure></p>
<p>也可以自定义变量名：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; store, form, loading, errors, <span class="attr">entity</span>:contact &#125; = <span class="keyword">this</span>.props;</span><br></pre></td></tr></table></figure></p>
<h2 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lorem = <span class="string">'Lorem ipsum dolor sit amet, consectetur\n\t'</span></span><br><span class="line">    + <span class="string">'adipisicing elit, sed do eiusmod tempor incididunt\n\t'</span></span><br><span class="line">    + <span class="string">'ut labore et dolore magna aliqua. Ut enim ad minim\n\t'</span></span><br><span class="line">    + <span class="string">'veniam, quis nostrud exercitation ullamco laboris\n\t'</span></span><br><span class="line">    + <span class="string">'nisi ut aliquip ex ea commodo consequat. Duis aute\n\t'</span></span><br><span class="line">    + <span class="string">'irure dolor in reprehenderit in voluptate velit esse.\n\t'</span></span><br></pre></td></tr></table></figure>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lorem = <span class="string">`Lorem ipsum dolor sit amet, consectetur</span></span><br><span class="line"><span class="string">    adipisicing elit, sed do eiusmod tempor incididunt</span></span><br><span class="line"><span class="string">    ut labore et dolore magna aliqua. Ut enim ad minim</span></span><br><span class="line"><span class="string">    veniam, quis nostrud exercitation ullamco laboris</span></span><br><span class="line"><span class="string">    nisi ut aliquip ex ea commodo consequat. Duis aute</span></span><br><span class="line"><span class="string">    irure dolor in reprehenderit in voluptate velit esse.`</span></span><br></pre></td></tr></table></figure></p>
<h2 id="字符串展开"><a href="#字符串展开" class="headerlink" title="字符串展开"></a>字符串展开</h2><p>展开运算符是在 <code>ES6</code> 中引入的，使用展开运算符可以替换某些数组函数。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// joining arrays</span></span><br><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>].concat(odd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cloning arrays</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr.slice()</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// joining arrays</span></span><br><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>, ...odd];</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// [ 2, 4, 6, 1, 3, 5 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cloning arrays</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr];</span><br></pre></td></tr></table></figure></p>
<p>和 <code>concat()</code> 功能不同的是，用户可以使用扩展运算符在任何一个数组中插入另一个数组。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>, ...odd, <span class="number">4</span> , <span class="number">6</span>];</span><br></pre></td></tr></table></figure></p>
<p>也可以将展开运算符和 <code>ES6</code> 解构符号结合使用：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; a, b, ...z &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(z) <span class="comment">// &#123; c: 3, d: 4 &#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="强制参数"><a href="#强制参数" class="headerlink" title="强制参数"></a>强制参数</h2><p>默认情况下，如果不向函数参数传值，那么 <code>JavaScript</code> 会将函数参数设置为未定义，其它一些语言则会发出警告或错误。要执行参数分配，可以使用 <code>if</code> 语句抛出未定义的错误，或者可以利用“强制参数”。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(bar === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简化为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mandatory = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo = <span class="function">(<span class="params">bar = mandatory(</span>)) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Array-find"><a href="#Array-find" class="headerlink" title="Array.find"></a>Array.find</h2><p>如果你曾经编写过普通 <code>JavaScript</code> 中的 <code>find</code> 函数，那么你可能使用了 <code>for</code> 循环。在 <code>ES6</code> 中，介绍了一种名为 <code>find()</code> 的新数组函数，可以实现 <code>for</code> 循环的简写。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pets = [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Max'</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Cat'</span>, <span class="attr">name</span>: <span class="string">'Karl'</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Tommy'</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;pets.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(pets[i].type === <span class="string">'Dog'</span> &amp;&amp; pets[i].name === name) &#123;</span><br><span class="line">      <span class="keyword">return</span> pets[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pet = pets.find(<span class="function"><span class="params">pet</span> =&gt;</span> pet.type ===<span class="string">'Dog'</span> &amp;&amp; pet.name === <span class="string">'Tommy'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pet); <span class="comment">// &#123; type: 'Dog', name: 'Tommy' &#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Object-key"><a href="#Object-key" class="headerlink" title="Object[key]"></a>Object[key]</h2><p>虽然将 foo.bar 写成 foo [‘bar’] 是一种常见的做法，但是这种做法构成了编写可重用代码的基础。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!values.first)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(!values.last)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(validate(&#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>上面的函数完美的完成验证工作。但是当有很多表单，则需要应用验证，此时会有不同的字段和规则。如果可以构建一个在运行时配置的通用验证函数，会是一个好选择。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// object validation rules</span></span><br><span class="line"><span class="keyword">const</span> schema = &#123;</span><br><span class="line">  first: &#123;</span><br><span class="line">    required:<span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  last: &#123;</span><br><span class="line">    required:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// universal validation function</span></span><br><span class="line"><span class="keyword">const</span> validate = <span class="function">(<span class="params">schema, values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(field <span class="keyword">in</span> schema) &#123;</span><br><span class="line">    <span class="keyword">if</span>(schema[field].required) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!values[field]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>现在有了这个验证函数，我们就可以在所有窗体中重用，而无需为每个窗体编写自定义验证函数。</p>
<h2 id="双位操作符"><a href="#双位操作符" class="headerlink" title="双位操作符"></a>双位操作符</h2><p>位操作符是 <code>JavaScript</code> 初级教程的基本知识点，但是我们却不常使用位操作符。因为在不处理二进制的情况下，没有人愿意使用 1 和 0。
但是双位操作符却有一个很实用的案例。你可以使用双位操作符来替代 <code>Math.floor()</code> 。双否定位操作符的优势在于它执行相同的操作运行速度更快。
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">4.9</span>) === <span class="number">4</span>  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>简写为：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">~~<span class="number">4.9</span> === <span class="number">4</span>  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.sitepoint.com/shorthand-javascript-techniques/" target="_blank" rel="noopener"><span style="color: red;">原文链接</span></a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>一些常用的Gulp插件整理</title>
    <url>/2017/11/09/gulp/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>员工离职，只有两个真实原因：钱没给到位；心受委屈了</p>
<p><strong>马云</strong></p>
</blockquote>
<a id="more"></a>
<h2 id="Gulp-和-Grunt-对比"><a href="#Gulp-和-Grunt-对比" class="headerlink" title="Gulp 和 Grunt 对比"></a>Gulp 和 Grunt 对比</h2><p>我觉得 <a href="http://slides.com/contra/gulp#/" target="_blank" rel="noopener"><span style="color: red;">这篇对比介绍</span></a> 写的很好，大家可以看看。其中作者提到了为什么 <code>Grunt</code> 不好的原因：</p>
<ul>
<li>Plugins do multiple things：Want a banner? Use the javascript minifier</li>
<li>Plugins do things that don’t need to be plugins：Need to run your tests? Use a plugin</li>
<li>Grunt config format is a mess that tries to do everything：Not idiomatic with “the node way”</li>
<li>Headache of temp files/folders due to bad flow control</li>
</ul>
<p>作者明确指出：
<div class="note danger"><p>Your build system should empower not impede.
It should only manipulate files - let other libraries handle the rest.</p></div>
这一点我也表示赞同，不过还是看个人喜好吧，这里不做过多讨论。
下面才是本文的重点，都是目前我用过的插件，点击标题即可跳转至官方文档，持续更新…</p>
<h2 id="gulp-clean-css"><a href="#gulp-clean-css" class="headerlink" title="gulp-clean-css"></a><a href="https://www.npmjs.com/package/gulp-clean-css" target="_blank" rel="noopener">gulp-clean-css</a></h2><div class="note info"><p>gulp plugin to minify CSS, using clean-css<br>一款压缩css的插件</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">let</span> cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'styles/*.css'</span>)</span><br><span class="line">    .pipe(cleanCSS(&#123;<span class="attr">compatibility</span>: <span class="string">'ie8'</span>&#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其中<code>compatibility: &#39;ie8&#39;</code>表示兼容模式为 <code>ie8+</code></p>
<h2 id="gulp-uglify"><a href="#gulp-uglify" class="headerlink" title="gulp-uglify"></a><a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="noopener">gulp-uglify</a></h2><div class="note info"><p>Minify JavaScript with UglifyJS2<br>一款压缩js的插件</p></div>
<p>官方文档用到了 <code>pump</code>，我这里还是使用原始的做法吧，和压缩 <code>css</code> 一样的写法就行
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'compress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'lib/*.js'</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="gulp-htmlmin"><a href="#gulp-htmlmin" class="headerlink" title="gulp-htmlmin"></a><a href="https://www.npmjs.com/package/gulp-htmlmin" target="_blank" rel="noopener">gulp-htmlmin</a></h2><div class="note info"><p>gulp plugin to minify HTML.<br>一款压缩html的插件</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/*.html'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;<span class="attr">collapseWhitespace</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>更多配置选项设置请看 <a href="https://github.com/kangax/html-minifier" target="_blank" rel="noopener"><span style="color: red;">官方文档</span></a></p>
<h2 id="gulp-rename"><a href="#gulp-rename" class="headerlink" title="gulp-rename"></a><a href="https://github.com/hparra/gulp-rename" target="_blank" rel="noopener">gulp-rename</a></h2><div class="note info"><p>gulp-rename is a gulp plugin to rename files easily.<br>一款重命名文件名的插件</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">"gulp-rename"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rename via string</span></span><br><span class="line">gulp.src(<span class="string">"./src/main/text/hello.txt"</span>)</span><br><span class="line">  .pipe(rename(<span class="string">"main/text/ciao/goodbye.md"</span>))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">"./dist"</span>)); <span class="comment">// ./dist/main/text/ciao/goodbye.md</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rename via function</span></span><br><span class="line">gulp.src(<span class="string">"./src/**/hello.txt"</span>)</span><br><span class="line">  .pipe(rename(<span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">    path.dirname += <span class="string">"/ciao"</span>;</span><br><span class="line">    path.basename += <span class="string">"-goodbye"</span>;</span><br><span class="line">    path.extname = <span class="string">".md"</span>;</span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">"./dist"</span>)); <span class="comment">// ./dist/main/text/ciao/hello-goodbye.md</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rename via hash</span></span><br><span class="line">gulp.src(<span class="string">"./src/main/text/hello.txt"</span>, &#123; <span class="attr">base</span>: process.cwd() &#125;)</span><br><span class="line">  .pipe(rename(&#123;</span><br><span class="line">    dirname: <span class="string">"main/text/ciao"</span>,</span><br><span class="line">    basename: <span class="string">"aloha"</span>,</span><br><span class="line">    prefix: <span class="string">"bonjour-"</span>,</span><br><span class="line">    suffix: <span class="string">"-hola"</span>,</span><br><span class="line">    extname: <span class="string">".md"</span></span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">"./dist"</span>)); <span class="comment">// ./dist/main/text/ciao/bonjour-aloha-hola.md</span></span><br></pre></td></tr></table></figure>
<h2 id="gulp-uncss"><a href="#gulp-uncss" class="headerlink" title="gulp-uncss"></a><a href="https://www.npmjs.com/package/gulp-uncss" target="_blank" rel="noopener">gulp-uncss</a></h2><div class="note info"><p>Remove unused CSS with UnCSS<br>一款移除无用css的插件</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> uncss = <span class="built_in">require</span>(<span class="string">'gulp-uncss'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'site.css'</span>)</span><br><span class="line">    .pipe(uncss(&#123;</span><br><span class="line">        html: [<span class="string">'index.html'</span>, <span class="string">'posts/**/*.html'</span>, <span class="string">'http://example.com'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./out'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>说明一下，<code>html</code> 中的文件指的是引入了前面的 <code>site.css</code> 的。
<strong>注意</strong>，虽然 <a href="https://www.npmjs.com/package/gulp-uncss" target="_blank" rel="noopener"><span style="color: red;">官方文档的Example</span></a> 中使用了 <code>gulp-cssnano</code> 插件压缩css，但是相比较于 <code>gulp-clean-css</code> 效果较差，故不推荐使用</p>
<h2 id="gulp-concat"><a href="#gulp-concat" class="headerlink" title="gulp-concat"></a><a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="noopener">gulp-concat</a></h2><div class="note info"><p>Concatenates files<br>一款合并文件的插件</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./lib/*.js'</span>)</span><br><span class="line">    .pipe(concat(<span class="string">'all.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="gulp-imagemin"><a href="#gulp-imagemin" class="headerlink" title="gulp-imagemin"></a><a href="https://www.npmjs.com/package/gulp-imagemin" target="_blank" rel="noopener">gulp-imagemin</a></h2><div class="note info"><p>Minify PNG, JPEG, GIF and SVG images with imagemin<br>一款压缩图片的插件</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//If versions &gt;= 3</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, () =&gt;</span><br><span class="line">  gulp.src(<span class="string">'src/images/*'</span>)</span><br><span class="line">  .pipe(imagemin([</span><br><span class="line">    imagemin.gifsicle(&#123;<span class="attr">interlaced</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">    imagemin.jpegtran(&#123;<span class="attr">progressive</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">    imagemin.optipng(&#123;<span class="attr">optimizationLevel</span>: <span class="number">5</span>&#125;),</span><br><span class="line">    imagemin.svgo(&#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        &#123;<span class="attr">removeViewBox</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">cleanupIDs</span>: <span class="literal">false</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//If versions &lt; 3</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, () =&gt;</span><br><span class="line">  gulp.src(<span class="string">'src/images/*'</span>)</span><br><span class="line">  .pipe(imagemin(&#123;</span><br><span class="line">    interlaced: <span class="literal">true</span>,</span><br><span class="line">    progressive: <span class="literal">true</span>,</span><br><span class="line">    optimizationLevel: <span class="number">5</span>,</span><br><span class="line">    svgoPlugins: [&#123;<span class="attr">removeViewBox</span>: <span class="literal">true</span>&#125;]</span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>看名字就知道啦：</p>
<ul>
<li>gifsicle — Compress GIF images</li>
<li>jpegtran — Compress JPEG images</li>
<li>optipng — Compress PNG images</li>
<li>svgo — Compress SVG images</li>
</ul>
<p>不过从结果来看，依然比不过强大的 <a href="https://tinypng.com/" target="_blank" rel="noopener"><span style="color: red;">tinypng</span></a> ，如果对压缩的需求不是特别大，或者觉得手动 <code>tinypng</code> 太麻烦的话，就凑合着用吧，hiahia~</p>
<h2 id="imagemin-pngquant"><a href="#imagemin-pngquant" class="headerlink" title="imagemin-pngquant"></a><a href="https://www.npmjs.com/package/imagemin-pngquant" target="_blank" rel="noopener">imagemin-pngquant</a></h2><div class="note info"><p>pngquant imagemin plugin<br>配合 <code>gulp-imagemin</code> 进一步压缩图片的插件</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">'imagemin'</span>);</span><br><span class="line"><span class="keyword">const</span> imageminPngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</span><br><span class="line"> </span><br><span class="line">imagemin([<span class="string">'images/*.png'</span>], <span class="string">'build/images'</span>, &#123;<span class="attr">use</span>: [imageminPngquant()]&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Images optimized'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="gulp-clean"><a href="#gulp-clean" class="headerlink" title="gulp-clean"></a><a href="https://www.npmjs.com/package/gulp-clean" target="_blank" rel="noopener">gulp-clean</a></h2><div class="note info"><p>Removes files and folders<br>一款移除文件和文件夹的插件</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'app/tmp'</span>, &#123;<span class="attr">read</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">    .pipe(clean());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>{read: false}</code>只是为了删除的更快，如果删除文件的内容在同一个工作流中有被用到，那么就不要设置这一项。</p>
<h2 id="gulp-compass"><a href="#gulp-compass" class="headerlink" title="gulp-compass"></a><a href="https://www.npmjs.com/package/gulp-compass" target="_blank" rel="noopener">gulp-compass</a></h2><div class="note info"><p>Compile Sass to CSS using Compass<br>用 <code>compass</code> 把 <code>sass</code>编译成 <code>css</code> 的插件，即把手动编译的操作集成到 <code>gulp</code> 的 <code>task</code> 中</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> compass = <span class="built_in">require</span>(<span class="string">'gulp-compass'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'compass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'./src/*.scss'</span>)</span><br><span class="line">    .pipe(compass(&#123;</span><br><span class="line">      config_file: <span class="string">'./config.rb'</span>,</span><br><span class="line">      css: <span class="string">'stylesheets'</span>,</span><br><span class="line">      sass: <span class="string">'sass'</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'app/assets/temp'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>，<code>stylesheets</code> 和 <code>sass</code> 的值指的是文件路径</p>
<h2 id="gulp-sass"><a href="#gulp-sass" class="headerlink" title="gulp-sass"></a><a href="https://www.npmjs.com/package/gulp-sass" target="_blank" rel="noopener">gulp-sass</a></h2><div class="note info"><p>Sass plugin for Gulp.<br>为gulp编译sass的插件</p></div>
<p>弃用compass后，我才开始使用这个，功能比较单一，经常要与PostCSS混合使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./sass/**/*.scss'</span>)</span><br><span class="line">    .pipe(sass(&#123;<span class="attr">outputStyle</span>: <span class="string">'compressed'</span>&#125;).on(<span class="string">'error'</span>, sass.logError))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我们可以修改outputStyle，还是我们熟悉的那四种方式：<br>嵌套输出方式——nested<br>展开输出方式——expanded<br>紧凑输出方式——compact<br>压缩输出方式——compressed</p>
<h2 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp-watch"></a><a href="https://www.npmjs.com/package/gulp-watch" target="_blank" rel="noopener">gulp-watch</a></h2><div class="note info"><p>File watcher that uses super-fast chokidar and emits vinyl objects<br>文件监控，热更新</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    watch = <span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'stream'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Endless stream mode </span></span><br><span class="line">  <span class="keyword">return</span> watch(<span class="string">'css/**/*.css'</span>, &#123; <span class="attr">ignoreInitial</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'build'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'callback'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Callback mode, useful if any plugin in the pipeline depends on the `end`/`flush` event </span></span><br><span class="line">  <span class="keyword">return</span> watch(<span class="string">'css/**/*.css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'css/**/*.css'</span>)</span><br><span class="line">      .pipe(gulp.dest(<span class="string">'build'</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>说明：如果 <code>css/**/*.css</code> 发生改变，就执行后面的操作</p>
<h2 id="gulp-html-replace"><a href="#gulp-html-replace" class="headerlink" title="gulp-html-replace"></a><a href="https://www.npmjs.com/package/gulp-html-replace" target="_blank" rel="noopener">gulp-html-replace</a></h2><div class="note info"><p>Replace build blocks in HTML. Like useref but done right<br>替换 <code>HTML</code> 中的代码块，比 <code>gulp-useref</code> 做的更好</p></div>
<p>html文件：
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- build:&lt;name&gt; --&gt;</span></span><br><span class="line">Everything here will be replaced</span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>gulpfile.js文件：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Options is a single string </span></span><br><span class="line">htmlreplace(&#123;&lt;name&gt;: <span class="string">'js/main.js'</span>&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Options is an array of strings </span></span><br><span class="line">htmlreplace(&#123;&lt;name&gt;: [<span class="string">'js/monster.js'</span>, <span class="string">'js/hero.js'</span>]&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这边的要求有些严格，注释里面只能全是 <code>js</code> 或 <code>css</code> 才能这样写，如果不是，只能套用模板，举个例子：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Options is an object </span></span><br><span class="line">htmlreplace(&#123;</span><br><span class="line">  js: &#123;</span><br><span class="line">    src: <span class="string">'img/avatar.png'</span>,</span><br><span class="line">    tpl: <span class="string">'&lt;img src="%s" align="left" /&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Multiple tag replacement </span></span><br><span class="line">htmlreplace(&#123;</span><br><span class="line">  js: &#123;</span><br><span class="line">    src: [[<span class="string">'data-main.js'</span>, <span class="string">'require-src.js'</span>]],</span><br><span class="line">    tpl: <span class="string">'&lt;script data-main="%s" src="%s"&gt;&lt;/script&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>为什么说比 <code>gulp-useref</code> 做的更好呢，请看下一小节~~</p>
<h2 id="gulp-useref"><a href="#gulp-useref" class="headerlink" title="gulp-useref"></a><a href="https://www.npmjs.com/package/gulp-useref" target="_blank" rel="noopener">gulp-useref</a></h2><div class="note info"><p>Parse build blocks in HTML files to replace references to non-optimized scripts or stylesheets with useref<br>与 <code>gulp-html-replace</code>一样，也是替换 <code>HTML</code> 中的代码块，但是可以创建新的文件，写在注释中即可，说白了就是 <code>gulp-html-replace</code> 和 <code>gulp-concat</code> 的集成，如果同时使用 <code>gulp-if</code> ，可以把 <code>gulp-uglify</code> 和 <code>gulp-clean-css</code> 都写在这个 <code>task</code> 中，相当于把原先的多个 <code>task</code> 合并成一个</p></div>
<p>输入的html文件：
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- build:css css/combined.css --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/one.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/two.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- endbuild --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- build:js scripts/combined.js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/one.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/two.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!-- endbuild --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>输出的html文件：
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/combined.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/combined.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>gulpfile.js文件：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>),</span><br><span class="line">    gulpif = <span class="built_in">require</span>(<span class="string">'gulp-if'</span>),</span><br><span class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">    minifyCss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'app/*.html'</span>)</span><br><span class="line">    .pipe(useref())</span><br><span class="line">    .pipe(gulpif(<span class="string">'*.js'</span>, uglify()))</span><br><span class="line">    .pipe(gulpif(<span class="string">'*.css'</span>, minifyCss()))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>要注意输出文件的编码格式
对于<strong>大量集成<code>task</code></strong>的这种做法，我本人持保留态度，毕竟我还是习惯比较灵活的 <code>task</code> 配置方式，想执行哪个就执行哪个，一步到位的集成在 <code>default</code> 里面就 ok 啦~</p>
<h2 id="browser-sync"><a href="#browser-sync" class="headerlink" title="browser-sync"></a><a href="https://www.npmjs.com/package/browser-sync" target="_blank" rel="noopener">browser-sync</a></h2><div class="note info"><p>Time-saving synchronised browser testing. Keep multiple browsers &amp; devices in sync when building websites.<br>浏览器同步测试，可以保证多个浏览器和设备的同步</p></div>
<p>关于在 <code>gulp</code> 中的搭建方式建议看 <a href="https://browsersync.io/docs/gulp" target="_blank" rel="noopener"><span style="color: red;">这里</span></a><br>我自己的项目结构一般是这样的，首先，主文件夹下放各种配置文件，比如上面有提到过的 <code>config.rb</code> 、 <code>package.json</code> 、 <code>LICENSE</code> 、 <code>appcache</code> 、 <code>gulpfile.js</code> 等等，其次，主文件夹下有个 <code>dist</code> 文件夹放项目的原文件，执行 <code>gulp</code> 输出到同级的 <code>build</code> 文件夹， <code>build</code> 这个文件夹是可以直接放入生产环境的，所以针对官方文档的样例，我需要改造一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">var</span> sass        = <span class="built_in">require</span>(<span class="string">"gulp-ruby-sass"</span>);</span><br><span class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">"browser-sync"</span>).create();</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'reload'</span>, [<span class="string">'default'</span>], () =&gt;</span><br><span class="line">  browserSync.reload()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, [<span class="string">'default'</span>], () =&gt; &#123;</span><br><span class="line">  browserSync.init(&#123;</span><br><span class="line">      server: <span class="string">'./'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  gulp.watch([<span class="string">'./dist/*'</span>, <span class="string">'./dist/**/*'</span>], [<span class="string">'reload'</span>])</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里面server的值前面一定要加上 <code>./</code> ，大家可以试一试，效果是不一样的</p>
<h2 id="gulp-autoprefixer"><a href="#gulp-autoprefixer" class="headerlink" title="gulp-autoprefixer"></a><a href="https://www.npmjs.com/package/gulp-autoprefixer" target="_blank" rel="noopener">gulp-autoprefixer</a></h2><div class="note info"><p>Prefix CSS with Autoprefixer<br>增加浏览器的私有前缀，让你不用再考虑为了写浏览器的兼容前缀而头疼</p></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'default'</span>, () =&gt;</span><br><span class="line">  gulp.src(<span class="string">'src/app.css'</span>)</span><br><span class="line">    .pipe(autoprefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>],</span><br><span class="line">        cascade: <span class="literal">false</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>autoprefixer 内置有 8 个选项可供配置：
<div class="note success"><ul>
<li><code>browsers</code> (array): list of browsers query (like <code>last 2 versions</code>), which are supported in your project. We recommend to use <code>browserslist</code> config or <code>browserslist</code> key in <code>package.json</code>, rather than this option to share browsers with other tools. See <a href="https://github.com/ai/browserslist#queries" target="_blank" rel="noopener">Browserslist docs</a> for available queries and default value.</li>
<li><code>env</code> (string): environment for Browserslist.</li>
<li><code>cascade</code> (boolean): should Autoprefixer use Visual Cascade, if CSS is uncompressed. Default: <code>true</code></li>
<li><code>add</code> (boolean): should Autoprefixer add prefixes. Default is <code>true</code>.</li>
<li><code>remove</code> (boolean): should Autoprefixer [remove outdated] prefixes. Default is <code>true</code>.</li>
<li><code>supports</code> (boolean): should Autoprefixer add prefixes for <code>@supports</code> parameters. Default is <code>true</code>.</li>
<li><code>flexbox</code> (boolean|string): should Autoprefixer add prefixes for flexbox properties. With <code>&quot;no-2009&quot;</code> value Autoprefixer will add prefixes only for final and IE versions of specification. Default is <code>true</code>.</li>
<li><code>grid</code> (boolean): should Autoprefixer add IE prefixes for Grid Layout properties. Default is <code>false</code>.</li>
<li><code>stats</code> (object): custom <a href="https://github.com/ai/browserslist#custom-usage-data" target="_blank" rel="noopener">usage statistics</a> for <code>&gt; 10% in my stats</code> browsers query.</li>
</ul></div></p>
<p>官方的 Tip 中提到了 PostCSS：
<div class="note success"><p>If you use other PostCSS based tools, like cssnano, you may want to run them together using gulp-postcss instead of gulp-autoprefixer. It will be faster, as the CSS is parsed only once for all PostCSS based tools, including Autoprefixer.</p></div></p>
<p>这段话大致是说，如果你只使用autoprefixer这一个插件，那么就用gulp-autoprefixer；如果还要使用别的插件，那就使用 PostCSS ，将其他插件写在它里面，速度更快。关于 PostCSS ，请看下一小节。</p>
<p><span style="color: red;">更新一下，</span>大家在PostCSS中使用这个插件或者别的插件的时候可能会遇到如下问题：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Error: [object Object] is not a PostCSS plugin</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>额，这里PostCSS支持的插件列表里并没有gulp-autoprefixer，而支持的是它的原版autoprefixer，我们只要改一下require就行了，用法是一样的，以后遇到这类问题一定得回头找一下PostCSS支持的<a href="https://github.com/postcss/postcss/blob/master/docs/plugins.md" target="_blank" rel="noopener">插件列表</a></p>
<h2 id="gulp-postcss"><a href="#gulp-postcss" class="headerlink" title="gulp-postcss"></a><a href="https://www.npmjs.com/package/gulp-postcss" target="_blank" rel="noopener">gulp-postcss</a></h2><div class="note info"><p>PostCSS gulp plugin to pipe CSS through several plugins, but parse CSS only once.<br>PostCSS 将许多插件集成在一个 CSS 管道中，但只解析一次 CSS</p></div>
<p>比如说我们想要集成 autoprefixer 和 cssnano 这两个插件，那就要这么写：
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="keyword">var</span> cssnano = <span class="built_in">require</span>(<span class="string">'cssnano'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> plugins = [</span><br><span class="line">    autoprefixer(&#123;<span class="attr">browsers</span>: [<span class="string">'last 1 version'</span>]&#125;),</span><br><span class="line">    cssnano()</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/*.css'</span>)</span><br><span class="line">    .pipe(postcss(plugins))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dest'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>不过需要它的插件列表里有支持这个插件才行，具体支持情况请看 <a href="https://github.com/postcss/postcss/blob/master/docs/plugins.md" target="_blank" rel="noopener"><span style="color: red;">这里</span></a>，当然，不要忘了它始终还是一款 CSS 插件，千万不要让它干别的事情，它也干不了呀，哈哈~</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>关于themes/next无法上传github备份</title>
    <url>/2017/11/08/themes/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>业精于勤，荒于嬉；行成于思，毁于随</p>
<p><strong>韩愈</strong></p>
</blockquote>
<a id="more"></a>
<p>&emsp;&emsp;作为一个写代码的人来说，保存和备份就像是吃饭和喝水一样重要，所以随手保存和备份已经成为我的习惯了。使用 <code>Hexo</code> 在 <code>github</code> 搭建的博客，仓库里只有生成的静态网页文件，是没有 <code>Hexo</code> 的源文件的，如果现在这个电脑出现了什么问题，需要换一台电脑，那就麻烦了，所以我就研究了一下怎么备份。</p>
<p>&emsp;&emsp;关于如何备份我已经在前一篇文章《Hexo+NexT搭建博客之踩坑》中 “管理项目” 这一章节详细说明了，但是细心的朋友会发现，即使按照步骤一步步做下来，依然会发现自己引入的 <code>themes</code> （我这里就是 <code>next</code>）这个文件夹无法备份。当然，我在 <code>next</code> 的 <code>Issues</code> 找到了<a href="https://github.com/iissnan/hexo-theme-next/issues/932" target="_blank" rel="noopener"><span style="color: red;">该问题及其解决办法</span></a>。关于大神们提到的 <code>submodule</code> 和 <code>subtree</code> 这两种方式，算是比较官方的做法了，我自己也试过了 <code>subtree</code> ，国内速度太慢实在是受不了，于是乎我就开始想如何简化这些操作，下面请开始我的表演：</p>
<p>&emsp;&emsp;首先，进入 <code>themes/next</code> 文件夹，把里面 <code>.git</code> 文件夹删除</p>
<p>&emsp;&emsp;然后，回到上一级目录 <code>themes</code> ，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm -r --cached .</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"..."</span></span><br><span class="line">$ git push -u origin hexo</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这样就 <code>push</code> 上去了，以后就像原来一样操作就行了。</p>
<p>&emsp;&emsp;最后，我说一下这样做的缺点：这种做法完全是本地化的行为，也就是说，如果 <code>NexT</code> 主题的原作者对其项目做了更新，我们是没办法第一时间更新我们自己的项目的，相当于我们只 <code>fork</code> 了原作者的项目，拿到本地来自己个性化配置，然后 <code>push</code> 到我们自己的项目中使用。而 <code>submodule</code> 和 <code>subtree</code> 的做法是将原项目当做公用库来使用，避免了我这种做法的缺点，但是，至于个性化的配置，由于我们是直接更改原项目的配置文件，即官方文档所说的更改 <code>主题配置文件</code> ，所以我还是觉得 <code>submodule</code> 和 <code>subtree</code> 这两种做法稍显鸡肋了。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>themes</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT搭建博客之踩坑</title>
    <url>/2017/11/08/hexo-build/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>年轻人少看点成功学的书</p>
</blockquote>
<a id="more"></a>
<h2 id="重要的事情"><a href="#重要的事情" class="headerlink" title="重要的事情"></a>重要的事情</h2><p>先按照 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener"><span style="color: red;">Hexo官方文档</span></a> 和 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener"><span style="color: red;">NexT官方文档</span></a> 按自己需要一步步搭建<br>下面才是本文的重点</p>
<h2 id="管理项目"><a href="#管理项目" class="headerlink" title="管理项目"></a>管理项目</h2><p>其实，<code>Hexo</code> 生成的文件里面是有一个 <code>.gitignore</code> 的，所以它的本意应该也是想我们把这些文件放到 <code>GitHub</code> 上存放的。但是考虑到如果每个 <code>GitHub Pages</code> 都需要额外的一个仓库存放这些文件，就显得特别冗余了。这个时候就可以用分支的思路！一个分支用来存放 <code>Hexo</code> 生成的网站原始的文件，另一个分支用来存放生成的静态网页。</p>
<p>一、关于搭建的流程</p>
<ol>
<li><a href="https://github.com/carolyicheng666/carolyicheng666.github.io" target="_blank" rel="noopener"><span style="color: red;">创建仓库</span></a></li>
<li>创建两个分支：<code>master</code> 与 <code>hexo</code></li>
<li>设置 <code>hexo</code> 为默认分支（因为我们只需要手动管理这个分支上的 <code>Hexo</code> 网站文件）</li>
<li><p>拷贝仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:carolyicheng666/carolyicheng666.github.io.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>在本地 <code>carolyicheng666.github.io</code> 文件夹下通过依次执行如下命令，此时当前分支应显示为 <code>hexo</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>_config.yml</code> 中的 <code>deploy</code> 参数，分支应为 <code>master</code> </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:carolyicheng666/carolyicheng666.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p> 后面回过头来想想，其实这一点很精髓，无论是改配置还是写博客，都只需要在 <code>hexo</code> 分支上完成，然后用 <code>hexo g -d</code> 命令发布到 <code>master</code> 分支上，页面即可正常显示，本地也不用切换分支</p>
</li>
<li><p>依次执行如下命令，提交网站相关的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"..."</span></span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<p> 生成网站并部署到 <code>GitHub</code> 上</p>
</li>
</ol>
<p>这样一来，在 <code>GitHub</code> 上的仓库就有两个分支，一个 <code>hexo</code> 分支用来存放网站的原始文件，一个 <code>master</code> 分支用来存放生成的静态网页。</p>
<p>二、关于日常的改动流程<br>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p>
<ol>
<li><p>依次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"..."</span></span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure>
<p> 指令将改动推送到 <code>GitHub</code> （此时当前分支应为 <code>hexo</code> ）</p>
</li>
<li><p>然后才执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<p> 发布网站到master分支上</p>
</li>
</ol>
<p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p>
<p>三、本地资料丢失后的流程<br>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>
<ol>
<li><p>使用如下命令，拷贝仓库（默认分支为 <code>hexo</code> ）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:carolyicheng666/carolyicheng666.github.io.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>在本地新拷贝的 <code>carolyicheng666.github.io</code> 文件夹下依次执行下列指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="建立关于页"><a href="#建立关于页" class="headerlink" title="建立关于页"></a>建立关于页</h2><p>在命令行里面输入
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure></p>
<p>然后你会发现 <code>source</code> 里面多了个目录 <code>about</code> ，里面有个 <code>index.md</code> ，其实你也可以手动建立。页面的格式和文章一样，然后在 <code>themes\next\_config.yml</code> 将 <code>about: /about/ || user</code> 前面的注释取消即可</p>
<h2 id="建立标签云"><a href="#建立标签云" class="headerlink" title="建立标签云"></a>建立标签云</h2><ol>
<li><p>新建一个页面，命名为 <code>tags</code> 。命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">title: Tagcloud</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p> 注意：如果有启用多说 或者 <code>Disqus</code> 评论，默认页面也会带有评论。需要关闭的话，请添加字段 <code>comments</code> 并将值设置为 <code>false</code>。</p>
</li>
<li><p>在菜单中添加链接。编辑 <code>主题配置文件</code> ，添加 <code>tags</code> 到 <code>menu</code> 中，如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="添加网易云音乐"><a href="#添加网易云音乐" class="headerlink" title="添加网易云音乐"></a>添加网易云音乐</h2><p>打开网易云音乐官网，直接搜索我们想要插入的音乐，然后点击生成外链播放器，然后可以根据你得设置生成相应的 <code>html</code> 代码，将获得的html代码插入到你想要插入的位置即可，比如我放在了侧边栏下，找到 <code>layout\_macro\sidebar.swig</code> 文件，添加如下代码
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"music163player"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">300</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"https://music.163.com/outchain/player?type=2&amp;id=33875750&amp;auto=1&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>注意，<code>auto=1</code> 表示自动播放</p>
<h2 id="添加-Fork-me-on-GitHub"><a href="#添加-Fork-me-on-GitHub" class="headerlink" title="添加 Fork me on GitHub"></a>添加 Fork me on GitHub</h2><p>去 <a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener"><span style="color: red;">Ribbons</span></a> 挑选自己喜欢的样式，并复制代码，添加到 <code>themes\next\layout\_layout.swig</code> 的 <code>body</code> 标签之内即可，如果被顶部栏遮住了，在样式里设置 <code>z-index</code> 将其拉高即可，记得把里面的 <code>url</code> 换成自己的！</p>
<h2 id="站点头像改成圆形"><a href="#站点头像改成圆形" class="headerlink" title="站点头像改成圆形"></a>站点头像改成圆形</h2><p>在 <code>themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code> 中 <code>.site-author-image</code> 定义中增加
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="去掉站点链接前面的小圆点"><a href="#去掉站点链接前面的小圆点" class="headerlink" title="去掉站点链接前面的小圆点"></a>去掉站点链接前面的小圆点</h2><p>如果不太喜欢站点链接前面的小圆点，去掉 <code>themes\next\source\css\_common\components\sidebar\sidebar-author-links.styl</code> 中 <code>a::before</code> 的定义即可。</p>
<h2 id="hexo-wordcount-实现统计功能"><a href="#hexo-wordcount-实现统计功能" class="headerlink" title="hexo-wordcount 实现统计功能"></a>hexo-wordcount 实现统计功能</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>
<p>安装完插件之后在主题的配置文件中开启该功能就可以~
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>然后找到 <code>themes\next\layout\_macro\post.swig</code> 文件，看个人喜好吧，修改如下两个部分
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">...</span><br><span class="line">&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h2 id="打赏功能和copyright"><a href="#打赏功能和copyright" class="headerlink" title="打赏功能和copyright"></a>打赏功能和copyright</h2><p>按照官网设置之后，本地测试成功，但是部署之后，生产环境会有问题。
我在 <a href="https://github.com/iissnan/hexo-theme-next/pull/687" target="_blank" rel="noopener"><span style="color: red;">这篇文章</span></a> 找到了答案，感谢 BalanceUhen 提供的解决办法：
<div class="note info"><p>找到 <code>themes\next\source\css\_common\components\post\post.styl</code>，把 <code>@import &quot;post-reward&quot;</code>后面的 <code>if</code> 给删除掉后主题就会被导入到 <code>css</code> 中了。</p></div></p>
<p>另外，把 <code>@import &quot;post-copyright&quot;</code> 后面的 <code>if</code> 删除掉，copyright 也能生效了。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>有一种美好，叫做二次元</title>
    <url>/2017/11/07/anime/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>没有未来的未来不是我想要的未来</p>
<p><strong>境界的彼方</strong></p>
</blockquote>
<a id="more"></a>
<center>有一种友情，叫做《海贼王》</center>
<center>有一种治愈，叫做《夏目友人帐》</center>
<center>有一种执着，叫做《火影忍者》</center>
<center>有一种坚持，叫做《命运石之门》</center>
<center>有一种凄美，叫做《薄樱鬼》</center>
<center>有一种青春，叫做《灌篮高手》</center>
<center>有一种欢乐，叫做《樱兰高校男公关部》</center>
<center>有一种感动，叫做《CLANNAD》</center>
<center>有一种邪恶，叫做《亲吻姐姐》</center>
<center>有一种火焰，叫做《家庭教师》</center>
<center>有一种爱情，叫做《刀剑神域》</center>
<center>有一种坚强，叫做《神魔遮天》</center>
<center>有一种感人，叫做《最终幻想》</center>
<center>有一种热血，叫做《妖精的尾巴》</center>
<center>有一种牺牲，叫做《叛逆的鲁鲁修》</center>
<center>有一种梦想，叫做《食梦者玛丽》</center>
<center>有一个神话，叫做《Angel Beats！》</center>
<center>有一种守护，叫做《死神》</center>
<center>有一种梦想，叫做《网球王子》</center>
<center>有一种童年，叫做《哆来A梦》</center>
<center>有一种固执，叫做《通灵王》</center>
<center>有一种轮回，叫做《名侦探柯南》</center>
<center>有一种唯美，叫做《黑执事》</center>
<center>有一种华丽，叫做《吸血鬼骑士》</center>
<center>有一种悲情，叫做《罪恶王冠》</center>
<center>有一种心痛，叫做《萤火之森》</center>
<center>有一种天真，叫做《中二病也要谈恋爱》</center>
<center>有一种人性，叫做《尸鬼》</center>
<center>有一种宿命，叫做《X战记》</center>
<center>有一种命运，叫做《Fate系列》</center>
<center>有一种真实，叫做《地狱少女》</center>
<center>有一种眷恋，叫做《犬夜叉》</center>
<center>有一种纯真，叫做《风之谷》</center>
<center>有一种温柔，叫做《蔷薇少女》</center>
<center>有一种心情，叫做《好想告诉你》</center>
<center>有一种智商，叫做《死亡笔记》</center>
<center>有一种怀疑，叫做《K》</center>
<center>有一种交换，叫做《钢之炼金术师》</center>
<center>有一种羁绊，叫做《最游记》</center>
<center>有一种纯情，叫做《只要你说你爱我》</center>
<center>有一种逆袭，叫做《加速世界》</center>
<center>有一种无奈，叫做《未闻花名》</center>
<center>有一种缘分，叫做《元气少女缘结神》</center>
<center>有一种绝望，叫做《弹丸论破》</center>
<center>有一种畸恋，叫做《缘之空》</center>
<center>有一种音乐，叫做《轻音少女》</center>
<center>有一种天使，叫做《天降之物》</center>
<center>有一种士，叫做《EVA》</center>
<center>有一种管家，叫做《旋风管家》</center>
<center>有一种萝莉，叫做《灼眼的夏娜》</center>
<center>有一种契约，叫做《零之使魔》</center>
<center>有一种巧合，叫做《龙与虎》</center>
<center>有一种抑郁，叫做《我们的存在》</center>
<center>有一种基情，叫做《世界第一初恋》</center>
<center>有一种初恋，叫做《秒速五厘米》</center>
<center>有一种完美，叫做《会长是女仆大人》</center>
<center>有一种孤独，叫做《我的朋友很少》</center>
<center>有一种喜爱，叫做动漫</center>
<center>有一种美好，叫做二次元</center>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>anime</tag>
      </tags>
  </entry>
  <entry>
    <title>不懂技术的人不要对懂技术的人说这很容易实现</title>
    <url>/2017/11/07/technology/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>技术总是在短期内被高估，在长期又被低估——世间很多东西都是这样子的。<br>如果你能够保持足够的理性，能保持足够的耐性，它一定会在恰当的时候带给你惊喜。</p>
</blockquote>
<a id="more"></a>
<p>&emsp;&emsp;“这个网站相当简单，所有你需要做的就是完成X，Y，Z。你看起来应该是技术很好，所以，我相信，你不需要花费太多时间就能把它搭建起来。”</p>
<p>&emsp;&emsp;我时不时的就会收到这样的Email。写这些邮件的人几乎都是跟技术不沾边的人，或正在研究他们的第一个产品。起初，当听到人们这样的话，我总是十分的恼怒。他们在跟谁辩论软件开发所需要的时间？但后来我意识到，即使我自己对自己的项目预测要花去多少开发时间,我也是一筹莫展。如果连我自己都做不好，我何必对那些人恼怒呢？</p>
<p>&emsp;&emsp;真正让我郁闷的不是他们预估的错误。问题在于他们竟然认为自己可以做出正确的估计。作为开发人员，我们经常会发现，在软件开发的问题上，一个外行人会很自然的把复杂的事情估计的很简单。</p>
<p>&emsp;&emsp;这并不是为我们的愤怒找借口。但这引起了另外一个有趣的问题：为什么我们天生的预测复杂性的能力在遇到编程问题时会失灵？</p>
<p>&emsp;&emsp;为了回答这个问题，让我们来认识一下我们的大脑如何估计事情的。有些事情对于一些没有经验的人也很容易预估正确，但有些事情则不然。</p>
<p>&emsp;&emsp;我们来想想观看一个人弹吉他。即使你从来没有弹过吉他，在观看了一场弹奏《玛丽有只小羊羔(Mary had a Little Lamb)》的吉他表演后，你也能大概推测出这很简单，一个人不需要太高的技术就能演奏出来。同样，当观看了有人演奏D大调的《卡农(Pachabel’s Canon)》后，你也很容易推测出，这很复杂，需要很长时间的练习才能演奏的出来。</p>
<p>&emsp;&emsp;为什么我们能够很迅速准确的预估这两首曲子的复杂性呢？这是跟我们用来判断一个事情简单和还是复杂的方法有关的。我们的大脑有一些现成的模式来完成这些事情，首先一个就是根据速度。这种情况下，大脑会辨别每秒钟演奏的东西。根据每秒钟演奏了多少东西，我们很容易有一个直观的判断曲子的复杂度。因为用吉他演奏一首歌是一种物理过程，一种感官上的活动，我们的大脑很容易依此来推测速度，继而转换成复杂度。</p>
<p>&emsp;&emsp;我们还有另外一个天生的推测依据：体积。想想把一个帐篷和一栋公寓放在一起对比。即使一个人从来没有学过建筑学，他也能告诉你通常设计和建造一个帐篷会比设计和建造一栋公寓要简单。为什么？因为我们天生的会使用物理体积作为事物复杂性的一个指标。</p>
<p>&emsp;&emsp;当然。上面说的这两种逻辑分析并不是总是100%的有效。但大多数情况下，人们就是这样干，而且很成功。大多数情况中，我们在对物理过程评估时，我们的大脑会对物理事物进行有效的关联，不需要依赖之前的经验。</p>
<p>&emsp;&emsp;现在让我们来谈谈软件。当一个不懂技术的人试图对软件开发时间进行评估时，有两个很基本的直观指标在辅助他们：以体积为指标的复杂度和以速度为指标的复杂度。但他们没有意识到，软件跟他们想象的不一样。软件本质上不是有形物质。没有体积和速度。它的极小的组成部分可能会时不时的在电脑屏幕上闪现。正因为如此，当面对开发一个web应用时(或任何类型的软件)，我们的基本直观感觉失效了。</p>
<p>&emsp;&emsp;这第一点，速度，很显然根本不可能被外行人拿来对软件进行评估。于是很自然的，他们倾向于使用体积指标进行评估。要么是根据描述文档的页数，要么是根据软件的功能用例数或特征数。</p>
<p>&emsp;&emsp;有时候，这种评估手段确实有效！当面对一个静态网站，没有特别的设计要求，外行人很容易用这种方法估计出开发时间。但是，通常情况下，对于软件开发，体积并不能真实有效的反映复杂度。</p>
<p>&emsp;&emsp;不幸的是，对于软件的复杂度，唯一有效的推测方法是依据经验。而且还不是时时都好用。作为一个程序员，我知道，根据我之前开发过的相似的功能特征，我可以估计出现在的这些功能特征各自要多少开发时间。然后，我把总时间加起来，这就得到了完成整个项目需要的大致时间。然而，事实情况中，每个项目在开发过程中都遇到二、三个瓶颈。这些瓶颈会肆意的消耗程序员的大量时间，你在遇到它们之前根本不会有所预见。它们会拖住整个项目，致使工期延后数周甚至数月。</p>
<p>&emsp;&emsp;这些是没有经验的人在评估复杂度时不会理解的。他们不明白在其他事情上都很灵的方法，为什么放到软件开发上就不灵了。所以，下一次当你听到有人说“我想你几天时间就能把它开发出来”时，不管是谁说的，都不要懊恼。深呼吸一下，告诉他这篇文章的地址，自己该干什么还干什么。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>technology</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/11/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
